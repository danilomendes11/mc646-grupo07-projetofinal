package circularfifoqueue;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.lang.Class<?> wildcardClass2 = charSequenceQueue1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence3 = charSequenceQueue1.get((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence3 = charSequenceQueue1.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (52) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence2 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence3 = charSequenceQueue1.get(52);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (52) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.Class<?> wildcardClass5 = charSequenceQueue1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = charSequenceQueue1.addAll(charSequenceCollection6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        java.lang.Class<?> wildcardClass9 = charSequenceQueue7.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence30 = charSequenceQueue1.get(1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (1) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = charSequenceQueue7.containsAll(charSequenceCollection9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence5 = charSequenceQueue1.get((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        boolean boolean4 = charSequenceQueue1.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence6 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charSequenceStream5);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        boolean boolean10 = charSequenceQueue7.contains((java.lang.Object) 1.0d);
        boolean boolean11 = charSequenceQueue7.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue7.stream();
        boolean boolean13 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence14 = charSequenceQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.io.Serializable> serializableQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.io.Serializable>();
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence7 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        java.lang.Object[] objArray29 = charSequenceQueue1.toArray();
        java.lang.Class<?> wildcardClass30 = charSequenceQueue1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence9 = charSequenceQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.lang.Class<?> wildcardClass10 = charSequenceQueue8.getClass();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence5 = charSequenceQueue1.get((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (10) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.apache.commons.collections4.queue.CircularFifoQueue<org.apache.commons.collections4.BoundedCollection<java.lang.CharSequence>> charSequenceCollectionQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<org.apache.commons.collections4.BoundedCollection<java.lang.CharSequence>>();
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence8 = charSequenceQueue1.get((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        charSequenceQueue8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence11 = charSequenceQueue8.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor10 = charSequenceQueue8.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence11 = charSequenceQueue8.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceItor10);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue7.iterator();
        boolean boolean16 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue7);
        java.lang.CharSequence charSequence17 = charSequenceQueue7.poll();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence19 = charSequenceQueue7.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (52) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence17);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence4 = charSequenceQueue1.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.util.AbstractList<java.lang.CharSequence>> charSequenceListQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.AbstractList<java.lang.CharSequence>>(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean9 = charSequenceQueue7.offer((java.lang.CharSequence) "");
        java.lang.String str10 = charSequenceQueue7.toString();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor11 = charSequenceQueue7.iterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator12 = charSequenceQueue7.spliterator();
        boolean boolean14 = charSequenceQueue7.offer((java.lang.CharSequence) "hi!");
        java.lang.CharSequence[] charSequenceArray17 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList18 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18, charSequenceArray17);
        java.lang.CharSequence[] charSequenceArray22 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23, charSequenceArray22);
        boolean boolean25 = charSequenceQueue23.isAtFullCapacity();
        boolean boolean26 = charSequenceList18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        java.lang.CharSequence charSequence27 = charSequenceQueue23.poll();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream28 = charSequenceQueue23.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue32 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.lang.CharSequence charSequence33 = charSequenceQueue32.peek();
        java.util.Queue[] queueArray35 = new java.util.Queue[4];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray36 = (java.util.Queue<java.lang.CharSequence>[]) queueArray35;
        charSequenceQueueArray36[0] = charSequenceQueue7;
        charSequenceQueueArray36[1] = charSequenceQueue23;
        charSequenceQueueArray36[2] = charSequenceQueue30;
        charSequenceQueueArray36[3] = charSequenceQueue32;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray45 = charSequenceQueue1.toArray(charSequenceQueueArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(charSequenceItor11);
        org.junit.Assert.assertNotNull(charSequenceSpliterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(charSequenceArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charSequenceArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertNotNull(charSequenceStream28);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertNotNull(queueArray35);
        org.junit.Assert.assertNotNull(charSequenceQueueArray36);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue3, charSequenceArray2);
        boolean boolean5 = charSequenceQueue3.isAtFullCapacity();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue3.parallelStream();
        boolean boolean7 = charSequenceQueue3.isEmpty();
        java.lang.CharSequence charSequence8 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = charSequenceQueue3.offer(charSequence8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Attempted to add null object to queue");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.lang.CharSequence charSequence12 = charSequenceQueue8.poll();
        boolean boolean13 = charSequenceQueue8.isAtFullCapacity();
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList16 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16, charSequenceArray15);
        java.lang.Object obj18 = null;
        boolean boolean19 = charSequenceList16.contains(obj18);
        java.lang.String str20 = charSequenceList16.toString();
        java.lang.CharSequence[] charSequenceArray22 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList23 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23, charSequenceArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = charSequenceList23.contains(obj25);
        java.lang.String str27 = charSequenceList23.toString();
        boolean boolean28 = charSequenceList16.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23);
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.CharSequence[] charSequenceArray36 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37, charSequenceArray36);
        boolean boolean39 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean40 = charSequenceList32.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37);
        boolean boolean41 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean42 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean43 = charSequenceList23.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37);
        boolean boolean44 = charSequenceQueue8.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue46 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream47 = charSequenceQueue46.parallelStream();
        boolean boolean49 = charSequenceQueue46.contains((java.lang.Object) 1.0d);
        charSequenceQueue46.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream51 = charSequenceQueue46.stream();
        boolean boolean52 = charSequenceQueue46.isEmpty();
        java.util.Queue[] queueArray54 = new java.util.Queue[1];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray55 = (java.util.Queue<java.lang.CharSequence>[]) queueArray54;
        charSequenceQueueArray55[0] = charSequenceQueue46;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray58 = charSequenceQueue8.toArray(charSequenceQueueArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!]" + "'", str20, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[hi!]" + "'", str27, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(charSequenceArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charSequenceStream47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charSequenceStream51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(queueArray54);
        org.junit.Assert.assertNotNull(charSequenceQueueArray55);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        boolean boolean14 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceQueue15.stream();
        java.lang.Class<?> wildcardClass17 = charSequenceQueue15.getClass();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceStream16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence5 = charSequenceQueue1.get((int) '#');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (35) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        boolean boolean6 = charSequenceQueue1.isAtFullCapacity();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator9 = charSequenceQueue8.spliterator();
        java.lang.CharSequence charSequence10 = charSequenceQueue8.peek();
        boolean boolean11 = charSequenceQueue1.contains((java.lang.Object) charSequence10);
        java.lang.Class<?> wildcardClass12 = charSequenceQueue1.getClass();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator9);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.Type> typeQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.Type>((int) ' ');
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass6 = charSequenceQueue1.getClass();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.Type> typeQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.Type>((int) '4');
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        boolean boolean8 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean9 = charSequenceQueue1.isEmpty();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        boolean boolean4 = charSequenceQueue1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence6 = charSequenceQueue1.get((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.util.Queue<java.lang.CharSequence>> charSequenceQueueQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.Queue<java.lang.CharSequence>>((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        boolean boolean10 = charSequenceQueue7.contains((java.lang.Object) 1.0d);
        boolean boolean11 = charSequenceQueue7.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue7.stream();
        boolean boolean13 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence14 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray4 = charSequenceQueue1.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor5 = charSequenceQueue1.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence7 = charSequenceQueue1.get(52);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (52) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor5);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence9 = charSequenceQueue1.get((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (97) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertNotNull(charSequenceStream7);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        boolean boolean14 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        java.lang.Object[] objArray16 = charSequenceList9.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean20 = charSequenceQueue18.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence21 = charSequenceQueue18.element();
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList24 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList24, charSequenceArray23);
        java.lang.CharSequence[] charSequenceArray28 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList29 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList29, charSequenceArray28);
        java.lang.CharSequence[] charSequenceArray33 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34, charSequenceArray33);
        boolean boolean36 = charSequenceQueue34.isAtFullCapacity();
        boolean boolean37 = charSequenceList29.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        boolean boolean38 = charSequenceList24.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList29);
        boolean boolean39 = charSequenceQueue18.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList29);
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = charSequenceList42.contains(obj44);
        java.lang.String str46 = charSequenceList42.toString();
        java.lang.CharSequence[] charSequenceArray48 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList49 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList49, charSequenceArray48);
        java.lang.Object obj51 = null;
        boolean boolean52 = charSequenceList49.contains(obj51);
        java.lang.String str53 = charSequenceList49.toString();
        boolean boolean54 = charSequenceList42.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList49);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue55 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList49);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream56 = charSequenceQueue55.stream();
        boolean boolean57 = charSequenceQueue18.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue55);
        java.lang.CharSequence charSequence58 = charSequenceQueue55.element();
        java.lang.CharSequence charSequence59 = charSequenceQueue55.peek();
        boolean boolean60 = charSequenceList9.contains((java.lang.Object) charSequence59);
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "" + "'", charSequence21, "");
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charSequenceArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(charSequenceArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[hi!]" + "'", str53, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(charSequenceStream56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean11 = charSequenceQueue7.isFull();
        java.lang.CharSequence charSequence13 = charSequenceQueue7.get(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence15 = charSequenceQueue7.get(4);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (4) is outside the available range [0, 2)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        boolean boolean10 = charSequenceQueue7.contains((java.lang.Object) 1.0d);
        boolean boolean11 = charSequenceQueue7.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue7.stream();
        boolean boolean13 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        charSequenceQueue7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence15 = charSequenceQueue7.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue7.iterator();
        boolean boolean16 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue7);
        java.lang.Class<?> wildcardClass17 = charSequenceQueue7.getClass();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        boolean boolean14 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceQueue15.stream();
        java.lang.String str17 = charSequenceQueue15.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator20 = charSequenceQueue19.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator21 = charSequenceQueue19.spliterator();
        boolean boolean23 = charSequenceQueue19.add((java.lang.CharSequence) "");
        boolean boolean24 = charSequenceQueue19.isAtFullCapacity();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue26 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator27 = charSequenceQueue26.spliterator();
        java.lang.CharSequence charSequence28 = charSequenceQueue26.peek();
        boolean boolean29 = charSequenceQueue19.contains((java.lang.Object) charSequence28);
        java.lang.Class<?> wildcardClass30 = charSequenceQueue19.getClass();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue32 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator33 = charSequenceQueue32.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator34 = charSequenceQueue32.spliterator();
        boolean boolean36 = charSequenceQueue32.add((java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass37 = charSequenceQueue32.getClass();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue39 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean41 = charSequenceQueue39.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = charSequenceQueue39.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue44 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean46 = charSequenceQueue44.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence47 = charSequenceQueue44.element();
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList50 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList50, charSequenceArray49);
        java.lang.CharSequence[] charSequenceArray54 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList55 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList55, charSequenceArray54);
        java.lang.CharSequence[] charSequenceArray59 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue60 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue60, charSequenceArray59);
        boolean boolean62 = charSequenceQueue60.isAtFullCapacity();
        boolean boolean63 = charSequenceList55.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue60);
        boolean boolean64 = charSequenceList50.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList55);
        boolean boolean65 = charSequenceQueue44.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList55);
        boolean boolean66 = charSequenceQueue39.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList55);
        java.lang.Object[] objArray67 = charSequenceQueue39.toArray();
        java.lang.Class<?> wildcardClass68 = charSequenceQueue39.getClass();
        java.lang.Class[] classArray70 = new java.lang.Class[3];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray71 = (java.lang.Class<?>[]) classArray70;
        wildcardClassArray71[0] = wildcardClass30;
        wildcardClassArray71[1] = wildcardClass37;
        wildcardClassArray71[2] = wildcardClass68;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?>[] wildcardClassArray78 = charSequenceQueue15.toArray(wildcardClassArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceStream16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceSpliterator20);
        org.junit.Assert.assertNotNull(charSequenceSpliterator21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator27);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(charSequenceSpliterator33);
        org.junit.Assert.assertNotNull(charSequenceSpliterator34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "" + "'", charSequence42, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "" + "'", charSequence47, "");
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(charSequenceArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(charSequenceArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(wildcardClassArray71);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        java.lang.Class<?> wildcardClass7 = charSequenceStream6.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        java.lang.Class<?> wildcardClass11 = charSequenceQueue7.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.AnnotatedElement> annotatedElementQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.AnnotatedElement>(5);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        int int7 = charSequenceQueue1.maxSize();
        int int8 = charSequenceQueue1.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16, charSequenceArray15);
        boolean boolean18 = charSequenceQueue16.isAtFullCapacity();
        boolean boolean19 = charSequenceQueue10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream20 = charSequenceQueue10.stream();
        boolean boolean21 = charSequenceQueue1.contains((java.lang.Object) charSequenceStream20);
        java.lang.Class<?> wildcardClass22 = charSequenceStream20.getClass();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean9 = charSequenceQueue1.isEmpty();
        boolean boolean11 = charSequenceQueue1.remove((java.lang.Object) 10.0d);
        charSequenceQueue1.clear();
        boolean boolean13 = charSequenceQueue1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.lang.CharSequence charSequence12 = charSequenceQueue8.poll();
        boolean boolean13 = charSequenceQueue8.isAtFullCapacity();
        java.lang.String str14 = charSequenceQueue8.toString();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        boolean boolean7 = charSequenceQueue1.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence10 = charSequenceQueue1.get(10);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (10) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        boolean boolean10 = charSequenceQueue7.contains((java.lang.Object) 1.0d);
        boolean boolean11 = charSequenceQueue7.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue7.stream();
        boolean boolean13 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence14 = charSequenceQueue7.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.lang.CharSequence charSequence12 = charSequenceQueue8.poll();
        java.lang.CharSequence charSequence13 = charSequenceQueue8.poll();
        boolean boolean14 = charSequenceQueue8.isAtFullCapacity();
        charSequenceQueue8.clear();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12, charSequenceArray11);
        boolean boolean14 = charSequenceQueue12.isAtFullCapacity();
        boolean boolean15 = charSequenceList7.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        boolean boolean16 = charSequenceList2.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7);
        java.lang.Class<?> wildcardClass17 = charSequenceList2.getClass();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Object> objQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Object>(100);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray4 = charSequenceQueue1.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor5 = charSequenceQueue1.iterator();
        boolean boolean7 = charSequenceQueue1.offer((java.lang.CharSequence) "[]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence9 = charSequenceQueue1.get(3);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (3) is outside the available range [0, 2)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.stream();
        boolean boolean9 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = charSequenceQueue1.get(0);
        java.util.Collection[] collectionArray13 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.CharSequence>[] charSequenceCollectionArray14 = (java.util.Collection<java.lang.CharSequence>[]) collectionArray13;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.lang.CharSequence>[] charSequenceCollectionArray15 = charSequenceQueue1.toArray(charSequenceCollectionArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertNotNull(charSequenceStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(collectionArray13);
        org.junit.Assert.assertNotNull(charSequenceCollectionArray14);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.Type> typeQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.Type>();
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean11 = charSequenceQueue7.isFull();
        java.lang.CharSequence charSequence13 = charSequenceQueue7.get(0);
        java.lang.CharSequence charSequence14 = charSequenceQueue7.peek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = charSequenceList7.contains(obj9);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceList13.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue19);
        boolean boolean24 = charSequenceQueue1.add((java.lang.CharSequence) "");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence27 = charSequenceQueue25.get(4);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (4) is outside the available range [0, 2)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        boolean boolean7 = charSequenceQueue1.isFull();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue1.spliterator();
        java.lang.Class<?> wildcardClass9 = charSequenceSpliterator8.getClass();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.String str6 = charSequenceQueue1.toString();
        java.lang.CharSequence charSequence7 = charSequenceQueue1.remove();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "" + "'", charSequence7, "");
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.lang.CharSequence charSequence2 = charSequenceQueue1.peek();
        boolean boolean4 = charSequenceQueue1.offer((java.lang.CharSequence) "[, ]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence6 = charSequenceQueue1.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (52) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(charSequence2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = charSequenceQueue10.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream14 = charSequenceQueue10.parallelStream();
        boolean boolean16 = charSequenceQueue10.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator17 = charSequenceQueue10.spliterator();
        boolean boolean18 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10);
        java.lang.Class<?> wildcardClass19 = charSequenceQueue1.getClass();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
        org.junit.Assert.assertNotNull(charSequenceStream14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        java.lang.Object[] objArray29 = charSequenceQueue1.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence31 = charSequenceQueue1.get((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (32) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        java.lang.Object[] objArray29 = charSequenceQueue1.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator32 = charSequenceQueue31.spliterator();
        java.lang.CharSequence charSequence33 = charSequenceQueue31.peek();
        boolean boolean34 = charSequenceQueue31.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream35 = charSequenceQueue31.stream();
        boolean boolean36 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence37 = charSequenceQueue31.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(charSequenceSpliterator32);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charSequenceStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Comparable<java.lang.String>[][]> strComparableArrayQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Comparable<java.lang.String>[][]>(2);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        boolean boolean20 = charSequenceQueue7.isFull();
        boolean boolean21 = charSequenceQueue7.isFull();
        java.lang.CharSequence charSequence22 = charSequenceQueue7.poll();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection23 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = charSequenceQueue7.retainAll(charSequenceCollection23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.util.RandomAccess> randomAccessQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.RandomAccess>(52);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Object[]> objArrayQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Object[]>();
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        boolean boolean20 = charSequenceQueue7.isFull();
        boolean boolean21 = charSequenceQueue7.isFull();
        java.lang.CharSequence charSequence22 = charSequenceQueue7.poll();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence23 = charSequenceQueue7.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        boolean boolean5 = charSequenceQueue1.isAtFullCapacity();
        java.lang.Class<?> wildcardClass6 = charSequenceQueue1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean15 = charSequenceList8.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean16 = charSequenceList2.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence17 = charSequenceQueue14.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        boolean boolean20 = charSequenceQueue7.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean24 = charSequenceQueue22.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList27 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27, charSequenceArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = charSequenceList27.contains(obj29);
        java.lang.String str31 = charSequenceList27.toString();
        java.lang.CharSequence[] charSequenceArray33 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList34 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34, charSequenceArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = charSequenceList34.contains(obj36);
        java.lang.String str38 = charSequenceList34.toString();
        boolean boolean39 = charSequenceList27.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34);
        boolean boolean40 = charSequenceQueue22.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator41 = charSequenceQueue22.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator42 = charSequenceQueue22.spliterator();
        boolean boolean43 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        java.lang.Class<?> wildcardClass44 = charSequenceQueue22.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[hi!]" + "'", str31, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[hi!]" + "'", str38, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator41);
        org.junit.Assert.assertNotNull(charSequenceSpliterator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        boolean boolean7 = charSequenceQueue3.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue3.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        charSequenceQueue3.clear();
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence14 = charSequenceQueue1.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (52) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "", "", "[hi!]", "", "hi!" };
        java.lang.Comparable<java.lang.String>[] strComparableArray11 = charSequenceList2.toArray((java.lang.Comparable<java.lang.String>[]) strArray10);
        java.lang.Class<?> wildcardClass12 = strComparableArray11.getClass();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strComparableArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue4 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean6 = charSequenceQueue4.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray9 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10, charSequenceArray9);
        boolean boolean12 = charSequenceQueue10.isAtFullCapacity();
        boolean boolean13 = charSequenceQueue4.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator16 = charSequenceQueue15.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator17 = charSequenceQueue15.spliterator();
        boolean boolean19 = charSequenceQueue15.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = charSequenceQueue15.poll();
        boolean boolean21 = charSequenceQueue10.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue15);
        java.lang.CharSequence charSequence22 = charSequenceQueue10.remove();
        boolean boolean23 = charSequenceQueue10.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream26 = charSequenceQueue25.parallelStream();
        boolean boolean27 = charSequenceQueue10.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue25);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor28 = charSequenceQueue25.iterator();
        boolean boolean29 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue25);
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        java.lang.CharSequence[] charSequenceArray38 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList39 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39, charSequenceArray38);
        java.lang.Object obj41 = null;
        boolean boolean42 = charSequenceList39.contains(obj41);
        java.lang.String str43 = charSequenceList39.toString();
        boolean boolean44 = charSequenceList32.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream46 = charSequenceQueue45.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream47 = charSequenceQueue45.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue49 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator50 = charSequenceQueue49.spliterator();
        java.lang.CharSequence charSequence51 = charSequenceQueue49.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue53 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean55 = charSequenceQueue53.offer((java.lang.CharSequence) "");
        boolean boolean56 = charSequenceQueue49.contains((java.lang.Object) charSequenceQueue53);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor57 = charSequenceQueue49.iterator();
        boolean boolean58 = charSequenceQueue45.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue49);
        int int59 = charSequenceQueue49.size();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor60 = charSequenceQueue49.iterator();
        boolean boolean61 = charSequenceQueue25.remove((java.lang.Object) charSequenceItor60);
        java.lang.Class<?> wildcardClass62 = charSequenceQueue25.getClass();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charSequenceArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator16);
        org.junit.Assert.assertNotNull(charSequenceSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charSequenceStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charSequenceItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[hi!]" + "'", str43, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charSequenceStream46);
        org.junit.Assert.assertNotNull(charSequenceStream47);
        org.junit.Assert.assertNotNull(charSequenceSpliterator50);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charSequenceItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(charSequenceItor60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue7.iterator();
        boolean boolean16 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceQueue18.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24, charSequenceArray23);
        boolean boolean26 = charSequenceQueue24.isAtFullCapacity();
        boolean boolean27 = charSequenceQueue18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator30 = charSequenceQueue29.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator31 = charSequenceQueue29.spliterator();
        boolean boolean33 = charSequenceQueue29.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = charSequenceQueue29.poll();
        boolean boolean35 = charSequenceQueue24.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29);
        boolean boolean36 = charSequenceQueue7.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        java.lang.Class<?> wildcardClass37 = charSequenceQueue24.getClass();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator30);
        org.junit.Assert.assertNotNull(charSequenceSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor10 = charSequenceQueue8.iterator();
        boolean boolean11 = charSequenceQueue8.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence12 = charSequenceQueue8.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        java.lang.Object[] objArray29 = charSequenceQueue1.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator32 = charSequenceQueue31.spliterator();
        java.lang.CharSequence charSequence33 = charSequenceQueue31.peek();
        boolean boolean34 = charSequenceQueue31.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream35 = charSequenceQueue31.stream();
        boolean boolean36 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue31);
        java.lang.Object[] objArray37 = charSequenceQueue31.toArray();
        int int38 = charSequenceQueue31.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence39 = charSequenceQueue31.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(charSequenceSpliterator32);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charSequenceStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        boolean boolean14 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceQueue15.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream17 = charSequenceQueue15.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator20 = charSequenceQueue19.spliterator();
        java.lang.CharSequence charSequence21 = charSequenceQueue19.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean25 = charSequenceQueue23.offer((java.lang.CharSequence) "");
        boolean boolean26 = charSequenceQueue19.contains((java.lang.Object) charSequenceQueue23);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor27 = charSequenceQueue19.iterator();
        boolean boolean28 = charSequenceQueue15.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        int int29 = charSequenceQueue19.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence30 = charSequenceQueue19.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceStream16);
        org.junit.Assert.assertNotNull(charSequenceStream17);
        org.junit.Assert.assertNotNull(charSequenceSpliterator20);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charSequenceItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.lang.CharSequence charSequence12 = charSequenceQueue8.poll();
        boolean boolean13 = charSequenceQueue8.isAtFullCapacity();
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList16 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16, charSequenceArray15);
        java.lang.Object obj18 = null;
        boolean boolean19 = charSequenceList16.contains(obj18);
        java.lang.String str20 = charSequenceList16.toString();
        java.lang.CharSequence[] charSequenceArray22 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList23 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23, charSequenceArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = charSequenceList23.contains(obj25);
        java.lang.String str27 = charSequenceList23.toString();
        boolean boolean28 = charSequenceList16.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23);
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.CharSequence[] charSequenceArray36 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37, charSequenceArray36);
        boolean boolean39 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean40 = charSequenceList32.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37);
        boolean boolean41 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean42 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean43 = charSequenceList23.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37);
        boolean boolean44 = charSequenceQueue8.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23);
        java.lang.Class<?> wildcardClass45 = charSequenceQueue8.getClass();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!]" + "'", str20, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[hi!]" + "'", str27, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(charSequenceArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor14 = charSequenceQueue8.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean18 = charSequenceQueue16.offer((java.lang.CharSequence) "");
        charSequenceQueue16.clear();
        boolean boolean21 = charSequenceQueue16.remove((java.lang.Object) (-1.0d));
        boolean boolean22 = charSequenceQueue8.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence24 = charSequenceQueue8.get(5);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (5) is outside the available range [0, 2)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertNotNull(charSequenceItor14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.stream();
        boolean boolean9 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = charSequenceQueue1.get(0);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator15 = charSequenceQueue14.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator16 = charSequenceQueue14.spliterator();
        boolean boolean18 = charSequenceQueue14.add((java.lang.CharSequence) "");
        java.lang.String str19 = charSequenceQueue14.toString();
        java.lang.CharSequence charSequence20 = charSequenceQueue14.element();
        java.lang.CharSequence charSequence21 = charSequenceQueue14.remove();
        boolean boolean22 = charSequenceQueue12.remove((java.lang.Object) charSequence21);
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertNotNull(charSequenceStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(charSequenceSpliterator15);
        org.junit.Assert.assertNotNull(charSequenceSpliterator16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "" + "'", charSequence21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor4 = charSequenceQueue1.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        boolean boolean10 = charSequenceQueue6.add((java.lang.CharSequence) "hi!");
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream11 = charSequenceQueue6.stream();
        java.lang.CharSequence[] charSequenceArray13 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList14 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList14, charSequenceArray13);
        java.lang.Object obj16 = null;
        boolean boolean17 = charSequenceList14.contains(obj16);
        java.lang.String str18 = charSequenceList14.toString();
        java.lang.CharSequence[] charSequenceArray20 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList21 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList21, charSequenceArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = charSequenceList21.contains(obj23);
        java.lang.String str25 = charSequenceList21.toString();
        boolean boolean26 = charSequenceList14.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList21);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue28 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean30 = charSequenceQueue28.offer((java.lang.CharSequence) "");
        boolean boolean32 = charSequenceQueue28.add((java.lang.CharSequence) "hi!");
        int int33 = charSequenceQueue28.maxSize();
        boolean boolean34 = charSequenceList14.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue28);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue36 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean38 = charSequenceQueue36.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = charSequenceQueue36.peek();
        boolean boolean41 = charSequenceQueue36.add((java.lang.CharSequence) "");
        boolean boolean42 = charSequenceList14.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue36);
        boolean boolean43 = charSequenceQueue6.contains((java.lang.Object) charSequenceQueue36);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream44 = charSequenceQueue36.stream();
        java.lang.CharSequence[] charSequenceArray47 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList48 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48, charSequenceArray47);
        java.lang.CharSequence[] charSequenceArray52 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue53 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue53, charSequenceArray52);
        boolean boolean55 = charSequenceQueue53.isAtFullCapacity();
        boolean boolean56 = charSequenceList48.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue53);
        java.lang.CharSequence charSequence57 = charSequenceQueue53.poll();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream58 = charSequenceQueue53.parallelStream();
        java.lang.CharSequence[] charSequenceArray61 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue62 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue62, charSequenceArray61);
        boolean boolean64 = charSequenceQueue62.isAtFullCapacity();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream65 = charSequenceQueue62.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue67 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream68 = charSequenceQueue67.parallelStream();
        boolean boolean70 = charSequenceQueue67.contains((java.lang.Object) 1.0d);
        charSequenceQueue67.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream72 = charSequenceQueue67.stream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue74 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator75 = charSequenceQueue74.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator76 = charSequenceQueue74.spliterator();
        boolean boolean78 = charSequenceQueue74.add((java.lang.CharSequence) "");
        boolean boolean79 = charSequenceQueue74.isAtFullCapacity();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream80 = charSequenceQueue74.parallelStream();
        java.util.stream.BaseStream[] baseStreamArray82 = new java.util.stream.BaseStream[5];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>[] charSequenceBaseStreamArray83 = (java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>[]) baseStreamArray82;
        charSequenceBaseStreamArray83[0] = charSequenceStream44;
        charSequenceBaseStreamArray83[1] = charSequenceStream58;
        charSequenceBaseStreamArray83[2] = charSequenceStream65;
        charSequenceBaseStreamArray83[3] = charSequenceStream72;
        charSequenceBaseStreamArray83[4] = charSequenceStream80;
        java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>[] charSequenceBaseStreamArray94 = charSequenceQueue1.toArray(charSequenceBaseStreamArray83);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator95 = charSequenceQueue1.spliterator();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNotNull(charSequenceItor4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charSequenceStream11);
        org.junit.Assert.assertNotNull(charSequenceArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[hi!]" + "'", str18, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[hi!]" + "'", str25, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charSequenceStream44);
        org.junit.Assert.assertNotNull(charSequenceArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(charSequenceArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "" + "'", charSequence57, "");
        org.junit.Assert.assertNotNull(charSequenceStream58);
        org.junit.Assert.assertNotNull(charSequenceArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charSequenceStream65);
        org.junit.Assert.assertNotNull(charSequenceStream68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charSequenceStream72);
        org.junit.Assert.assertNotNull(charSequenceSpliterator75);
        org.junit.Assert.assertNotNull(charSequenceSpliterator76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(charSequenceStream80);
        org.junit.Assert.assertNotNull(baseStreamArray82);
        org.junit.Assert.assertNotNull(charSequenceBaseStreamArray83);
        org.junit.Assert.assertNotNull(charSequenceBaseStreamArray94);
        org.junit.Assert.assertNotNull(charSequenceSpliterator95);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        boolean boolean7 = charSequenceQueue3.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue3.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        charSequenceQueue3.clear();
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence13 = charSequenceQueue3.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        boolean boolean6 = charSequenceQueue1.isAtFullCapacity();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor7 = charSequenceQueue1.iterator();
        java.lang.Object[] objArray8 = charSequenceQueue1.toArray();
        java.lang.String str9 = charSequenceQueue1.toString();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSequenceItor7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        int int3 = charSequenceQueue1.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray8 = charSequenceQueue5.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor9 = charSequenceQueue5.iterator();
        boolean boolean10 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue5);
        java.lang.CharSequence charSequence11 = charSequenceQueue5.poll();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue13 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue13.spliterator();
        java.lang.CharSequence charSequence15 = charSequenceQueue13.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean19 = charSequenceQueue17.offer((java.lang.CharSequence) "");
        boolean boolean20 = charSequenceQueue13.contains((java.lang.Object) charSequenceQueue17);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean24 = charSequenceQueue22.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = charSequenceQueue22.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream26 = charSequenceQueue22.parallelStream();
        boolean boolean28 = charSequenceQueue22.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator29 = charSequenceQueue22.spliterator();
        boolean boolean30 = charSequenceQueue13.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        java.lang.CharSequence charSequence31 = charSequenceQueue22.element();
        boolean boolean32 = charSequenceQueue5.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "" + "'", charSequence25, "");
        org.junit.Assert.assertNotNull(charSequenceStream26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "" + "'", charSequence31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        boolean boolean19 = charSequenceQueue12.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence20 = charSequenceQueue12.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue10.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean17 = charSequenceQueue10.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        boolean boolean18 = charSequenceQueue10.isEmpty();
        java.lang.CharSequence charSequence19 = charSequenceQueue10.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean23 = charSequenceQueue21.offer((java.lang.CharSequence) "");
        boolean boolean25 = charSequenceQueue21.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean28 = charSequenceQueue21.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27);
        boolean boolean29 = charSequenceQueue21.isEmpty();
        boolean boolean30 = charSequenceQueue10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue21);
        boolean boolean31 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10);
        java.lang.Object obj32 = null;
        boolean boolean33 = charSequenceQueue1.contains(obj32);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.String str4 = charSequenceQueue1.toString();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor5 = charSequenceQueue1.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue8.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence11 = charSequenceQueue8.peek();
        boolean boolean12 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        charSequenceQueue8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence14 = charSequenceQueue8.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(charSequenceItor5);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray5 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList6 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList6, charSequenceArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = charSequenceList6.contains(obj8);
        java.lang.String str10 = charSequenceList6.toString();
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        boolean boolean18 = charSequenceList6.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13);
        boolean boolean19 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList6);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList22 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22, charSequenceArray21);
        java.lang.Object obj24 = null;
        boolean boolean25 = charSequenceList22.contains(obj24);
        java.lang.String str26 = charSequenceList22.toString();
        java.lang.CharSequence[] charSequenceArray28 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList29 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList29, charSequenceArray28);
        java.lang.Object obj31 = null;
        boolean boolean32 = charSequenceList29.contains(obj31);
        java.lang.String str33 = charSequenceList29.toString();
        boolean boolean34 = charSequenceList22.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList29);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue36 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean38 = charSequenceQueue36.offer((java.lang.CharSequence) "");
        boolean boolean40 = charSequenceQueue36.add((java.lang.CharSequence) "hi!");
        int int41 = charSequenceQueue36.maxSize();
        boolean boolean42 = charSequenceList22.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue36);
        boolean boolean43 = charSequenceList6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue36);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue44 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[hi!]" + "'", str10, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[hi!]" + "'", str26, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[hi!]" + "'", str33, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = charSequenceList7.contains(obj9);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceList13.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue19);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = charSequenceQueue24.peek();
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList30 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList30, charSequenceArray29);
        java.lang.Object obj32 = null;
        boolean boolean33 = charSequenceList30.contains(obj32);
        java.lang.CharSequence[] charSequenceArray35 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList36 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList36, charSequenceArray35);
        java.lang.Object obj38 = null;
        boolean boolean39 = charSequenceList36.contains(obj38);
        java.lang.String str40 = charSequenceList36.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue42 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean43 = charSequenceList36.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        boolean boolean44 = charSequenceList30.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        boolean boolean45 = charSequenceQueue24.remove((java.lang.Object) charSequenceQueue42);
        boolean boolean46 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator49 = charSequenceQueue48.spliterator();
        java.lang.CharSequence charSequence50 = charSequenceQueue48.peek();
        boolean boolean51 = charSequenceQueue48.isFull();
        boolean boolean52 = charSequenceQueue42.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator53 = charSequenceQueue48.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator54 = charSequenceQueue48.spliterator();
        java.lang.Class<?> wildcardClass55 = charSequenceQueue48.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[hi!]" + "'", str40, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator49);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator53);
        org.junit.Assert.assertNotNull(charSequenceSpliterator54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        int int6 = charSequenceQueue1.maxSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence8 = charSequenceQueue1.get((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (10) is outside the available range [0, 2)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue2 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue2, charSequenceArray1);
        int int4 = charSequenceQueue2.maxSize();
        boolean boolean5 = charSequenceQueue2.isFull();
        boolean boolean7 = charSequenceQueue2.add((java.lang.CharSequence) "[hi!]");
        boolean boolean8 = charSequenceQueue2.isFull();
        int int9 = charSequenceQueue2.maxSize();
        java.lang.CharSequence charSequence10 = charSequenceQueue2.peek();
        charSequenceQueue2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence12 = charSequenceQueue2.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>> charSequenceBaseStreamQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>>(5);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        boolean boolean20 = charSequenceQueue7.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream23 = charSequenceQueue22.parallelStream();
        boolean boolean24 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        java.lang.Class<?> wildcardClass25 = charSequenceQueue7.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charSequenceStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        boolean boolean20 = charSequenceQueue7.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream23 = charSequenceQueue22.parallelStream();
        boolean boolean24 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        int int25 = charSequenceQueue7.maxSize();
        java.lang.CharSequence charSequence26 = charSequenceQueue7.poll();
        int int27 = charSequenceQueue7.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean31 = charSequenceQueue29.offer((java.lang.CharSequence) "");
        int int32 = charSequenceQueue29.maxSize();
        int int33 = charSequenceQueue29.maxSize();
        boolean boolean34 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29);
        java.lang.Class<?> wildcardClass35 = charSequenceQueue29.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charSequenceStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "" + "'", charSequence26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.util.Spliterator<java.lang.CharSequence>> charSequenceSpliteratorQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.Spliterator<java.lang.CharSequence>>((int) (byte) 100);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        boolean boolean7 = charSequenceQueue1.isFull();
        charSequenceQueue1.clear();
        boolean boolean9 = charSequenceQueue1.isFull();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        boolean boolean7 = charSequenceQueue1.isFull();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence10 = charSequenceQueue1.get((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (32) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>(charSequenceCollection0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12, charSequenceArray11);
        boolean boolean14 = charSequenceQueue12.isAtFullCapacity();
        boolean boolean15 = charSequenceList7.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        boolean boolean16 = charSequenceList2.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7);
        java.lang.CharSequence[] charSequenceArray19 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList20 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList20, charSequenceArray19);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue25, charSequenceArray24);
        boolean boolean27 = charSequenceQueue25.isAtFullCapacity();
        boolean boolean28 = charSequenceList20.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue25);
        boolean boolean29 = charSequenceQueue25.isAtFullCapacity();
        int int30 = charSequenceQueue25.maxSize();
        boolean boolean31 = charSequenceList7.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue25);
        java.lang.CharSequence[] charSequenceArray33 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList34 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34, charSequenceArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = charSequenceList34.contains(obj36);
        java.lang.String str38 = charSequenceList34.toString();
        java.lang.CharSequence[] charSequenceArray40 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList41 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList41, charSequenceArray40);
        java.lang.Object obj43 = null;
        boolean boolean44 = charSequenceList41.contains(obj43);
        java.lang.String str45 = charSequenceList41.toString();
        boolean boolean46 = charSequenceList34.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList41);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue47 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList41);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream48 = charSequenceQueue47.stream();
        java.lang.CharSequence charSequence49 = charSequenceQueue47.poll();
        java.lang.Class<?> wildcardClass50 = charSequenceQueue47.getClass();
        boolean boolean51 = charSequenceQueue25.contains((java.lang.Object) charSequenceQueue47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence52 = charSequenceQueue47.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charSequenceArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[hi!]" + "'", str38, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[hi!]" + "'", str45, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charSequenceStream48);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        boolean boolean20 = charSequenceQueue7.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream23 = charSequenceQueue22.parallelStream();
        boolean boolean24 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        int int25 = charSequenceQueue7.maxSize();
        java.lang.CharSequence charSequence26 = charSequenceQueue7.poll();
        int int27 = charSequenceQueue7.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean31 = charSequenceQueue29.offer((java.lang.CharSequence) "");
        int int32 = charSequenceQueue29.maxSize();
        int int33 = charSequenceQueue29.maxSize();
        boolean boolean34 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29);
        charSequenceQueue29.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charSequenceStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "" + "'", charSequence26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray5 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList6 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList6, charSequenceArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = charSequenceList6.contains(obj8);
        java.lang.String str10 = charSequenceList6.toString();
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        boolean boolean18 = charSequenceList6.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13);
        boolean boolean19 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList6);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator20 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator21 = charSequenceQueue1.spliterator();
        java.lang.Class<?> wildcardClass22 = charSequenceSpliterator21.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[hi!]" + "'", str10, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator20);
        org.junit.Assert.assertNotNull(charSequenceSpliterator21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = charSequenceList7.contains(obj9);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceList13.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue19);
        boolean boolean24 = charSequenceQueue1.add((java.lang.CharSequence) "");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList28 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList28, charSequenceArray27);
        java.lang.Object obj30 = null;
        boolean boolean31 = charSequenceList28.contains(obj30);
        java.lang.CharSequence[] charSequenceArray33 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList34 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34, charSequenceArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = charSequenceList34.contains(obj36);
        java.lang.String str38 = charSequenceList34.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue40 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean41 = charSequenceList34.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40);
        boolean boolean42 = charSequenceList28.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue44 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean45 = charSequenceList28.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue44);
        java.lang.CharSequence[] charSequenceArray47 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList48 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48, charSequenceArray47);
        java.lang.Object obj50 = null;
        boolean boolean51 = charSequenceList48.contains(obj50);
        java.lang.CharSequence[] charSequenceArray53 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList54 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList54, charSequenceArray53);
        java.lang.Object obj56 = null;
        boolean boolean57 = charSequenceList54.contains(obj56);
        java.lang.String str58 = charSequenceList54.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue60 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean61 = charSequenceList54.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue60);
        boolean boolean62 = charSequenceList48.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue60);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue64 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean65 = charSequenceList48.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue64);
        boolean boolean66 = charSequenceQueue44.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue64);
        boolean boolean67 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue44);
        int int68 = charSequenceQueue44.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charSequenceArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[hi!]" + "'", str38, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charSequenceArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charSequenceArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[hi!]" + "'", str58, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Object> objQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Object>(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean15 = charSequenceList8.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean16 = charSequenceList2.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean19 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue18);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream22 = charSequenceQueue21.parallelStream();
        boolean boolean24 = charSequenceQueue21.contains((java.lang.Object) 1.0d);
        boolean boolean25 = charSequenceQueue21.isFull();
        int int26 = charSequenceQueue21.size();
        boolean boolean27 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue21);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream28 = charSequenceList2.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream29 = charSequenceList2.parallelStream();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charSequenceStream22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(charSequenceStream28);
        org.junit.Assert.assertNotNull(charSequenceStream29);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean9 = charSequenceQueue1.isEmpty();
        boolean boolean11 = charSequenceQueue1.remove((java.lang.Object) 10.0d);
        charSequenceQueue1.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        int int15 = charSequenceQueue14.maxSize();
        boolean boolean16 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence17 = charSequenceQueue14.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.lang.CharSequence charSequence2 = charSequenceQueue1.peek();
        boolean boolean4 = charSequenceQueue1.offer((java.lang.CharSequence) "[, ]");
        java.util.RandomAccess[] randomAccessArray5 = new java.util.RandomAccess[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.util.RandomAccess[] randomAccessArray6 = charSequenceQueue1.toArray(randomAccessArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(charSequence2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(randomAccessArray5);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.util.Collection<java.lang.CharSequence>> charSequenceCollectionQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.Collection<java.lang.CharSequence>>();
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        boolean boolean4 = charSequenceQueue1.isEmpty();
        java.lang.String str5 = charSequenceQueue1.toString();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean14 = charSequenceQueue12.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = charSequenceList17.contains(obj19);
        java.lang.String str21 = charSequenceList17.toString();
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList24 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList24, charSequenceArray23);
        java.lang.Object obj26 = null;
        boolean boolean27 = charSequenceList24.contains(obj26);
        java.lang.String str28 = charSequenceList24.toString();
        boolean boolean29 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList24);
        boolean boolean30 = charSequenceQueue12.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean31 = charSequenceQueue10.remove((java.lang.Object) charSequenceQueue12);
        boolean boolean32 = charSequenceQueue12.isEmpty();
        boolean boolean33 = charSequenceQueue12.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream34 = charSequenceQueue12.parallelStream();
        boolean boolean35 = charSequenceQueue7.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence37 = charSequenceQueue7.get((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[hi!]" + "'", str21, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[hi!]" + "'", str28, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.String str4 = charSequenceQueue1.toString();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor5 = charSequenceQueue1.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue8.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence11 = charSequenceQueue8.peek();
        boolean boolean12 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue13 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue13.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence16 = charSequenceQueue13.get((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(charSequenceItor5);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.io.Serializable> serializableQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.io.Serializable>(4);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue2 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue2, charSequenceArray1);
        int int4 = charSequenceQueue2.maxSize();
        boolean boolean5 = charSequenceQueue2.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence7 = charSequenceQueue2.get(32);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (32) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.Object[] objArray19 = charSequenceQueue12.toArray();
        java.lang.Class<?> wildcardClass20 = charSequenceQueue12.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        int int7 = charSequenceQueue1.maxSize();
        int int8 = charSequenceQueue1.maxSize();
        java.lang.CharSequence charSequence9 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = charSequenceQueue11.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream15 = charSequenceQueue11.parallelStream();
        boolean boolean17 = charSequenceQueue11.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator18 = charSequenceQueue11.spliterator();
        boolean boolean19 = charSequenceQueue11.isAtFullCapacity();
        boolean boolean21 = charSequenceQueue11.add((java.lang.CharSequence) "hi!");
        boolean boolean22 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        java.lang.Class<?> wildcardClass23 = charSequenceQueue11.getClass();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(charSequenceStream15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.CharSequence[] charSequenceArray13 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14, charSequenceArray13);
        boolean boolean16 = charSequenceQueue14.isAtFullCapacity();
        boolean boolean17 = charSequenceList9.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean18 = charSequenceQueue14.isAtFullCapacity();
        int int19 = charSequenceQueue14.maxSize();
        boolean boolean20 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean22 = charSequenceQueue1.offer((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = charSequenceQueue1.remove();
        java.lang.CharSequence charSequence24 = charSequenceQueue1.remove();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream25 = charSequenceQueue1.stream();
        java.lang.Class<?> wildcardClass26 = charSequenceQueue1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charSequenceArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "" + "'", charSequence23, "");
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "" + "'", charSequence24, "");
        org.junit.Assert.assertNotNull(charSequenceStream25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.lang.CharSequence charSequence5 = charSequenceQueue1.poll();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence7 = charSequenceQueue1.get(0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(charSequence5);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        boolean boolean6 = charSequenceQueue1.isAtFullCapacity();
        java.lang.CharSequence charSequence7 = charSequenceQueue1.element();
        int int8 = charSequenceQueue1.size();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream9 = charSequenceQueue1.stream();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator10 = charSequenceQueue1.spliterator();
        java.lang.Class<?> wildcardClass11 = charSequenceSpliterator10.getClass();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "" + "'", charSequence7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(charSequenceStream9);
        org.junit.Assert.assertNotNull(charSequenceSpliterator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        boolean boolean7 = charSequenceQueue1.contains((java.lang.Object) (short) 100);
        charSequenceQueue1.clear();
        java.lang.Object[] objArray9 = charSequenceQueue1.toArray();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        java.lang.Object[] objArray29 = charSequenceQueue1.toArray();
        java.lang.Object[] objArray30 = charSequenceQueue1.toArray();
        java.lang.CharSequence charSequence31 = charSequenceQueue1.element();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue33 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator34 = charSequenceQueue33.spliterator();
        java.lang.CharSequence charSequence35 = charSequenceQueue33.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean39 = charSequenceQueue37.offer((java.lang.CharSequence) "");
        boolean boolean40 = charSequenceQueue33.contains((java.lang.Object) charSequenceQueue37);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue42 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean44 = charSequenceQueue42.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = charSequenceQueue42.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream46 = charSequenceQueue42.parallelStream();
        boolean boolean48 = charSequenceQueue42.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator49 = charSequenceQueue42.spliterator();
        boolean boolean50 = charSequenceQueue33.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        java.lang.CharSequence charSequence51 = charSequenceQueue42.poll();
        java.lang.CharSequence[] charSequenceArray53 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue54 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54, charSequenceArray53);
        int int56 = charSequenceQueue54.maxSize();
        boolean boolean57 = charSequenceQueue54.isFull();
        java.lang.String str58 = charSequenceQueue54.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue60 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean62 = charSequenceQueue60.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray65 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue66 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue66, charSequenceArray65);
        boolean boolean68 = charSequenceQueue66.isAtFullCapacity();
        boolean boolean69 = charSequenceQueue60.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue66);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue71 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator72 = charSequenceQueue71.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator73 = charSequenceQueue71.spliterator();
        boolean boolean75 = charSequenceQueue71.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence76 = charSequenceQueue71.poll();
        boolean boolean77 = charSequenceQueue66.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue71);
        java.util.Queue[] queueArray79 = new java.util.Queue[2];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray80 = (java.util.Queue<java.lang.CharSequence>[]) queueArray79;
        charSequenceQueueArray80[0] = charSequenceQueue54;
        charSequenceQueueArray80[1] = charSequenceQueue71;
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray85 = charSequenceQueue42.toArray(charSequenceQueueArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<java.lang.CharSequence>[] charSequenceIterableArray86 = charSequenceQueue1.toArray((java.lang.Iterable<java.lang.CharSequence>[]) charSequenceQueueArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "" + "'", charSequence31, "");
        org.junit.Assert.assertNotNull(charSequenceSpliterator34);
        org.junit.Assert.assertNull(charSequence35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertNotNull(charSequenceStream46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "" + "'", charSequence51, "");
        org.junit.Assert.assertNotNull(charSequenceArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 32 + "'", int56 == 32);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(charSequenceArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator72);
        org.junit.Assert.assertNotNull(charSequenceSpliterator73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "" + "'", charSequence76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(queueArray79);
        org.junit.Assert.assertNotNull(charSequenceQueueArray80);
        org.junit.Assert.assertNotNull(charSequenceQueueArray85);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean15 = charSequenceList8.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean16 = charSequenceList2.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean19 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue18);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList22 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22, charSequenceArray21);
        java.lang.Object obj24 = null;
        boolean boolean25 = charSequenceList22.contains(obj24);
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList28 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList28, charSequenceArray27);
        java.lang.Object obj30 = null;
        boolean boolean31 = charSequenceList28.contains(obj30);
        java.lang.String str32 = charSequenceList28.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean35 = charSequenceList28.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        boolean boolean36 = charSequenceList22.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean39 = charSequenceList22.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        boolean boolean40 = charSequenceQueue18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor41 = charSequenceQueue18.iterator();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor42 = charSequenceQueue18.iterator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue43 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[hi!]" + "'", str32, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSequenceItor41);
        org.junit.Assert.assertNotNull(charSequenceItor42);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean9 = charSequenceQueue1.isAtFullCapacity();
        boolean boolean11 = charSequenceQueue1.offer((java.lang.CharSequence) "[, ]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence13 = charSequenceQueue1.get((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 3)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) ' ');
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9, charSequenceArray8);
        boolean boolean11 = charSequenceQueue9.isAtFullCapacity();
        boolean boolean12 = charSequenceQueue3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator15 = charSequenceQueue14.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator16 = charSequenceQueue14.spliterator();
        boolean boolean18 = charSequenceQueue14.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = charSequenceQueue14.poll();
        boolean boolean20 = charSequenceQueue9.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        java.lang.CharSequence charSequence21 = charSequenceQueue9.remove();
        boolean boolean22 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "[hi!]", "", "hi!" };
        java.lang.Comparable<java.lang.String>[] strComparableArray34 = charSequenceList25.toArray((java.lang.Comparable<java.lang.String>[]) strArray33);
        java.lang.String[] strArray35 = charSequenceQueue1.toArray(strArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence36 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator15);
        org.junit.Assert.assertNotNull(charSequenceSpliterator16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "" + "'", charSequence21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strComparableArray34);
        org.junit.Assert.assertNotNull(strArray35);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Comparable<java.lang.String>[]> strComparableArrayQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Comparable<java.lang.String>[]>();
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        charSequenceQueue8.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream11 = charSequenceQueue8.stream();
        java.lang.Class<?> wildcardClass12 = charSequenceQueue8.getClass();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        boolean boolean20 = charSequenceQueue7.isFull();
        java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>[] charSequenceBaseStreamArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>[] charSequenceBaseStreamArray22 = charSequenceQueue7.toArray(charSequenceBaseStreamArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean9 = charSequenceQueue1.isAtFullCapacity();
        boolean boolean11 = charSequenceQueue1.offer((java.lang.CharSequence) "[, ]");
        java.lang.CharSequence charSequence12 = charSequenceQueue1.peek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue8.offer((java.lang.CharSequence) "");
        java.lang.String str11 = charSequenceQueue8.toString();
        boolean boolean12 = charSequenceQueue1.remove((java.lang.Object) str11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream15 = charSequenceQueue14.parallelStream();
        boolean boolean17 = charSequenceQueue14.contains((java.lang.Object) 1.0d);
        charSequenceQueue14.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream19 = charSequenceQueue14.stream();
        java.lang.Class<?> wildcardClass20 = charSequenceQueue14.getClass();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean24 = charSequenceQueue22.offer((java.lang.CharSequence) "");
        boolean boolean26 = charSequenceQueue22.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue28 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean29 = charSequenceQueue22.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue28);
        java.lang.Class<?> wildcardClass30 = charSequenceQueue28.getClass();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue32 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator33 = charSequenceQueue32.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator34 = charSequenceQueue32.spliterator();
        boolean boolean36 = charSequenceQueue32.add((java.lang.CharSequence) "");
        boolean boolean37 = charSequenceQueue32.isAtFullCapacity();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue39 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator40 = charSequenceQueue39.spliterator();
        java.lang.CharSequence charSequence41 = charSequenceQueue39.peek();
        boolean boolean42 = charSequenceQueue32.contains((java.lang.Object) charSequence41);
        java.lang.Class<?> wildcardClass43 = charSequenceQueue32.getClass();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean47 = charSequenceQueue45.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = charSequenceQueue45.element();
        java.lang.Class<?> wildcardClass49 = charSequenceQueue45.getClass();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue51 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream52 = charSequenceQueue51.parallelStream();
        boolean boolean54 = charSequenceQueue51.contains((java.lang.Object) 1.0d);
        boolean boolean56 = charSequenceQueue51.offer((java.lang.CharSequence) "[hi!]");
        java.lang.Class<?> wildcardClass57 = charSequenceQueue51.getClass();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue59 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean61 = charSequenceQueue59.offer((java.lang.CharSequence) "");
        boolean boolean63 = charSequenceQueue59.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue65 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean66 = charSequenceQueue59.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue65);
        java.lang.Class<?> wildcardClass67 = charSequenceQueue65.getClass();
        java.lang.reflect.AnnotatedElement[] annotatedElementArray68 = new java.lang.reflect.AnnotatedElement[] { wildcardClass20, wildcardClass30, wildcardClass43, wildcardClass49, wildcardClass57, wildcardClass67 };
        java.lang.reflect.AnnotatedElement[] annotatedElementArray69 = charSequenceQueue1.toArray(annotatedElementArray68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence71 = charSequenceQueue1.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charSequenceStream15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charSequenceStream19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(charSequenceSpliterator33);
        org.junit.Assert.assertNotNull(charSequenceSpliterator34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator40);
        org.junit.Assert.assertNull(charSequence41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "" + "'", charSequence48, "");
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(charSequenceStream52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(annotatedElementArray68);
        org.junit.Assert.assertNotNull(annotatedElementArray69);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        boolean boolean7 = charSequenceQueue3.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue3.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        charSequenceQueue3.clear();
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue3);
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "", "[hi!]", "", "hi!" };
        java.lang.Comparable<java.lang.String>[] strComparableArray24 = charSequenceList15.toArray((java.lang.Comparable<java.lang.String>[]) strArray23);
        java.lang.Comparable<java.lang.String>[] strComparableArray25 = charSequenceQueue3.toArray((java.lang.Comparable<java.lang.String>[]) strArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence26 = charSequenceQueue3.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strComparableArray24);
        org.junit.Assert.assertNotNull(strComparableArray25);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue2 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue2, charSequenceArray1);
        int int4 = charSequenceQueue2.maxSize();
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[][] strArray6 = charSequenceQueue2.toArray(strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean9 = charSequenceQueue1.isEmpty();
        boolean boolean11 = charSequenceQueue1.remove((java.lang.Object) 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence13 = charSequenceQueue1.get((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (32) is outside the available range [0, 2)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        java.lang.CharSequence charSequence9 = charSequenceQueue1.poll();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator12 = charSequenceQueue11.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue11.spliterator();
        boolean boolean15 = charSequenceQueue11.add((java.lang.CharSequence) "");
        boolean boolean16 = charSequenceQueue11.isAtFullCapacity();
        int int17 = charSequenceQueue11.maxSize();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator18 = charSequenceQueue11.spliterator();
        boolean boolean19 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        int int20 = charSequenceQueue1.maxSize();
        int int21 = charSequenceQueue1.maxSize();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(charSequenceSpliterator12);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(charSequenceSpliterator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray10 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11, charSequenceArray10);
        boolean boolean13 = charSequenceQueue11.isAtFullCapacity();
        boolean boolean14 = charSequenceQueue5.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        boolean boolean15 = charSequenceList2.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue5);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean19 = charSequenceQueue17.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = charSequenceQueue17.element();
        java.lang.CharSequence[] charSequenceArray22 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList23 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23, charSequenceArray22);
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList28 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList28, charSequenceArray27);
        java.lang.CharSequence[] charSequenceArray32 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue33 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue33, charSequenceArray32);
        boolean boolean35 = charSequenceQueue33.isAtFullCapacity();
        boolean boolean36 = charSequenceList28.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue33);
        boolean boolean37 = charSequenceList23.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList28);
        boolean boolean38 = charSequenceQueue17.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList28);
        java.lang.CharSequence[] charSequenceArray40 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList41 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList41, charSequenceArray40);
        java.lang.Object obj43 = null;
        boolean boolean44 = charSequenceList41.contains(obj43);
        java.lang.String str45 = charSequenceList41.toString();
        java.lang.CharSequence[] charSequenceArray47 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList48 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48, charSequenceArray47);
        java.lang.Object obj50 = null;
        boolean boolean51 = charSequenceList48.contains(obj50);
        java.lang.String str52 = charSequenceList48.toString();
        boolean boolean53 = charSequenceList41.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue54 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList48);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream55 = charSequenceQueue54.stream();
        boolean boolean56 = charSequenceQueue17.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54);
        boolean boolean57 = charSequenceQueue5.remove((java.lang.Object) charSequenceQueue54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence59 = charSequenceQueue54.get((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (32) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(charSequenceArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertNotNull(charSequenceArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charSequenceArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charSequenceArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[hi!]" + "'", str45, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[hi!]" + "'", str52, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charSequenceStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        int int7 = charSequenceQueue1.maxSize();
        int int8 = charSequenceQueue1.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16, charSequenceArray15);
        boolean boolean18 = charSequenceQueue16.isAtFullCapacity();
        boolean boolean19 = charSequenceQueue10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream20 = charSequenceQueue10.stream();
        boolean boolean21 = charSequenceQueue1.contains((java.lang.Object) charSequenceStream20);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream24 = charSequenceQueue23.parallelStream();
        int int25 = charSequenceQueue23.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean29 = charSequenceQueue27.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray30 = charSequenceQueue27.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor31 = charSequenceQueue27.iterator();
        boolean boolean32 = charSequenceQueue23.remove((java.lang.Object) charSequenceQueue27);
        boolean boolean33 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        int int34 = charSequenceQueue1.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence35 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charSequenceStream24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = charSequenceQueue11.element();
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList22 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22, charSequenceArray21);
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27, charSequenceArray26);
        boolean boolean29 = charSequenceQueue27.isAtFullCapacity();
        boolean boolean30 = charSequenceList22.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27);
        boolean boolean31 = charSequenceList17.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        boolean boolean32 = charSequenceQueue11.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = charSequenceList42.contains(obj44);
        java.lang.String str46 = charSequenceList42.toString();
        boolean boolean47 = charSequenceList35.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream49 = charSequenceQueue48.stream();
        boolean boolean50 = charSequenceQueue11.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.lang.CharSequence charSequence51 = charSequenceQueue48.element();
        java.lang.CharSequence charSequence52 = charSequenceQueue48.peek();
        java.lang.String str53 = charSequenceQueue48.toString();
        boolean boolean54 = charSequenceList2.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.lang.Object[] objArray55 = charSequenceList2.toArray();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection56 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = charSequenceList2.containsAll(charSequenceCollection56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charSequenceStream49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[hi!]" + "'", str53, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[hi!, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[hi!, hi!]");
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        boolean boolean5 = charSequenceQueue1.isAtFullCapacity();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor6 = charSequenceQueue1.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) ' ');
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16, charSequenceArray15);
        boolean boolean18 = charSequenceQueue16.isAtFullCapacity();
        boolean boolean19 = charSequenceQueue10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator22 = charSequenceQueue21.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator23 = charSequenceQueue21.spliterator();
        boolean boolean25 = charSequenceQueue21.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence26 = charSequenceQueue21.poll();
        boolean boolean27 = charSequenceQueue16.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue21);
        java.lang.CharSequence charSequence28 = charSequenceQueue16.remove();
        boolean boolean29 = charSequenceQueue8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        boolean boolean30 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence31 = charSequenceQueue8.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceItor6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator22);
        org.junit.Assert.assertNotNull(charSequenceSpliterator23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "" + "'", charSequence26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.String str6 = charSequenceQueue1.toString();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.parallelStream();
        java.lang.CharSequence charSequence8 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = charSequenceQueue1.offer(charSequence8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Attempted to add null object to queue");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[, ]" + "'", str6, "[, ]");
        org.junit.Assert.assertNotNull(charSequenceStream7);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = charSequenceList7.contains(obj9);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceList13.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue19);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = charSequenceQueue24.peek();
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList30 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList30, charSequenceArray29);
        java.lang.Object obj32 = null;
        boolean boolean33 = charSequenceList30.contains(obj32);
        java.lang.CharSequence[] charSequenceArray35 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList36 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList36, charSequenceArray35);
        java.lang.Object obj38 = null;
        boolean boolean39 = charSequenceList36.contains(obj38);
        java.lang.String str40 = charSequenceList36.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue42 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean43 = charSequenceList36.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        boolean boolean44 = charSequenceList30.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        boolean boolean45 = charSequenceQueue24.remove((java.lang.Object) charSequenceQueue42);
        boolean boolean46 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator49 = charSequenceQueue48.spliterator();
        java.lang.CharSequence charSequence50 = charSequenceQueue48.peek();
        boolean boolean51 = charSequenceQueue48.isFull();
        boolean boolean52 = charSequenceQueue42.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator53 = charSequenceQueue48.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence55 = charSequenceQueue48.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (52) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[hi!]" + "'", str40, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator49);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator53);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue7.iterator();
        boolean boolean16 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence17 = charSequenceQueue7.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.lang.CharSequence charSequence41 = charSequenceQueue38.element();
        charSequenceQueue38.clear();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor43 = charSequenceQueue38.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertNotNull(charSequenceItor43);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.lang.CharSequence charSequence5 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean24 = charSequenceQueue22.offer((java.lang.CharSequence) "");
        boolean boolean26 = charSequenceQueue22.add((java.lang.CharSequence) "hi!");
        int int27 = charSequenceQueue22.maxSize();
        boolean boolean28 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean30 = charSequenceList8.remove((java.lang.Object) 0);
        boolean boolean31 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor32 = charSequenceQueue1.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence33 = charSequenceQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charSequenceItor32);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        charSequenceQueue1.clear();
        java.lang.CharSequence charSequence7 = charSequenceQueue1.peek();
        java.lang.CharSequence charSequence8 = charSequenceQueue1.poll();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16, charSequenceArray15);
        boolean boolean18 = charSequenceQueue16.isAtFullCapacity();
        boolean boolean19 = charSequenceQueue10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        int int20 = charSequenceQueue16.maxSize();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream21 = charSequenceQueue16.parallelStream();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator22 = charSequenceQueue16.spliterator();
        boolean boolean23 = charSequenceQueue1.remove((java.lang.Object) charSequenceSpliterator22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence24 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
        org.junit.Assert.assertNotNull(charSequenceStream21);
        org.junit.Assert.assertNotNull(charSequenceSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        boolean boolean5 = charSequenceQueue1.isAtFullCapacity();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor6 = charSequenceQueue1.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) ' ');
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16, charSequenceArray15);
        boolean boolean18 = charSequenceQueue16.isAtFullCapacity();
        boolean boolean19 = charSequenceQueue10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator22 = charSequenceQueue21.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator23 = charSequenceQueue21.spliterator();
        boolean boolean25 = charSequenceQueue21.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence26 = charSequenceQueue21.poll();
        boolean boolean27 = charSequenceQueue16.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue21);
        java.lang.CharSequence charSequence28 = charSequenceQueue16.remove();
        boolean boolean29 = charSequenceQueue8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        boolean boolean30 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue8);
        java.lang.CharSequence charSequence32 = charSequenceQueue1.get((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceItor6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator22);
        org.junit.Assert.assertNotNull(charSequenceSpliterator23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "" + "'", charSequence26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "" + "'", charSequence32, "");
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.lang.CharSequence charSequence5 = charSequenceQueue1.poll();
        boolean boolean6 = charSequenceQueue1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence8 = charSequenceQueue1.get(3);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (3) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        boolean boolean6 = charSequenceQueue1.remove((java.lang.Object) (-1.0d));
        java.lang.CharSequence[] charSequenceArray9 = new java.lang.CharSequence[] { "[hi!]", "[hi!]" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList10 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList10, charSequenceArray9);
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList10);
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean22 = charSequenceList15.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue21);
        charSequenceQueue21.clear();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator24 = charSequenceQueue21.spliterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue26 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean28 = charSequenceQueue26.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray29 = charSequenceQueue26.toArray();
        boolean boolean30 = charSequenceQueue21.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue26);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue32 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean34 = charSequenceQueue32.offer((java.lang.CharSequence) "");
        java.lang.String str35 = charSequenceQueue32.toString();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor36 = charSequenceQueue32.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream37 = charSequenceQueue32.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue39 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean41 = charSequenceQueue39.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = charSequenceQueue39.peek();
        boolean boolean43 = charSequenceQueue32.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue39);
        boolean boolean44 = charSequenceQueue21.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue39);
        boolean boolean45 = charSequenceList10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue39);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream46 = charSequenceQueue39.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence48 = charSequenceQueue39.get(10);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (10) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSequenceArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(charSequenceItor36);
        org.junit.Assert.assertNotNull(charSequenceStream37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "" + "'", charSequence42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charSequenceStream46);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue2 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue2, charSequenceArray1);
        int int4 = charSequenceQueue2.maxSize();
        boolean boolean5 = charSequenceQueue2.isFull();
        boolean boolean7 = charSequenceQueue2.add((java.lang.CharSequence) "[hi!]");
        boolean boolean8 = charSequenceQueue2.isFull();
        java.lang.CharSequence charSequence9 = charSequenceQueue2.remove();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        int int9 = charSequenceQueue7.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray14 = charSequenceQueue11.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue11.iterator();
        boolean boolean16 = charSequenceQueue7.remove((java.lang.Object) charSequenceQueue11);
        java.lang.CharSequence charSequence17 = charSequenceQueue11.poll();
        boolean boolean18 = charSequenceList2.contains((java.lang.Object) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean22 = charSequenceQueue20.offer((java.lang.CharSequence) "");
        charSequenceQueue20.clear();
        java.lang.CharSequence charSequence24 = charSequenceQueue20.poll();
        boolean boolean25 = charSequenceQueue11.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence27 = charSequenceQueue11.get(0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        java.lang.Object[] objArray29 = charSequenceQueue1.toArray();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream30 = charSequenceQueue1.parallelStream();
        charSequenceQueue1.clear();
        boolean boolean33 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator34 = charSequenceQueue1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence36 = charSequenceQueue1.get(2);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (2) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(charSequenceStream30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator34);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.lang.CharSequence charSequence5 = charSequenceQueue1.peek();
        boolean boolean6 = charSequenceQueue1.isAtFullCapacity();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence7 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.util.RandomAccess> randomAccessQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.RandomAccess>((int) (short) 10);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor9 = charSequenceQueue1.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream10 = charSequenceQueue1.stream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.lang.CharSequence charSequence14 = charSequenceQueue12.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean18 = charSequenceQueue16.offer((java.lang.CharSequence) "");
        boolean boolean19 = charSequenceQueue12.contains((java.lang.Object) charSequenceQueue16);
        boolean boolean20 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        boolean boolean21 = charSequenceQueue1.isFull();
        java.lang.CharSequence charSequence22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = charSequenceQueue1.add(charSequence22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Attempted to add null object to queue");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charSequenceItor9);
        org.junit.Assert.assertNotNull(charSequenceStream10);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        boolean boolean6 = charSequenceQueue1.remove((java.lang.Object) (-1.0d));
        java.lang.CharSequence[] charSequenceArray9 = new java.lang.CharSequence[] { "[hi!]", "[hi!]" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList10 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList10, charSequenceArray9);
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList10);
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean22 = charSequenceList15.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue21);
        charSequenceQueue21.clear();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator24 = charSequenceQueue21.spliterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue26 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean28 = charSequenceQueue26.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray29 = charSequenceQueue26.toArray();
        boolean boolean30 = charSequenceQueue21.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue26);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue32 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean34 = charSequenceQueue32.offer((java.lang.CharSequence) "");
        java.lang.String str35 = charSequenceQueue32.toString();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor36 = charSequenceQueue32.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream37 = charSequenceQueue32.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue39 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean41 = charSequenceQueue39.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = charSequenceQueue39.peek();
        boolean boolean43 = charSequenceQueue32.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue39);
        boolean boolean44 = charSequenceQueue21.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue39);
        boolean boolean45 = charSequenceList10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue39);
        java.lang.Class<?> wildcardClass46 = charSequenceList10.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSequenceArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(charSequenceItor36);
        org.junit.Assert.assertNotNull(charSequenceStream37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "" + "'", charSequence42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        charSequenceQueue30.clear();
        boolean boolean35 = charSequenceQueue30.remove((java.lang.Object) (-1.0d));
        java.lang.CharSequence[] charSequenceArray38 = new java.lang.CharSequence[] { "[hi!]", "[hi!]" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList39 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39, charSequenceArray38);
        boolean boolean41 = charSequenceQueue30.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        boolean boolean42 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        java.lang.String str43 = charSequenceList39.toString();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator44 = charSequenceList39.spliterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue46 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean50 = charSequenceQueue48.offer((java.lang.CharSequence) "");
        boolean boolean52 = charSequenceQueue48.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue54 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean55 = charSequenceQueue48.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54);
        charSequenceQueue48.clear();
        boolean boolean57 = charSequenceQueue46.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator58 = charSequenceQueue46.spliterator();
        boolean boolean59 = charSequenceList39.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue46);
        int int60 = charSequenceQueue46.maxSize();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charSequenceArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[[hi!], [hi!]]" + "'", str43, "[[hi!], [hi!]]");
        org.junit.Assert.assertNotNull(charSequenceSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.lang.CharSequence charSequence12 = charSequenceQueue8.poll();
        java.lang.CharSequence charSequence13 = charSequenceQueue8.poll();
        boolean boolean14 = charSequenceQueue8.isAtFullCapacity();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence15 = charSequenceQueue8.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30, charSequenceArray29);
        boolean boolean32 = charSequenceQueue30.isAtFullCapacity();
        boolean boolean33 = charSequenceQueue24.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator36 = charSequenceQueue35.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue35.spliterator();
        boolean boolean39 = charSequenceQueue35.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = charSequenceQueue35.poll();
        boolean boolean41 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList45 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList45, charSequenceArray44);
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50, charSequenceArray49);
        boolean boolean52 = charSequenceQueue50.isAtFullCapacity();
        boolean boolean53 = charSequenceList45.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean54 = charSequenceQueue50.isAtFullCapacity();
        int int55 = charSequenceQueue50.maxSize();
        boolean boolean56 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean57 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean59 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        int int60 = charSequenceQueue1.maxSize();
        java.lang.CharSequence charSequence61 = charSequenceQueue1.element();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator36);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "hi!" + "'", charSequence61, "hi!");
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence8 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertNotNull(charSequenceStream7);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.lang.CharSequence charSequence41 = charSequenceQueue38.element();
        java.lang.CharSequence charSequence42 = charSequenceQueue38.peek();
        boolean boolean43 = charSequenceQueue38.isFull();
        charSequenceQueue38.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence46 = charSequenceQueue38.get(0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.AnnotatedElement[]>((int) (byte) 10);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator12 = charSequenceQueue11.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue11.spliterator();
        boolean boolean15 = charSequenceQueue11.add((java.lang.CharSequence) "");
        boolean boolean16 = charSequenceQueue11.isAtFullCapacity();
        java.lang.CharSequence charSequence17 = charSequenceQueue11.element();
        int int18 = charSequenceQueue11.size();
        boolean boolean19 = charSequenceList2.remove((java.lang.Object) charSequenceQueue11);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor20 = charSequenceQueue11.iterator();
        boolean boolean22 = charSequenceQueue11.add((java.lang.CharSequence) "hi!");
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator12);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceItor20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        int int9 = charSequenceQueue7.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray14 = charSequenceQueue11.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue11.iterator();
        boolean boolean16 = charSequenceQueue7.remove((java.lang.Object) charSequenceQueue11);
        java.lang.CharSequence charSequence17 = charSequenceQueue11.poll();
        boolean boolean18 = charSequenceList2.contains((java.lang.Object) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean22 = charSequenceQueue20.offer((java.lang.CharSequence) "");
        charSequenceQueue20.clear();
        java.lang.CharSequence charSequence24 = charSequenceQueue20.poll();
        boolean boolean25 = charSequenceQueue11.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean29 = charSequenceQueue27.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        java.lang.CharSequence[] charSequenceArray38 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList39 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39, charSequenceArray38);
        java.lang.Object obj41 = null;
        boolean boolean42 = charSequenceList39.contains(obj41);
        java.lang.String str43 = charSequenceList39.toString();
        boolean boolean44 = charSequenceList32.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        boolean boolean45 = charSequenceQueue27.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.lang.CharSequence[] charSequenceArray47 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList48 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48, charSequenceArray47);
        java.lang.Object obj50 = null;
        boolean boolean51 = charSequenceList48.contains(obj50);
        java.lang.String str52 = charSequenceList48.toString();
        java.lang.CharSequence[] charSequenceArray54 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList55 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList55, charSequenceArray54);
        java.lang.Object obj57 = null;
        boolean boolean58 = charSequenceList55.contains(obj57);
        java.lang.String str59 = charSequenceList55.toString();
        boolean boolean60 = charSequenceList48.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList55);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue62 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean64 = charSequenceQueue62.offer((java.lang.CharSequence) "");
        boolean boolean66 = charSequenceQueue62.add((java.lang.CharSequence) "hi!");
        int int67 = charSequenceQueue62.maxSize();
        boolean boolean68 = charSequenceList48.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue62);
        boolean boolean69 = charSequenceList32.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue62);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue71 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue73 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean75 = charSequenceQueue73.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray77 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList78 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList78, charSequenceArray77);
        java.lang.Object obj80 = null;
        boolean boolean81 = charSequenceList78.contains(obj80);
        java.lang.String str82 = charSequenceList78.toString();
        java.lang.CharSequence[] charSequenceArray84 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList85 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList85, charSequenceArray84);
        java.lang.Object obj87 = null;
        boolean boolean88 = charSequenceList85.contains(obj87);
        java.lang.String str89 = charSequenceList85.toString();
        boolean boolean90 = charSequenceList78.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList85);
        boolean boolean91 = charSequenceQueue73.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList78);
        boolean boolean92 = charSequenceQueue71.remove((java.lang.Object) charSequenceQueue73);
        boolean boolean93 = charSequenceList32.remove((java.lang.Object) charSequenceQueue71);
        boolean boolean94 = charSequenceQueue71.isAtFullCapacity();
        boolean boolean95 = charSequenceQueue20.contains((java.lang.Object) boolean94);
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[hi!]" + "'", str43, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charSequenceArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[hi!]" + "'", str52, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[hi!]" + "'", str59, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(charSequenceArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[hi!]" + "'", str82, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[hi!]" + "'", str89, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue10.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean17 = charSequenceQueue10.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        boolean boolean18 = charSequenceQueue10.isEmpty();
        java.lang.CharSequence charSequence19 = charSequenceQueue10.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean23 = charSequenceQueue21.offer((java.lang.CharSequence) "");
        boolean boolean25 = charSequenceQueue21.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean28 = charSequenceQueue21.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27);
        boolean boolean29 = charSequenceQueue21.isEmpty();
        boolean boolean30 = charSequenceQueue10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue21);
        boolean boolean31 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10);
        boolean boolean32 = charSequenceQueue1.isFull();
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean42 = charSequenceList35.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue44 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean46 = charSequenceQueue44.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence47 = charSequenceQueue44.element();
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList50 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList50, charSequenceArray49);
        java.lang.CharSequence[] charSequenceArray54 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList55 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList55, charSequenceArray54);
        java.lang.CharSequence[] charSequenceArray59 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue60 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue60, charSequenceArray59);
        boolean boolean62 = charSequenceQueue60.isAtFullCapacity();
        boolean boolean63 = charSequenceList55.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue60);
        boolean boolean64 = charSequenceList50.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList55);
        boolean boolean65 = charSequenceQueue44.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList55);
        java.lang.CharSequence[] charSequenceArray67 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList68 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList68, charSequenceArray67);
        java.lang.Object obj70 = null;
        boolean boolean71 = charSequenceList68.contains(obj70);
        java.lang.String str72 = charSequenceList68.toString();
        java.lang.CharSequence[] charSequenceArray74 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList75 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList75, charSequenceArray74);
        java.lang.Object obj77 = null;
        boolean boolean78 = charSequenceList75.contains(obj77);
        java.lang.String str79 = charSequenceList75.toString();
        boolean boolean80 = charSequenceList68.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList75);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue81 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList75);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream82 = charSequenceQueue81.stream();
        boolean boolean83 = charSequenceQueue44.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue81);
        java.lang.CharSequence charSequence84 = charSequenceQueue81.element();
        java.lang.CharSequence charSequence85 = charSequenceQueue81.peek();
        java.lang.String str86 = charSequenceQueue81.toString();
        boolean boolean87 = charSequenceList35.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue81);
        boolean boolean88 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue81);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor89 = charSequenceQueue81.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "" + "'", charSequence47, "");
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(charSequenceArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(charSequenceArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(charSequenceArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[hi!]" + "'", str72, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[hi!]" + "'", str79, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(charSequenceStream82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + charSequence84 + "' != '" + "hi!" + "'", charSequence84, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "hi!" + "'", charSequence85, "hi!");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[hi!]" + "'", str86, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(charSequenceItor89);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        int int7 = charSequenceQueue1.maxSize();
        int int8 = charSequenceQueue1.maxSize();
        java.lang.CharSequence charSequence9 = charSequenceQueue1.peek();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence10 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNull(charSequence9);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        boolean boolean10 = charSequenceQueue7.contains((java.lang.Object) 1.0d);
        boolean boolean11 = charSequenceQueue7.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue7.stream();
        boolean boolean13 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean14 = charSequenceQueue7.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence15 = charSequenceQueue7.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Comparable<java.lang.String>[]> strComparableArrayQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Comparable<java.lang.String>[]>(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.lang.CharSequence charSequence14 = charSequenceQueue12.peek();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue12.iterator();
        boolean boolean16 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence18 = charSequenceQueue12.get(0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        boolean boolean15 = charSequenceQueue8.contains((java.lang.Object) false);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean19 = charSequenceQueue17.offer((java.lang.CharSequence) "");
        boolean boolean21 = charSequenceQueue17.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean24 = charSequenceQueue17.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        boolean boolean25 = charSequenceQueue8.remove((java.lang.Object) charSequenceQueue23);
        java.lang.CharSequence charSequence26 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = charSequenceQueue8.offer(charSequence26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Attempted to add null object to queue");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        int int7 = charSequenceQueue1.maxSize();
        boolean boolean8 = charSequenceQueue1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence9 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor11 = charSequenceQueue1.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceItor11);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.util.ArrayList<java.lang.CharSequence>> charSequenceListQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.ArrayList<java.lang.CharSequence>>();
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = charSequenceQueue11.element();
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList22 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22, charSequenceArray21);
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27, charSequenceArray26);
        boolean boolean29 = charSequenceQueue27.isAtFullCapacity();
        boolean boolean30 = charSequenceList22.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27);
        boolean boolean31 = charSequenceList17.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        boolean boolean32 = charSequenceQueue11.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = charSequenceList42.contains(obj44);
        java.lang.String str46 = charSequenceList42.toString();
        boolean boolean47 = charSequenceList35.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream49 = charSequenceQueue48.stream();
        boolean boolean50 = charSequenceQueue11.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.lang.CharSequence charSequence51 = charSequenceQueue48.element();
        java.lang.CharSequence charSequence52 = charSequenceQueue48.peek();
        java.lang.String str53 = charSequenceQueue48.toString();
        boolean boolean54 = charSequenceList2.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.lang.Object[] objArray55 = charSequenceList2.toArray();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream56 = charSequenceList2.stream();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charSequenceStream49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[hi!]" + "'", str53, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[hi!, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[hi!, hi!]");
        org.junit.Assert.assertNotNull(charSequenceStream56);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Cloneable> cloneableQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Cloneable>((int) (short) 100);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        boolean boolean10 = charSequenceQueue7.contains((java.lang.Object) 1.0d);
        boolean boolean11 = charSequenceQueue7.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue7.stream();
        boolean boolean13 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean14 = charSequenceQueue1.isEmpty();
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = charSequenceList17.contains(obj19);
        java.lang.String str21 = charSequenceList17.toString();
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList24 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList24, charSequenceArray23);
        java.lang.Object obj26 = null;
        boolean boolean27 = charSequenceList24.contains(obj26);
        java.lang.String str28 = charSequenceList24.toString();
        boolean boolean29 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList24);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList24);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream31 = charSequenceQueue30.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream32 = charSequenceQueue30.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator35 = charSequenceQueue34.spliterator();
        java.lang.CharSequence charSequence36 = charSequenceQueue34.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean40 = charSequenceQueue38.offer((java.lang.CharSequence) "");
        boolean boolean41 = charSequenceQueue34.contains((java.lang.Object) charSequenceQueue38);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor42 = charSequenceQueue34.iterator();
        boolean boolean43 = charSequenceQueue30.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        boolean boolean44 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue46 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean48 = charSequenceQueue46.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = charSequenceQueue46.element();
        java.lang.CharSequence[] charSequenceArray51 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList52 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList52, charSequenceArray51);
        java.lang.CharSequence[] charSequenceArray56 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList57 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList57, charSequenceArray56);
        java.lang.CharSequence[] charSequenceArray61 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue62 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue62, charSequenceArray61);
        boolean boolean64 = charSequenceQueue62.isAtFullCapacity();
        boolean boolean65 = charSequenceList57.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue62);
        boolean boolean66 = charSequenceList52.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList57);
        boolean boolean67 = charSequenceQueue46.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList57);
        java.lang.CharSequence[] charSequenceArray69 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList70 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList70, charSequenceArray69);
        java.lang.Object obj72 = null;
        boolean boolean73 = charSequenceList70.contains(obj72);
        java.lang.String str74 = charSequenceList70.toString();
        java.lang.CharSequence[] charSequenceArray76 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList77 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList77, charSequenceArray76);
        java.lang.Object obj79 = null;
        boolean boolean80 = charSequenceList77.contains(obj79);
        java.lang.String str81 = charSequenceList77.toString();
        boolean boolean82 = charSequenceList70.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList77);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue83 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList77);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream84 = charSequenceQueue83.stream();
        boolean boolean85 = charSequenceQueue46.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue83);
        java.lang.String str86 = charSequenceQueue83.toString();
        int int87 = charSequenceQueue83.maxSize();
        boolean boolean88 = charSequenceQueue34.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue83);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue90 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator91 = charSequenceQueue90.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator92 = charSequenceQueue90.spliterator();
        boolean boolean94 = charSequenceQueue90.add((java.lang.CharSequence) "");
        boolean boolean95 = charSequenceQueue90.isAtFullCapacity();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor96 = charSequenceQueue90.iterator();
        boolean boolean97 = charSequenceQueue34.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue90);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor98 = charSequenceQueue34.iterator();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[hi!]" + "'", str21, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[hi!]" + "'", str28, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charSequenceStream31);
        org.junit.Assert.assertNotNull(charSequenceStream32);
        org.junit.Assert.assertNotNull(charSequenceSpliterator35);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "" + "'", charSequence49, "");
        org.junit.Assert.assertNotNull(charSequenceArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(charSequenceArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charSequenceArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(charSequenceArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[hi!]" + "'", str74, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[hi!]" + "'", str81, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(charSequenceStream84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[hi!]" + "'", str86, "[hi!]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator91);
        org.junit.Assert.assertNotNull(charSequenceSpliterator92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(charSequenceItor96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(charSequenceItor98);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence30 = charSequenceQueue1.get((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (1) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.lang.CharSequence charSequence41 = charSequenceQueue38.element();
        java.lang.CharSequence charSequence42 = charSequenceQueue38.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream43 = charSequenceQueue38.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence45 = charSequenceQueue38.get((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertNotNull(charSequenceStream43);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue4 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean6 = charSequenceQueue4.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray9 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10, charSequenceArray9);
        boolean boolean12 = charSequenceQueue10.isAtFullCapacity();
        boolean boolean13 = charSequenceQueue4.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator16 = charSequenceQueue15.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator17 = charSequenceQueue15.spliterator();
        boolean boolean19 = charSequenceQueue15.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence20 = charSequenceQueue15.poll();
        boolean boolean21 = charSequenceQueue10.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue15);
        java.lang.CharSequence charSequence22 = charSequenceQueue10.remove();
        boolean boolean23 = charSequenceQueue10.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream26 = charSequenceQueue25.parallelStream();
        boolean boolean27 = charSequenceQueue10.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue25);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor28 = charSequenceQueue25.iterator();
        boolean boolean29 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue25);
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        java.lang.CharSequence[] charSequenceArray38 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList39 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39, charSequenceArray38);
        java.lang.Object obj41 = null;
        boolean boolean42 = charSequenceList39.contains(obj41);
        java.lang.String str43 = charSequenceList39.toString();
        boolean boolean44 = charSequenceList32.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream46 = charSequenceQueue45.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream47 = charSequenceQueue45.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue49 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator50 = charSequenceQueue49.spliterator();
        java.lang.CharSequence charSequence51 = charSequenceQueue49.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue53 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean55 = charSequenceQueue53.offer((java.lang.CharSequence) "");
        boolean boolean56 = charSequenceQueue49.contains((java.lang.Object) charSequenceQueue53);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor57 = charSequenceQueue49.iterator();
        boolean boolean58 = charSequenceQueue45.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue49);
        int int59 = charSequenceQueue49.size();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor60 = charSequenceQueue49.iterator();
        boolean boolean61 = charSequenceQueue25.remove((java.lang.Object) charSequenceItor60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence62 = charSequenceQueue25.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charSequenceArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator16);
        org.junit.Assert.assertNotNull(charSequenceSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charSequenceStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charSequenceItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[hi!]" + "'", str43, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charSequenceStream46);
        org.junit.Assert.assertNotNull(charSequenceStream47);
        org.junit.Assert.assertNotNull(charSequenceSpliterator50);
        org.junit.Assert.assertNull(charSequence51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charSequenceItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(charSequenceItor60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        boolean boolean4 = charSequenceQueue1.isEmpty();
        int int5 = charSequenceQueue1.maxSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence6 = charSequenceQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.GenericDeclaration> genericDeclarationQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.GenericDeclaration>();
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor4 = charSequenceQueue1.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray10 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList11 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList11, charSequenceArray10);
        java.lang.Object obj13 = null;
        boolean boolean14 = charSequenceList11.contains(obj13);
        java.lang.String str15 = charSequenceList11.toString();
        java.lang.CharSequence[] charSequenceArray17 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList18 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18, charSequenceArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = charSequenceList18.contains(obj20);
        java.lang.String str22 = charSequenceList18.toString();
        boolean boolean23 = charSequenceList11.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18);
        boolean boolean24 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList11);
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList27 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27, charSequenceArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = charSequenceList27.contains(obj29);
        java.lang.String str31 = charSequenceList27.toString();
        java.lang.CharSequence[] charSequenceArray33 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList34 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34, charSequenceArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = charSequenceList34.contains(obj36);
        java.lang.String str38 = charSequenceList34.toString();
        boolean boolean39 = charSequenceList27.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean43 = charSequenceQueue41.offer((java.lang.CharSequence) "");
        boolean boolean45 = charSequenceQueue41.add((java.lang.CharSequence) "hi!");
        int int46 = charSequenceQueue41.maxSize();
        boolean boolean47 = charSequenceList27.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        boolean boolean48 = charSequenceList11.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        boolean boolean50 = charSequenceQueue41.remove((java.lang.Object) 100);
        boolean boolean51 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream52 = charSequenceQueue1.stream();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNotNull(charSequenceItor4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[hi!]" + "'", str15, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[hi!]" + "'", str22, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[hi!]" + "'", str31, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[hi!]" + "'", str38, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charSequenceStream52);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>(100);
        java.lang.Class<?> wildcardClass2 = charSequenceQueue1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor9 = charSequenceQueue1.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream10 = charSequenceQueue1.stream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.lang.CharSequence charSequence14 = charSequenceQueue12.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean18 = charSequenceQueue16.offer((java.lang.CharSequence) "");
        boolean boolean19 = charSequenceQueue12.contains((java.lang.Object) charSequenceQueue16);
        boolean boolean20 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence21 = charSequenceQueue12.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charSequenceItor9);
        org.junit.Assert.assertNotNull(charSequenceStream10);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        boolean boolean15 = charSequenceQueue8.contains((java.lang.Object) false);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator16 = charSequenceQueue8.spliterator();
        java.util.List[] listArray18 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.CharSequence>[] charSequenceListArray19 = (java.util.List<java.lang.CharSequence>[]) listArray18;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.CharSequence>[] charSequenceListArray20 = charSequenceQueue8.toArray((java.util.List<java.lang.CharSequence>[]) listArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator16);
        org.junit.Assert.assertNotNull(listArray18);
        org.junit.Assert.assertNotNull(charSequenceListArray19);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        boolean boolean8 = charSequenceQueue1.add((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = charSequenceQueue11.element();
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList22 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22, charSequenceArray21);
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27, charSequenceArray26);
        boolean boolean29 = charSequenceQueue27.isAtFullCapacity();
        boolean boolean30 = charSequenceList22.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27);
        boolean boolean31 = charSequenceList17.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        boolean boolean32 = charSequenceQueue11.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        boolean boolean33 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence34 = charSequenceQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = charSequenceQueue11.element();
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList22 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22, charSequenceArray21);
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27, charSequenceArray26);
        boolean boolean29 = charSequenceQueue27.isAtFullCapacity();
        boolean boolean30 = charSequenceList22.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27);
        boolean boolean31 = charSequenceList17.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        boolean boolean32 = charSequenceQueue11.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = charSequenceList42.contains(obj44);
        java.lang.String str46 = charSequenceList42.toString();
        boolean boolean47 = charSequenceList35.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream49 = charSequenceQueue48.stream();
        boolean boolean50 = charSequenceQueue11.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.lang.CharSequence charSequence51 = charSequenceQueue48.element();
        java.lang.CharSequence charSequence52 = charSequenceQueue48.peek();
        java.lang.String str53 = charSequenceQueue48.toString();
        boolean boolean54 = charSequenceList2.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.lang.String str55 = charSequenceList2.toString();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charSequenceStream49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[hi!]" + "'", str53, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[hi!, hi!]" + "'", str55, "[hi!, hi!]");
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        java.lang.Object[] objArray29 = charSequenceQueue1.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator32 = charSequenceQueue31.spliterator();
        java.lang.CharSequence charSequence33 = charSequenceQueue31.peek();
        boolean boolean34 = charSequenceQueue31.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream35 = charSequenceQueue31.stream();
        boolean boolean36 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue31);
        java.lang.Object[] objArray37 = charSequenceQueue31.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence38 = charSequenceQueue31.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(charSequenceSpliterator32);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charSequenceStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence1 = charSequenceQueue0.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.AnnotatedElement[]>(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator5 = charSequenceQueue1.spliterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceQueue7.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue13 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue13, charSequenceArray12);
        boolean boolean15 = charSequenceQueue13.isAtFullCapacity();
        boolean boolean16 = charSequenceQueue7.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue13);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator19 = charSequenceQueue18.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator20 = charSequenceQueue18.spliterator();
        boolean boolean22 = charSequenceQueue18.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence23 = charSequenceQueue18.poll();
        boolean boolean24 = charSequenceQueue13.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue18);
        java.lang.Object[] objArray25 = charSequenceQueue18.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean29 = charSequenceQueue27.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence30 = charSequenceQueue27.element();
        java.lang.CharSequence[] charSequenceArray32 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList33 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList33, charSequenceArray32);
        java.lang.CharSequence[] charSequenceArray37 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList38 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList38, charSequenceArray37);
        java.lang.CharSequence[] charSequenceArray42 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue43 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43, charSequenceArray42);
        boolean boolean45 = charSequenceQueue43.isAtFullCapacity();
        boolean boolean46 = charSequenceList38.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        boolean boolean47 = charSequenceList33.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList38);
        boolean boolean48 = charSequenceQueue27.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList38);
        java.lang.CharSequence[] charSequenceArray50 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList51 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList51, charSequenceArray50);
        java.lang.Object obj53 = null;
        boolean boolean54 = charSequenceList51.contains(obj53);
        java.lang.String str55 = charSequenceList51.toString();
        java.lang.CharSequence[] charSequenceArray57 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList58 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList58, charSequenceArray57);
        java.lang.Object obj60 = null;
        boolean boolean61 = charSequenceList58.contains(obj60);
        java.lang.String str62 = charSequenceList58.toString();
        boolean boolean63 = charSequenceList51.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList58);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue64 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList58);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream65 = charSequenceQueue64.stream();
        boolean boolean66 = charSequenceQueue27.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue64);
        java.lang.String str67 = charSequenceQueue64.toString();
        int int68 = charSequenceQueue64.maxSize();
        java.lang.CharSequence charSequence69 = charSequenceQueue64.poll();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue71 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean73 = charSequenceQueue71.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray76 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue77 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue77, charSequenceArray76);
        boolean boolean79 = charSequenceQueue77.isAtFullCapacity();
        boolean boolean80 = charSequenceQueue71.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue77);
        boolean boolean81 = charSequenceQueue77.isFull();
        java.util.AbstractCollection[] abstractCollectionArray83 = new java.util.AbstractCollection[3];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.CharSequence>[] charSequenceCollectionArray84 = (java.util.AbstractCollection<java.lang.CharSequence>[]) abstractCollectionArray83;
        charSequenceCollectionArray84[0] = charSequenceQueue18;
        charSequenceCollectionArray84[1] = charSequenceQueue64;
        charSequenceCollectionArray84[2] = charSequenceQueue77;
        // The following exception was thrown during execution in test generation
        try {
            java.util.AbstractCollection<java.lang.CharSequence>[] charSequenceCollectionArray91 = charSequenceQueue1.toArray(charSequenceCollectionArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceSpliterator5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator19);
        org.junit.Assert.assertNotNull(charSequenceSpliterator20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "" + "'", charSequence23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
        org.junit.Assert.assertNotNull(charSequenceArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(charSequenceArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charSequenceArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charSequenceArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[hi!]" + "'", str55, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[hi!]" + "'", str62, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(charSequenceStream65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[hi!]" + "'", str67, "[hi!]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(charSequenceArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(abstractCollectionArray83);
        org.junit.Assert.assertNotNull(charSequenceCollectionArray84);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.CharSequence[] charSequenceArray13 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14, charSequenceArray13);
        boolean boolean16 = charSequenceQueue14.isAtFullCapacity();
        boolean boolean17 = charSequenceList9.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean18 = charSequenceQueue14.isAtFullCapacity();
        int int19 = charSequenceQueue14.maxSize();
        boolean boolean20 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence22 = charSequenceQueue14.get(5);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (5) is outside the available range [0, 2)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charSequenceArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue7.iterator();
        boolean boolean16 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceQueue18.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24, charSequenceArray23);
        boolean boolean26 = charSequenceQueue24.isAtFullCapacity();
        boolean boolean27 = charSequenceQueue18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator30 = charSequenceQueue29.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator31 = charSequenceQueue29.spliterator();
        boolean boolean33 = charSequenceQueue29.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = charSequenceQueue29.poll();
        boolean boolean35 = charSequenceQueue24.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29);
        boolean boolean36 = charSequenceQueue7.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        boolean boolean37 = charSequenceQueue7.isEmpty();
        boolean boolean39 = charSequenceQueue7.offer((java.lang.CharSequence) "");
        int int40 = charSequenceQueue7.size();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator30);
        org.junit.Assert.assertNotNull(charSequenceSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.CharSequence[] charSequenceArray13 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14, charSequenceArray13);
        boolean boolean16 = charSequenceQueue14.isAtFullCapacity();
        boolean boolean17 = charSequenceList9.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean18 = charSequenceQueue14.isAtFullCapacity();
        int int19 = charSequenceQueue14.maxSize();
        boolean boolean20 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean22 = charSequenceQueue1.offer((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = charSequenceQueue1.remove();
        boolean boolean24 = charSequenceQueue1.isAtFullCapacity();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charSequenceArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "" + "'", charSequence23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList22 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22, charSequenceArray21);
        java.lang.Object obj24 = null;
        boolean boolean25 = charSequenceList22.contains(obj24);
        java.lang.String str26 = charSequenceList22.toString();
        boolean boolean27 = charSequenceList15.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        boolean boolean28 = charSequenceQueue10.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        java.lang.CharSequence[] charSequenceArray30 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList31 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList31, charSequenceArray30);
        java.lang.Object obj33 = null;
        boolean boolean34 = charSequenceList31.contains(obj33);
        java.lang.String str35 = charSequenceList31.toString();
        java.lang.CharSequence[] charSequenceArray37 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList38 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList38, charSequenceArray37);
        java.lang.Object obj40 = null;
        boolean boolean41 = charSequenceList38.contains(obj40);
        java.lang.String str42 = charSequenceList38.toString();
        boolean boolean43 = charSequenceList31.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList38);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean47 = charSequenceQueue45.offer((java.lang.CharSequence) "");
        boolean boolean49 = charSequenceQueue45.add((java.lang.CharSequence) "hi!");
        int int50 = charSequenceQueue45.maxSize();
        boolean boolean51 = charSequenceList31.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        boolean boolean52 = charSequenceList15.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue54 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue56 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean58 = charSequenceQueue56.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray60 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList61 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList61, charSequenceArray60);
        java.lang.Object obj63 = null;
        boolean boolean64 = charSequenceList61.contains(obj63);
        java.lang.String str65 = charSequenceList61.toString();
        java.lang.CharSequence[] charSequenceArray67 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList68 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList68, charSequenceArray67);
        java.lang.Object obj70 = null;
        boolean boolean71 = charSequenceList68.contains(obj70);
        java.lang.String str72 = charSequenceList68.toString();
        boolean boolean73 = charSequenceList61.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList68);
        boolean boolean74 = charSequenceQueue56.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList61);
        boolean boolean75 = charSequenceQueue54.remove((java.lang.Object) charSequenceQueue56);
        boolean boolean76 = charSequenceList15.remove((java.lang.Object) charSequenceQueue54);
        boolean boolean77 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean78 = charSequenceQueue1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence80 = charSequenceQueue1.get((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[hi!]" + "'", str26, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charSequenceArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[hi!]" + "'", str35, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[hi!]" + "'", str42, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charSequenceArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[hi!]" + "'", str65, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[hi!]" + "'", str72, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean14 = charSequenceQueue8.offer((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = charSequenceQueue8.peek();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "" + "'", charSequence15, "");
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        int int11 = charSequenceQueue7.maxSize();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = charSequenceQueue7.addAll(charSequenceCollection12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.AnnotatedElement[]>();
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.lang.CharSequence charSequence5 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean24 = charSequenceQueue22.offer((java.lang.CharSequence) "");
        boolean boolean26 = charSequenceQueue22.add((java.lang.CharSequence) "hi!");
        int int27 = charSequenceQueue22.maxSize();
        boolean boolean28 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean30 = charSequenceList8.remove((java.lang.Object) 0);
        boolean boolean31 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue32 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean33 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence34 = charSequenceQueue32.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        boolean boolean7 = charSequenceQueue1.contains((java.lang.Object) (short) 100);
        charSequenceQueue1.clear();
        boolean boolean9 = charSequenceQueue1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        boolean boolean19 = charSequenceQueue12.isEmpty();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean23 = charSequenceQueue21.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence24 = charSequenceQueue21.peek();
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList27 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27, charSequenceArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = charSequenceList27.contains(obj29);
        java.lang.CharSequence[] charSequenceArray32 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList33 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList33, charSequenceArray32);
        java.lang.Object obj35 = null;
        boolean boolean36 = charSequenceList33.contains(obj35);
        java.lang.String str37 = charSequenceList33.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue39 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean40 = charSequenceList33.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue39);
        boolean boolean41 = charSequenceList27.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue39);
        boolean boolean42 = charSequenceQueue21.remove((java.lang.Object) charSequenceQueue39);
        int int43 = charSequenceQueue39.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator46 = charSequenceQueue45.spliterator();
        java.lang.CharSequence charSequence47 = charSequenceQueue45.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue49 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean51 = charSequenceQueue49.offer((java.lang.CharSequence) "");
        boolean boolean52 = charSequenceQueue45.contains((java.lang.Object) charSequenceQueue49);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue54 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean56 = charSequenceQueue54.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = charSequenceQueue54.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream58 = charSequenceQueue54.parallelStream();
        boolean boolean60 = charSequenceQueue54.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator61 = charSequenceQueue54.spliterator();
        boolean boolean62 = charSequenceQueue45.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54);
        java.lang.CharSequence charSequence63 = charSequenceQueue54.poll();
        java.lang.CharSequence[] charSequenceArray65 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue66 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue66, charSequenceArray65);
        int int68 = charSequenceQueue66.maxSize();
        boolean boolean69 = charSequenceQueue66.isFull();
        java.lang.String str70 = charSequenceQueue66.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue72 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean74 = charSequenceQueue72.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray77 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue78 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue78, charSequenceArray77);
        boolean boolean80 = charSequenceQueue78.isAtFullCapacity();
        boolean boolean81 = charSequenceQueue72.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue78);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue83 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator84 = charSequenceQueue83.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator85 = charSequenceQueue83.spliterator();
        boolean boolean87 = charSequenceQueue83.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence88 = charSequenceQueue83.poll();
        boolean boolean89 = charSequenceQueue78.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue83);
        java.util.Queue[] queueArray91 = new java.util.Queue[2];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray92 = (java.util.Queue<java.lang.CharSequence>[]) queueArray91;
        charSequenceQueueArray92[0] = charSequenceQueue66;
        charSequenceQueueArray92[1] = charSequenceQueue83;
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray97 = charSequenceQueue54.toArray(charSequenceQueueArray92);
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray98 = charSequenceQueue39.toArray(charSequenceQueueArray92);
        java.lang.Iterable<java.lang.CharSequence>[] charSequenceIterableArray99 = charSequenceQueue12.toArray((java.lang.Iterable<java.lang.CharSequence>[]) charSequenceQueueArray98);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "" + "'", charSequence24, "");
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charSequenceArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[hi!]" + "'", str37, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(charSequenceSpliterator46);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "" + "'", charSequence57, "");
        org.junit.Assert.assertNotNull(charSequenceStream58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "" + "'", charSequence63, "");
        org.junit.Assert.assertNotNull(charSequenceArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 32 + "'", int68 == 32);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(charSequenceArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator84);
        org.junit.Assert.assertNotNull(charSequenceSpliterator85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "" + "'", charSequence88, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(queueArray91);
        org.junit.Assert.assertNotNull(charSequenceQueueArray92);
        org.junit.Assert.assertNotNull(charSequenceQueueArray97);
        org.junit.Assert.assertNotNull(charSequenceQueueArray98);
        org.junit.Assert.assertNotNull(charSequenceIterableArray99);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        java.lang.Class<?> wildcardClass11 = charSequenceQueue1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        boolean boolean6 = charSequenceQueue1.remove((java.lang.Object) (-1.0d));
        java.lang.CharSequence[] charSequenceArray9 = new java.lang.CharSequence[] { "[hi!]", "[hi!]" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList10 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList10, charSequenceArray9);
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean16 = charSequenceQueue14.offer((java.lang.CharSequence) "");
        charSequenceQueue14.clear();
        java.lang.CharSequence charSequence18 = charSequenceQueue14.poll();
        boolean boolean19 = charSequenceQueue1.remove((java.lang.Object) charSequence18);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSequenceArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(charSequence18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        boolean boolean15 = charSequenceQueue8.contains((java.lang.Object) false);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean19 = charSequenceQueue17.offer((java.lang.CharSequence) "");
        boolean boolean21 = charSequenceQueue17.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean24 = charSequenceQueue17.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        boolean boolean25 = charSequenceQueue8.remove((java.lang.Object) charSequenceQueue23);
        boolean boolean27 = charSequenceQueue8.offer((java.lang.CharSequence) "[, , , hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue3, charSequenceArray2);
        boolean boolean5 = charSequenceQueue3.isAtFullCapacity();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue3.parallelStream();
        boolean boolean7 = charSequenceQueue3.isEmpty();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue3.stream();
        int int9 = charSequenceQueue3.size();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        int int7 = charSequenceQueue1.maxSize();
        int int8 = charSequenceQueue1.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16, charSequenceArray15);
        boolean boolean18 = charSequenceQueue16.isAtFullCapacity();
        boolean boolean19 = charSequenceQueue10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream20 = charSequenceQueue10.stream();
        boolean boolean21 = charSequenceQueue1.contains((java.lang.Object) charSequenceStream20);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream24 = charSequenceQueue23.parallelStream();
        int int25 = charSequenceQueue23.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean29 = charSequenceQueue27.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray30 = charSequenceQueue27.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor31 = charSequenceQueue27.iterator();
        boolean boolean32 = charSequenceQueue23.remove((java.lang.Object) charSequenceQueue27);
        boolean boolean33 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence34 = charSequenceQueue23.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charSequenceStream24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        boolean boolean7 = charSequenceQueue1.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue1.spliterator();
        boolean boolean9 = charSequenceQueue1.isAtFullCapacity();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence11 = charSequenceQueue1.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        boolean boolean6 = charSequenceQueue1.isAtFullCapacity();
        java.lang.CharSequence charSequence7 = charSequenceQueue1.element();
        int int8 = charSequenceQueue1.size();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream9 = charSequenceQueue1.stream();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator10 = charSequenceQueue1.spliterator();
        boolean boolean11 = charSequenceQueue1.isFull();
        boolean boolean12 = charSequenceQueue1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence14 = charSequenceQueue1.get(100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "" + "'", charSequence7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(charSequenceStream9);
        org.junit.Assert.assertNotNull(charSequenceSpliterator10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = charSequenceList7.contains(obj9);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceList13.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue19);
        int int23 = charSequenceQueue19.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator26 = charSequenceQueue25.spliterator();
        java.lang.CharSequence charSequence27 = charSequenceQueue25.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean31 = charSequenceQueue29.offer((java.lang.CharSequence) "");
        boolean boolean32 = charSequenceQueue25.contains((java.lang.Object) charSequenceQueue29);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean36 = charSequenceQueue34.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence37 = charSequenceQueue34.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream38 = charSequenceQueue34.parallelStream();
        boolean boolean40 = charSequenceQueue34.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator41 = charSequenceQueue34.spliterator();
        boolean boolean42 = charSequenceQueue25.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        java.lang.CharSequence charSequence43 = charSequenceQueue34.poll();
        java.lang.CharSequence[] charSequenceArray45 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue46 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue46, charSequenceArray45);
        int int48 = charSequenceQueue46.maxSize();
        boolean boolean49 = charSequenceQueue46.isFull();
        java.lang.String str50 = charSequenceQueue46.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue52 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean54 = charSequenceQueue52.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray57 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue58 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue58, charSequenceArray57);
        boolean boolean60 = charSequenceQueue58.isAtFullCapacity();
        boolean boolean61 = charSequenceQueue52.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue58);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue63 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator64 = charSequenceQueue63.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator65 = charSequenceQueue63.spliterator();
        boolean boolean67 = charSequenceQueue63.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence68 = charSequenceQueue63.poll();
        boolean boolean69 = charSequenceQueue58.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue63);
        java.util.Queue[] queueArray71 = new java.util.Queue[2];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray72 = (java.util.Queue<java.lang.CharSequence>[]) queueArray71;
        charSequenceQueueArray72[0] = charSequenceQueue46;
        charSequenceQueueArray72[1] = charSequenceQueue63;
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray77 = charSequenceQueue34.toArray(charSequenceQueueArray72);
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray78 = charSequenceQueue19.toArray(charSequenceQueueArray72);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue80 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator81 = charSequenceQueue80.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator82 = charSequenceQueue80.spliterator();
        boolean boolean84 = charSequenceQueue80.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence85 = charSequenceQueue80.poll();
        boolean boolean87 = charSequenceQueue80.add((java.lang.CharSequence) "");
        boolean boolean88 = charSequenceQueue19.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence89 = charSequenceQueue19.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(charSequenceSpliterator26);
        org.junit.Assert.assertNull(charSequence27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "" + "'", charSequence37, "");
        org.junit.Assert.assertNotNull(charSequenceStream38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "" + "'", charSequence43, "");
        org.junit.Assert.assertNotNull(charSequenceArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 32 + "'", int48 == 32);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(charSequenceArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator64);
        org.junit.Assert.assertNotNull(charSequenceSpliterator65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "" + "'", charSequence68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(queueArray71);
        org.junit.Assert.assertNotNull(charSequenceQueueArray72);
        org.junit.Assert.assertNotNull(charSequenceQueueArray77);
        org.junit.Assert.assertNotNull(charSequenceQueueArray78);
        org.junit.Assert.assertNotNull(charSequenceSpliterator81);
        org.junit.Assert.assertNotNull(charSequenceSpliterator82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "" + "'", charSequence85, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.CharSequence charSequence13 = charSequenceQueue8.poll();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor14 = charSequenceQueue8.iterator();
        java.lang.CharSequence charSequence15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = charSequenceQueue8.add(charSequence15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Attempted to add null object to queue");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertNotNull(charSequenceItor14);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        boolean boolean8 = charSequenceQueue1.add((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue13 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean15 = charSequenceQueue13.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray17 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList18 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18, charSequenceArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = charSequenceList18.contains(obj20);
        java.lang.String str22 = charSequenceList18.toString();
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        boolean boolean30 = charSequenceList18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25);
        boolean boolean31 = charSequenceQueue13.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18);
        boolean boolean32 = charSequenceQueue11.remove((java.lang.Object) charSequenceQueue13);
        boolean boolean33 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence35 = charSequenceQueue11.get((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charSequenceArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[hi!]" + "'", str22, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        boolean boolean6 = charSequenceQueue1.isAtFullCapacity();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor7 = charSequenceQueue1.iterator();
        java.lang.Object[] objArray8 = charSequenceQueue1.toArray();
        boolean boolean9 = charSequenceQueue1.isAtFullCapacity();
        java.lang.CharSequence charSequence10 = charSequenceQueue1.poll();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence12 = charSequenceQueue1.get((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSequenceItor7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = charSequenceList7.contains(obj9);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceList13.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue19);
        boolean boolean24 = charSequenceQueue1.add((java.lang.CharSequence) "");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
        java.lang.CharSequence charSequence26 = charSequenceQueue1.remove();
        java.lang.Object[] objArray27 = charSequenceQueue1.toArray();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "" + "'", charSequence26, "");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30, charSequenceArray29);
        boolean boolean32 = charSequenceQueue30.isAtFullCapacity();
        boolean boolean33 = charSequenceQueue24.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator36 = charSequenceQueue35.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue35.spliterator();
        boolean boolean39 = charSequenceQueue35.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = charSequenceQueue35.poll();
        boolean boolean41 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList45 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList45, charSequenceArray44);
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50, charSequenceArray49);
        boolean boolean52 = charSequenceQueue50.isAtFullCapacity();
        boolean boolean53 = charSequenceList45.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean54 = charSequenceQueue50.isAtFullCapacity();
        int int55 = charSequenceQueue50.maxSize();
        boolean boolean56 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean57 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean59 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        int int60 = charSequenceQueue1.maxSize();
        boolean boolean61 = charSequenceQueue1.isEmpty();
        java.lang.CharSequence charSequence62 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = charSequenceQueue1.offer(charSequence62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Attempted to add null object to queue");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator36);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean13 = charSequenceQueue8.isEmpty();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean17 = charSequenceQueue15.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray20 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue21, charSequenceArray20);
        boolean boolean23 = charSequenceQueue21.isAtFullCapacity();
        boolean boolean24 = charSequenceQueue15.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue21);
        boolean boolean26 = charSequenceQueue21.offer((java.lang.CharSequence) "[[hi!], [hi!]]");
        int int27 = charSequenceQueue21.maxSize();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor28 = charSequenceQueue21.iterator();
        java.util.Iterator[] iteratorArray30 = new java.util.Iterator[1];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.lang.CharSequence>[] charSequenceItorArray31 = (java.util.Iterator<java.lang.CharSequence>[]) iteratorArray30;
        charSequenceItorArray31[0] = charSequenceItor28;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.lang.CharSequence>[] charSequenceItorArray34 = charSequenceQueue8.toArray(charSequenceItorArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charSequenceArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertNotNull(charSequenceItor28);
        org.junit.Assert.assertNotNull(iteratorArray30);
        org.junit.Assert.assertNotNull(charSequenceItorArray31);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Object> objQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Object>();
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.CharSequence[] charSequenceArray13 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14, charSequenceArray13);
        boolean boolean16 = charSequenceQueue14.isAtFullCapacity();
        boolean boolean17 = charSequenceList9.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean18 = charSequenceQueue14.isAtFullCapacity();
        int int19 = charSequenceQueue14.maxSize();
        boolean boolean20 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean22 = charSequenceQueue1.offer((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = charSequenceQueue1.remove();
        boolean boolean24 = charSequenceQueue1.isEmpty();
        boolean boolean25 = charSequenceQueue1.isFull();
        java.lang.CharSequence charSequence26 = charSequenceQueue1.remove();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue28 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean30 = charSequenceQueue28.offer((java.lang.CharSequence) "");
        charSequenceQueue28.clear();
        boolean boolean33 = charSequenceQueue28.remove((java.lang.Object) (-1.0d));
        java.lang.CharSequence[] charSequenceArray36 = new java.lang.CharSequence[] { "[hi!]", "[hi!]" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList37 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList37, charSequenceArray36);
        boolean boolean39 = charSequenceQueue28.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList37);
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = charSequenceList42.contains(obj44);
        java.lang.String str46 = charSequenceList42.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean49 = charSequenceList42.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        charSequenceQueue48.clear();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator51 = charSequenceQueue48.spliterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue53 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean55 = charSequenceQueue53.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray56 = charSequenceQueue53.toArray();
        boolean boolean57 = charSequenceQueue48.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue53);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue59 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean61 = charSequenceQueue59.offer((java.lang.CharSequence) "");
        java.lang.String str62 = charSequenceQueue59.toString();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor63 = charSequenceQueue59.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream64 = charSequenceQueue59.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue66 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean68 = charSequenceQueue66.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence69 = charSequenceQueue66.peek();
        boolean boolean70 = charSequenceQueue59.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue66);
        boolean boolean71 = charSequenceQueue48.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue66);
        boolean boolean72 = charSequenceList37.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue66);
        boolean boolean73 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList37);
        boolean boolean75 = charSequenceQueue1.add((java.lang.CharSequence) "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charSequenceArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "" + "'", charSequence23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "" + "'", charSequence26, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertNotNull(charSequenceItor63);
        org.junit.Assert.assertNotNull(charSequenceStream64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "" + "'", charSequence69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.AnnotatedElement> annotatedElementQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.AnnotatedElement>();
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        boolean boolean6 = charSequenceQueue1.isAtFullCapacity();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor7 = charSequenceQueue1.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue1.parallelStream();
        java.lang.CharSequence charSequence9 = charSequenceQueue1.element();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSequenceItor7);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        java.lang.CharSequence charSequence2 = charSequenceQueue1.peek();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence4 = charSequenceQueue1.get((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (97) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(charSequence2);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.lang.CharSequence charSequence14 = charSequenceQueue12.peek();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue12.iterator();
        boolean boolean16 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.Class<?> wildcardClass17 = charSequenceQueue12.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.String str6 = charSequenceQueue1.toString();
        boolean boolean7 = charSequenceQueue1.isFull();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.lang.CharSequence charSequence2 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue4 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean6 = charSequenceQueue4.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = charSequenceQueue4.element();
        java.lang.CharSequence[] charSequenceArray9 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList10 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList10, charSequenceArray9);
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.CharSequence[] charSequenceArray19 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20, charSequenceArray19);
        boolean boolean22 = charSequenceQueue20.isAtFullCapacity();
        boolean boolean23 = charSequenceList15.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        boolean boolean24 = charSequenceList10.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean25 = charSequenceQueue4.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList28 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList28, charSequenceArray27);
        java.lang.Object obj30 = null;
        boolean boolean31 = charSequenceList28.contains(obj30);
        java.lang.String str32 = charSequenceList28.toString();
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        boolean boolean40 = charSequenceList28.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList35);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream42 = charSequenceQueue41.stream();
        boolean boolean43 = charSequenceQueue4.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        java.lang.CharSequence charSequence44 = charSequenceQueue41.element();
        java.lang.CharSequence charSequence45 = charSequenceQueue41.peek();
        java.lang.String str46 = charSequenceQueue41.toString();
        boolean boolean47 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        java.lang.Class<?> wildcardClass48 = charSequenceQueue41.getClass();
        org.junit.Assert.assertNull(charSequence2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "" + "'", charSequence7, "");
        org.junit.Assert.assertNotNull(charSequenceArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[hi!]" + "'", str32, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSequenceStream42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>(5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence2 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        boolean boolean23 = charSequenceQueue3.isEmpty();
        boolean boolean24 = charSequenceQueue3.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream25 = charSequenceQueue3.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean29 = charSequenceQueue27.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray32 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue33 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue33, charSequenceArray32);
        boolean boolean35 = charSequenceQueue33.isAtFullCapacity();
        boolean boolean36 = charSequenceQueue27.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue33);
        boolean boolean38 = charSequenceQueue33.offer((java.lang.CharSequence) "[[hi!], [hi!]]");
        boolean boolean39 = charSequenceQueue33.isEmpty();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean43 = charSequenceQueue41.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = charSequenceQueue41.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream45 = charSequenceQueue41.parallelStream();
        boolean boolean47 = charSequenceQueue41.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator48 = charSequenceQueue41.spliterator();
        java.lang.CharSequence charSequence49 = charSequenceQueue41.element();
        boolean boolean50 = charSequenceQueue33.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        boolean boolean51 = charSequenceQueue3.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue53 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream54 = charSequenceQueue53.parallelStream();
        boolean boolean56 = charSequenceQueue53.contains((java.lang.Object) 1.0d);
        boolean boolean57 = charSequenceQueue53.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream58 = charSequenceQueue53.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream59 = charSequenceQueue53.stream();
        boolean boolean61 = charSequenceQueue53.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = charSequenceQueue53.get(0);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue64 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue53);
        boolean boolean65 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue64);
        java.lang.String str66 = charSequenceQueue3.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charSequenceStream25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charSequenceArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "" + "'", charSequence44, "");
        org.junit.Assert.assertNotNull(charSequenceStream45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator48);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "" + "'", charSequence49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(charSequenceStream54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charSequenceStream58);
        org.junit.Assert.assertNotNull(charSequenceStream59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[, ]" + "'", str66, "[, ]");
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = charSequenceList7.contains(obj9);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceList13.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue19);
        boolean boolean24 = charSequenceQueue1.add((java.lang.CharSequence) "");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList28 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList28, charSequenceArray27);
        java.lang.Object obj30 = null;
        boolean boolean31 = charSequenceList28.contains(obj30);
        java.lang.CharSequence[] charSequenceArray33 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList34 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34, charSequenceArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = charSequenceList34.contains(obj36);
        java.lang.String str38 = charSequenceList34.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue40 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean41 = charSequenceList34.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40);
        boolean boolean42 = charSequenceList28.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue44 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean45 = charSequenceList28.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue44);
        java.lang.CharSequence[] charSequenceArray47 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList48 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48, charSequenceArray47);
        java.lang.Object obj50 = null;
        boolean boolean51 = charSequenceList48.contains(obj50);
        java.lang.CharSequence[] charSequenceArray53 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList54 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList54, charSequenceArray53);
        java.lang.Object obj56 = null;
        boolean boolean57 = charSequenceList54.contains(obj56);
        java.lang.String str58 = charSequenceList54.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue60 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean61 = charSequenceList54.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue60);
        boolean boolean62 = charSequenceList48.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue60);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue64 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean65 = charSequenceList48.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue64);
        boolean boolean66 = charSequenceQueue44.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue64);
        boolean boolean67 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence69 = charSequenceQueue44.get((-1));
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charSequenceArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[hi!]" + "'", str38, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charSequenceArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charSequenceArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[hi!]" + "'", str58, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.lang.Object[] objArray10 = charSequenceQueue8.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence12 = charSequenceQueue8.get(32);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (32) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.stream();
        boolean boolean9 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream10 = charSequenceQueue1.stream();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertNotNull(charSequenceStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceStream10);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor4 = charSequenceQueue1.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        boolean boolean10 = charSequenceQueue6.add((java.lang.CharSequence) "hi!");
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream11 = charSequenceQueue6.stream();
        java.lang.CharSequence[] charSequenceArray13 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList14 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList14, charSequenceArray13);
        java.lang.Object obj16 = null;
        boolean boolean17 = charSequenceList14.contains(obj16);
        java.lang.String str18 = charSequenceList14.toString();
        java.lang.CharSequence[] charSequenceArray20 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList21 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList21, charSequenceArray20);
        java.lang.Object obj23 = null;
        boolean boolean24 = charSequenceList21.contains(obj23);
        java.lang.String str25 = charSequenceList21.toString();
        boolean boolean26 = charSequenceList14.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList21);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue28 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean30 = charSequenceQueue28.offer((java.lang.CharSequence) "");
        boolean boolean32 = charSequenceQueue28.add((java.lang.CharSequence) "hi!");
        int int33 = charSequenceQueue28.maxSize();
        boolean boolean34 = charSequenceList14.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue28);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue36 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean38 = charSequenceQueue36.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = charSequenceQueue36.peek();
        boolean boolean41 = charSequenceQueue36.add((java.lang.CharSequence) "");
        boolean boolean42 = charSequenceList14.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue36);
        boolean boolean43 = charSequenceQueue6.contains((java.lang.Object) charSequenceQueue36);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream44 = charSequenceQueue36.stream();
        java.lang.CharSequence[] charSequenceArray47 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList48 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48, charSequenceArray47);
        java.lang.CharSequence[] charSequenceArray52 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue53 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue53, charSequenceArray52);
        boolean boolean55 = charSequenceQueue53.isAtFullCapacity();
        boolean boolean56 = charSequenceList48.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue53);
        java.lang.CharSequence charSequence57 = charSequenceQueue53.poll();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream58 = charSequenceQueue53.parallelStream();
        java.lang.CharSequence[] charSequenceArray61 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue62 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue62, charSequenceArray61);
        boolean boolean64 = charSequenceQueue62.isAtFullCapacity();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream65 = charSequenceQueue62.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue67 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream68 = charSequenceQueue67.parallelStream();
        boolean boolean70 = charSequenceQueue67.contains((java.lang.Object) 1.0d);
        charSequenceQueue67.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream72 = charSequenceQueue67.stream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue74 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator75 = charSequenceQueue74.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator76 = charSequenceQueue74.spliterator();
        boolean boolean78 = charSequenceQueue74.add((java.lang.CharSequence) "");
        boolean boolean79 = charSequenceQueue74.isAtFullCapacity();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream80 = charSequenceQueue74.parallelStream();
        java.util.stream.BaseStream[] baseStreamArray82 = new java.util.stream.BaseStream[5];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>[] charSequenceBaseStreamArray83 = (java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>[]) baseStreamArray82;
        charSequenceBaseStreamArray83[0] = charSequenceStream44;
        charSequenceBaseStreamArray83[1] = charSequenceStream58;
        charSequenceBaseStreamArray83[2] = charSequenceStream65;
        charSequenceBaseStreamArray83[3] = charSequenceStream72;
        charSequenceBaseStreamArray83[4] = charSequenceStream80;
        java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>[] charSequenceBaseStreamArray94 = charSequenceQueue1.toArray(charSequenceBaseStreamArray83);
        java.lang.Class<?> wildcardClass95 = charSequenceBaseStreamArray94.getClass();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNotNull(charSequenceItor4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charSequenceStream11);
        org.junit.Assert.assertNotNull(charSequenceArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[hi!]" + "'", str18, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[hi!]" + "'", str25, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charSequenceStream44);
        org.junit.Assert.assertNotNull(charSequenceArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(charSequenceArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "" + "'", charSequence57, "");
        org.junit.Assert.assertNotNull(charSequenceStream58);
        org.junit.Assert.assertNotNull(charSequenceArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charSequenceStream65);
        org.junit.Assert.assertNotNull(charSequenceStream68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charSequenceStream72);
        org.junit.Assert.assertNotNull(charSequenceSpliterator75);
        org.junit.Assert.assertNotNull(charSequenceSpliterator76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(charSequenceStream80);
        org.junit.Assert.assertNotNull(baseStreamArray82);
        org.junit.Assert.assertNotNull(charSequenceBaseStreamArray83);
        org.junit.Assert.assertNotNull(charSequenceBaseStreamArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "[hi!]" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream13 = charSequenceQueue12.parallelStream();
        boolean boolean15 = charSequenceQueue12.contains((java.lang.Object) 1.0d);
        boolean boolean16 = charSequenceQueue12.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream17 = charSequenceQueue12.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream18 = charSequenceQueue12.stream();
        java.lang.CharSequence charSequence19 = charSequenceQueue12.poll();
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList22 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22, charSequenceArray21);
        java.lang.Object obj24 = null;
        boolean boolean25 = charSequenceList22.contains(obj24);
        java.lang.String str26 = charSequenceList22.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue28 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean29 = charSequenceList22.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue28);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean33 = charSequenceQueue31.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = charSequenceQueue31.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue36 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean38 = charSequenceQueue36.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = charSequenceQueue36.element();
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.CharSequence[] charSequenceArray46 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList47 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList47, charSequenceArray46);
        java.lang.CharSequence[] charSequenceArray51 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue52 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue52, charSequenceArray51);
        boolean boolean54 = charSequenceQueue52.isAtFullCapacity();
        boolean boolean55 = charSequenceList47.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue52);
        boolean boolean56 = charSequenceList42.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList47);
        boolean boolean57 = charSequenceQueue36.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList47);
        boolean boolean58 = charSequenceQueue31.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList47);
        boolean boolean59 = charSequenceList22.remove((java.lang.Object) boolean58);
        boolean boolean60 = charSequenceQueue12.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        java.util.Queue[] queueArray62 = new java.util.Queue[2];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray63 = (java.util.Queue<java.lang.CharSequence>[]) queueArray62;
        charSequenceQueueArray63[0] = charSequenceQueue8;
        charSequenceQueueArray63[1] = charSequenceQueue12;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray68 = charSequenceQueue1.toArray(charSequenceQueueArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charSequenceStream17);
        org.junit.Assert.assertNotNull(charSequenceStream18);
        org.junit.Assert.assertNull(charSequence19);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[hi!]" + "'", str26, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(charSequenceArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(charSequenceArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(queueArray62);
        org.junit.Assert.assertNotNull(charSequenceQueueArray63);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.apache.commons.collections4.queue.CircularFifoQueue<org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>> charSequenceQueueQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>>((int) (short) 10);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.lang.CharSequence charSequence41 = charSequenceQueue38.element();
        java.lang.CharSequence charSequence42 = charSequenceQueue38.peek();
        java.lang.String str43 = charSequenceQueue38.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream46 = charSequenceQueue45.parallelStream();
        java.lang.String str47 = charSequenceQueue45.toString();
        boolean boolean49 = charSequenceQueue45.contains((java.lang.Object) 10.0d);
        boolean boolean50 = charSequenceQueue38.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        java.lang.CharSequence charSequence51 = charSequenceQueue38.poll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[hi!]" + "'", str43, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceStream46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(charSequence51);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        boolean boolean6 = charSequenceQueue1.isAtFullCapacity();
        int int7 = charSequenceQueue1.maxSize();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue1.spliterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator11 = charSequenceQueue10.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator12 = charSequenceQueue10.spliterator();
        boolean boolean14 = charSequenceQueue10.add((java.lang.CharSequence) "");
        boolean boolean15 = charSequenceQueue10.isAtFullCapacity();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor16 = charSequenceQueue10.iterator();
        java.lang.Object[] objArray17 = charSequenceQueue10.toArray();
        boolean boolean18 = charSequenceQueue1.remove((java.lang.Object) objArray17);
        java.lang.CharSequence charSequence19 = charSequenceQueue1.remove();
        java.lang.String str20 = charSequenceQueue1.toString();
        boolean boolean21 = charSequenceQueue1.isFull();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNotNull(charSequenceSpliterator11);
        org.junit.Assert.assertNotNull(charSequenceSpliterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charSequenceItor16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        int int4 = charSequenceQueue1.maxSize();
        java.lang.Class[] classArray6 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray7 = (java.lang.Class<?>[]) classArray6;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?>[] wildcardClassArray8 = charSequenceQueue1.toArray(wildcardClassArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(wildcardClassArray7);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        boolean boolean23 = charSequenceQueue3.isEmpty();
        int int24 = charSequenceQueue3.maxSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence26 = charSequenceQueue3.get(10);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (10) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        boolean boolean15 = charSequenceQueue8.contains((java.lang.Object) false);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator16 = charSequenceQueue8.spliterator();
        java.lang.Object[] objArray17 = charSequenceQueue8.toArray();
        java.lang.CharSequence[] charSequenceArray19 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20, charSequenceArray19);
        int int22 = charSequenceQueue20.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        int int27 = charSequenceQueue24.maxSize();
        int int28 = charSequenceQueue24.maxSize();
        java.lang.CharSequence charSequence29 = charSequenceQueue24.poll();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator32 = charSequenceQueue31.spliterator();
        java.lang.CharSequence charSequence33 = charSequenceQueue31.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean37 = charSequenceQueue35.offer((java.lang.CharSequence) "");
        boolean boolean38 = charSequenceQueue31.contains((java.lang.Object) charSequenceQueue35);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue40 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean42 = charSequenceQueue40.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence43 = charSequenceQueue40.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream44 = charSequenceQueue40.parallelStream();
        boolean boolean46 = charSequenceQueue40.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator47 = charSequenceQueue40.spliterator();
        boolean boolean48 = charSequenceQueue31.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40);
        boolean boolean49 = charSequenceQueue40.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue51 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue53 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean55 = charSequenceQueue53.offer((java.lang.CharSequence) "");
        boolean boolean57 = charSequenceQueue53.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue59 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean60 = charSequenceQueue53.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue59);
        charSequenceQueue53.clear();
        boolean boolean62 = charSequenceQueue51.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue53);
        java.lang.CharSequence charSequence63 = charSequenceQueue51.poll();
        java.lang.CharSequence[] charSequenceArray65 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList66 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList66, charSequenceArray65);
        java.lang.Object obj68 = null;
        boolean boolean69 = charSequenceList66.contains(obj68);
        java.lang.String str70 = charSequenceList66.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue72 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean73 = charSequenceList66.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue72);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor74 = charSequenceQueue72.iterator();
        boolean boolean75 = charSequenceQueue72.isFull();
        java.lang.CharSequence charSequence76 = charSequenceQueue72.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue[] circularFifoQueueArray78 = new org.apache.commons.collections4.queue.CircularFifoQueue[5];
        @SuppressWarnings("unchecked")
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>[] charSequenceQueueArray79 = (org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>[]) circularFifoQueueArray78;
        charSequenceQueueArray79[0] = charSequenceQueue20;
        charSequenceQueueArray79[1] = charSequenceQueue24;
        charSequenceQueueArray79[2] = charSequenceQueue40;
        charSequenceQueueArray79[3] = charSequenceQueue51;
        charSequenceQueueArray79[4] = charSequenceQueue72;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>[] charSequenceQueueArray90 = charSequenceQueue8.toArray(charSequenceQueueArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[, ]");
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "" + "'", charSequence29, "");
        org.junit.Assert.assertNotNull(charSequenceSpliterator32);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "" + "'", charSequence43, "");
        org.junit.Assert.assertNotNull(charSequenceStream44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(charSequence63);
        org.junit.Assert.assertNotNull(charSequenceArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[hi!]" + "'", str70, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(charSequenceItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(charSequence76);
        org.junit.Assert.assertNotNull(circularFifoQueueArray78);
        org.junit.Assert.assertNotNull(charSequenceQueueArray79);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.util.AbstractCollection<java.lang.CharSequence>> charSequenceCollectionQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.AbstractCollection<java.lang.CharSequence>>(1);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) ' ');
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9, charSequenceArray8);
        boolean boolean11 = charSequenceQueue9.isAtFullCapacity();
        boolean boolean12 = charSequenceQueue3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator15 = charSequenceQueue14.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator16 = charSequenceQueue14.spliterator();
        boolean boolean18 = charSequenceQueue14.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = charSequenceQueue14.poll();
        boolean boolean20 = charSequenceQueue9.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        java.lang.CharSequence charSequence21 = charSequenceQueue9.remove();
        boolean boolean22 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "", "[hi!]", "", "hi!" };
        java.lang.Comparable<java.lang.String>[] strComparableArray34 = charSequenceList25.toArray((java.lang.Comparable<java.lang.String>[]) strArray33);
        java.lang.String[] strArray35 = charSequenceQueue1.toArray(strArray33);
        java.lang.CharSequence charSequence36 = charSequenceQueue1.peek();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence38 = charSequenceQueue1.get((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator15);
        org.junit.Assert.assertNotNull(charSequenceSpliterator16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "" + "'", charSequence21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strComparableArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNull(charSequence36);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray5 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList6 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList6, charSequenceArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = charSequenceList6.contains(obj8);
        java.lang.String str10 = charSequenceList6.toString();
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        boolean boolean18 = charSequenceList6.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13);
        boolean boolean19 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList6);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator20 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence21 = charSequenceQueue1.peek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[hi!]" + "'", str10, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator20);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "" + "'", charSequence21, "");
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue7.iterator();
        boolean boolean16 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceQueue18.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24, charSequenceArray23);
        boolean boolean26 = charSequenceQueue24.isAtFullCapacity();
        boolean boolean27 = charSequenceQueue18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator30 = charSequenceQueue29.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator31 = charSequenceQueue29.spliterator();
        boolean boolean33 = charSequenceQueue29.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = charSequenceQueue29.poll();
        boolean boolean35 = charSequenceQueue24.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29);
        boolean boolean36 = charSequenceQueue7.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        boolean boolean37 = charSequenceQueue7.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence38 = charSequenceQueue7.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator30);
        org.junit.Assert.assertNotNull(charSequenceSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        boolean boolean8 = charSequenceQueue1.add((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = charSequenceQueue11.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream15 = charSequenceQueue11.parallelStream();
        java.lang.CharSequence[] charSequenceArray18 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList19 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList19, charSequenceArray18);
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24, charSequenceArray23);
        boolean boolean26 = charSequenceQueue24.isAtFullCapacity();
        boolean boolean27 = charSequenceList19.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        boolean boolean28 = charSequenceQueue24.isAtFullCapacity();
        int int29 = charSequenceQueue24.maxSize();
        boolean boolean30 = charSequenceQueue11.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        boolean boolean32 = charSequenceQueue11.offer((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = charSequenceQueue11.remove();
        boolean boolean34 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator35 = charSequenceQueue1.spliterator();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor36 = charSequenceQueue1.iterator();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(charSequenceStream15);
        org.junit.Assert.assertNotNull(charSequenceArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator35);
        org.junit.Assert.assertNotNull(charSequenceItor36);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean2 = charSequenceQueue1.isAtFullCapacity();
        java.lang.Object[] objArray3 = charSequenceQueue1.toArray();
        charSequenceQueue1.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator7 = charSequenceQueue6.spliterator();
        java.lang.CharSequence charSequence8 = charSequenceQueue6.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        boolean boolean13 = charSequenceQueue6.contains((java.lang.Object) charSequenceQueue10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean17 = charSequenceQueue15.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = charSequenceQueue15.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream19 = charSequenceQueue15.parallelStream();
        boolean boolean21 = charSequenceQueue15.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator22 = charSequenceQueue15.spliterator();
        boolean boolean23 = charSequenceQueue6.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue15);
        java.lang.CharSequence charSequence24 = charSequenceQueue15.poll();
        int int25 = charSequenceQueue15.size();
        boolean boolean26 = charSequenceQueue1.contains((java.lang.Object) int25);
        int int27 = charSequenceQueue1.maxSize();
        int int28 = charSequenceQueue1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator7);
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertNotNull(charSequenceStream19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "" + "'", charSequence24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        charSequenceQueue8.clear();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator11 = charSequenceQueue8.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence12 = charSequenceQueue8.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator11);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        boolean boolean6 = charSequenceQueue1.remove((java.lang.Object) (-1.0d));
        java.lang.CharSequence[] charSequenceArray9 = new java.lang.CharSequence[] { "[hi!]", "[hi!]" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList10 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList10, charSequenceArray9);
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence14 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSequenceArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence6 = charSequenceQueue1.element();
        java.lang.CharSequence charSequence7 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray10 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList11 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList11, charSequenceArray10);
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16, charSequenceArray15);
        boolean boolean18 = charSequenceQueue16.isAtFullCapacity();
        boolean boolean19 = charSequenceList11.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.lang.CharSequence charSequence20 = charSequenceQueue16.poll();
        java.lang.CharSequence charSequence21 = charSequenceQueue16.poll();
        boolean boolean22 = charSequenceQueue16.isAtFullCapacity();
        int int23 = charSequenceQueue16.maxSize();
        boolean boolean24 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream25 = charSequenceQueue16.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence26 = charSequenceQueue16.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "" + "'", charSequence7, "");
        org.junit.Assert.assertNotNull(charSequenceArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "" + "'", charSequence21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charSequenceStream25);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor10 = charSequenceQueue8.iterator();
        boolean boolean11 = charSequenceQueue8.isFull();
        java.lang.Class<?> wildcardClass12 = charSequenceQueue8.getClass();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue42 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean44 = charSequenceQueue42.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence45 = charSequenceQueue42.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream46 = charSequenceQueue42.parallelStream();
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList50 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList50, charSequenceArray49);
        java.lang.CharSequence[] charSequenceArray54 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue55 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue55, charSequenceArray54);
        boolean boolean57 = charSequenceQueue55.isAtFullCapacity();
        boolean boolean58 = charSequenceList50.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue55);
        boolean boolean59 = charSequenceQueue55.isAtFullCapacity();
        int int60 = charSequenceQueue55.maxSize();
        boolean boolean61 = charSequenceQueue42.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue55);
        boolean boolean63 = charSequenceQueue42.offer((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = charSequenceQueue42.peek();
        boolean boolean65 = charSequenceQueue38.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue67 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean69 = charSequenceQueue67.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence70 = charSequenceQueue67.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream71 = charSequenceQueue67.parallelStream();
        java.lang.CharSequence[] charSequenceArray74 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList75 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList75, charSequenceArray74);
        java.lang.CharSequence[] charSequenceArray79 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue80 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue80, charSequenceArray79);
        boolean boolean82 = charSequenceQueue80.isAtFullCapacity();
        boolean boolean83 = charSequenceList75.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue80);
        boolean boolean84 = charSequenceQueue80.isAtFullCapacity();
        int int85 = charSequenceQueue80.maxSize();
        boolean boolean86 = charSequenceQueue67.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue80);
        boolean boolean88 = charSequenceQueue67.offer((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence89 = charSequenceQueue67.remove();
        java.lang.CharSequence charSequence90 = charSequenceQueue67.remove();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream91 = charSequenceQueue67.stream();
        boolean boolean93 = charSequenceQueue67.add((java.lang.CharSequence) "[, , , hi!]");
        boolean boolean94 = charSequenceQueue42.remove((java.lang.Object) boolean93);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertNotNull(charSequenceStream46);
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(charSequenceArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 32 + "'", int60 == 32);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "" + "'", charSequence64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "" + "'", charSequence70, "");
        org.junit.Assert.assertNotNull(charSequenceStream71);
        org.junit.Assert.assertNotNull(charSequenceArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(charSequenceArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 32 + "'", int85 == 32);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertEquals("'" + charSequence89 + "' != '" + "" + "'", charSequence89, "");
        org.junit.Assert.assertEquals("'" + charSequence90 + "' != '" + "" + "'", charSequence90, "");
        org.junit.Assert.assertNotNull(charSequenceStream91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.lang.CharSequence charSequence5 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean24 = charSequenceQueue22.offer((java.lang.CharSequence) "");
        boolean boolean26 = charSequenceQueue22.add((java.lang.CharSequence) "hi!");
        int int27 = charSequenceQueue22.maxSize();
        boolean boolean28 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean30 = charSequenceList8.remove((java.lang.Object) 0);
        boolean boolean31 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue32 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean33 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue32);
        boolean boolean35 = charSequenceQueue32.add((java.lang.CharSequence) "[, ]");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        int int38 = charSequenceQueue37.maxSize();
        java.util.Queue[] queueArray40 = new java.util.Queue[0];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray41 = (java.util.Queue<java.lang.CharSequence>[]) queueArray40;
        java.util.Queue[] queueArray43 = new java.util.Queue[0];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray44 = (java.util.Queue<java.lang.CharSequence>[]) queueArray43;
        java.util.Queue[] queueArray46 = new java.util.Queue[0];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray47 = (java.util.Queue<java.lang.CharSequence>[]) queueArray46;
        java.util.Queue[] queueArray49 = new java.util.Queue[0];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray50 = (java.util.Queue<java.lang.CharSequence>[]) queueArray49;
        java.util.Queue[] queueArray52 = new java.util.Queue[0];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray53 = (java.util.Queue<java.lang.CharSequence>[]) queueArray52;
        java.util.Queue[][] queueArray55 = new java.util.Queue[5][];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[][] charSequenceQueueArray56 = (java.util.Queue<java.lang.CharSequence>[][]) queueArray55;
        charSequenceQueueArray56[0] = charSequenceQueueArray41;
        charSequenceQueueArray56[1] = charSequenceQueueArray44;
        charSequenceQueueArray56[2] = queueArray46;
        charSequenceQueueArray56[3] = charSequenceQueueArray50;
        charSequenceQueueArray56[4] = charSequenceQueueArray53;
        java.util.Queue<java.lang.CharSequence>[][] charSequenceQueueArray67 = charSequenceQueue37.toArray(charSequenceQueueArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Queue<java.lang.CharSequence>[][] charSequenceQueueArray68 = charSequenceQueue32.toArray(charSequenceQueueArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(queueArray40);
        org.junit.Assert.assertNotNull(charSequenceQueueArray41);
        org.junit.Assert.assertNotNull(queueArray43);
        org.junit.Assert.assertNotNull(charSequenceQueueArray44);
        org.junit.Assert.assertNotNull(queueArray46);
        org.junit.Assert.assertNotNull(charSequenceQueueArray47);
        org.junit.Assert.assertNotNull(queueArray49);
        org.junit.Assert.assertNotNull(charSequenceQueueArray50);
        org.junit.Assert.assertNotNull(queueArray52);
        org.junit.Assert.assertNotNull(charSequenceQueueArray53);
        org.junit.Assert.assertNotNull(queueArray55);
        org.junit.Assert.assertNotNull(charSequenceQueueArray56);
        org.junit.Assert.assertNotNull(charSequenceQueueArray67);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        java.lang.Object[] objArray29 = charSequenceQueue1.toArray();
        java.lang.Object[] objArray30 = charSequenceQueue1.toArray();
        java.lang.CharSequence charSequence31 = charSequenceQueue1.element();
        java.lang.Class<?>[] wildcardClassArray32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?>[] wildcardClassArray33 = charSequenceQueue1.toArray(wildcardClassArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "" + "'", charSequence31, "");
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>(10);
        java.lang.String str2 = charSequenceQueue1.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue4 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean6 = charSequenceQueue4.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList16 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16, charSequenceArray15);
        java.lang.Object obj18 = null;
        boolean boolean19 = charSequenceList16.contains(obj18);
        java.lang.String str20 = charSequenceList16.toString();
        boolean boolean21 = charSequenceList9.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16);
        boolean boolean22 = charSequenceQueue4.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        boolean boolean30 = charSequenceQueue4.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25);
        boolean boolean31 = charSequenceQueue1.contains((java.lang.Object) charSequenceList25);
        java.lang.Class<?> wildcardClass32 = charSequenceList25.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!]" + "'", str20, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.lang.String str41 = charSequenceQueue38.toString();
        int int42 = charSequenceQueue38.maxSize();
        java.lang.CharSequence charSequence43 = charSequenceQueue38.poll();
        int int44 = charSequenceQueue38.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[hi!]" + "'", str41, "[hi!]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        boolean boolean14 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceQueue15.stream();
        java.lang.String str17 = charSequenceQueue15.toString();
        java.lang.CharSequence charSequence18 = charSequenceQueue15.element();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream21 = charSequenceQueue20.parallelStream();
        boolean boolean23 = charSequenceQueue20.contains((java.lang.Object) 1.0d);
        boolean boolean24 = charSequenceQueue20.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue26 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator27 = charSequenceQueue26.spliterator();
        java.lang.CharSequence charSequence28 = charSequenceQueue26.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        boolean boolean33 = charSequenceQueue26.contains((java.lang.Object) charSequenceQueue30);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor34 = charSequenceQueue26.iterator();
        boolean boolean35 = charSequenceQueue20.remove((java.lang.Object) charSequenceQueue26);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean39 = charSequenceQueue37.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray42 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue43 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43, charSequenceArray42);
        boolean boolean45 = charSequenceQueue43.isAtFullCapacity();
        boolean boolean46 = charSequenceQueue37.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator49 = charSequenceQueue48.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator50 = charSequenceQueue48.spliterator();
        boolean boolean52 = charSequenceQueue48.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = charSequenceQueue48.poll();
        boolean boolean54 = charSequenceQueue43.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        boolean boolean55 = charSequenceQueue26.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        java.lang.CharSequence charSequence56 = charSequenceQueue43.poll();
        java.lang.CharSequence charSequence58 = charSequenceQueue43.get((int) (short) 0);
        boolean boolean59 = charSequenceQueue15.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue61 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean62 = charSequenceQueue43.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue61);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue64 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean66 = charSequenceQueue64.offer((java.lang.CharSequence) "");
        java.lang.String str67 = charSequenceQueue64.toString();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor68 = charSequenceQueue64.iterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator69 = charSequenceQueue64.spliterator();
        boolean boolean70 = charSequenceQueue43.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue64);
        java.lang.CharSequence charSequence71 = charSequenceQueue64.peek();
        java.lang.CharSequence charSequence72 = charSequenceQueue64.remove();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceStream16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNotNull(charSequenceStream21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator27);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charSequenceArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator49);
        org.junit.Assert.assertNotNull(charSequenceSpliterator50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "" + "'", charSequence56, "");
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "" + "'", charSequence58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertNotNull(charSequenceItor68);
        org.junit.Assert.assertNotNull(charSequenceSpliterator69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "" + "'", charSequence71, "");
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "" + "'", charSequence72, "");
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = charSequenceQueue10.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream14 = charSequenceQueue10.parallelStream();
        boolean boolean16 = charSequenceQueue10.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator17 = charSequenceQueue10.spliterator();
        boolean boolean18 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10);
        java.lang.CharSequence charSequence19 = charSequenceQueue10.element();
        charSequenceQueue10.clear();
        java.lang.Object[] objArray21 = charSequenceQueue10.toArray();
        java.lang.Class<?> wildcardClass22 = objArray21.getClass();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
        org.junit.Assert.assertNotNull(charSequenceStream14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.lang.CharSequence charSequence2 = charSequenceQueue1.peek();
        java.lang.Object obj3 = null;
        boolean boolean4 = charSequenceQueue1.remove(obj3);
        org.junit.Assert.assertNull(charSequence2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        boolean boolean7 = charSequenceQueue3.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue3.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        charSequenceQueue3.clear();
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue3);
        java.lang.String str13 = charSequenceQueue3.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean17 = charSequenceQueue15.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray19 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList20 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList20, charSequenceArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = charSequenceList20.contains(obj22);
        java.lang.String str24 = charSequenceList20.toString();
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList27 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27, charSequenceArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = charSequenceList27.contains(obj29);
        java.lang.String str31 = charSequenceList27.toString();
        boolean boolean32 = charSequenceList20.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27);
        boolean boolean33 = charSequenceQueue15.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList20);
        java.lang.CharSequence[] charSequenceArray35 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList36 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList36, charSequenceArray35);
        java.lang.Object obj38 = null;
        boolean boolean39 = charSequenceList36.contains(obj38);
        java.lang.String str40 = charSequenceList36.toString();
        java.lang.CharSequence[] charSequenceArray42 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList43 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList43, charSequenceArray42);
        java.lang.Object obj45 = null;
        boolean boolean46 = charSequenceList43.contains(obj45);
        java.lang.String str47 = charSequenceList43.toString();
        boolean boolean48 = charSequenceList36.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList43);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean52 = charSequenceQueue50.offer((java.lang.CharSequence) "");
        boolean boolean54 = charSequenceQueue50.add((java.lang.CharSequence) "hi!");
        int int55 = charSequenceQueue50.maxSize();
        boolean boolean56 = charSequenceList36.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean57 = charSequenceList20.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean59 = charSequenceQueue50.remove((java.lang.Object) 100);
        int int60 = charSequenceQueue50.maxSize();
        boolean boolean62 = charSequenceQueue50.offer((java.lang.CharSequence) "");
        boolean boolean63 = charSequenceQueue3.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        java.lang.CharSequence[] charSequenceArray65 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList66 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList66, charSequenceArray65);
        java.lang.Object obj68 = null;
        boolean boolean69 = charSequenceList66.contains(obj68);
        java.lang.String str70 = charSequenceList66.toString();
        java.lang.CharSequence[] charSequenceArray72 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList73 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList73, charSequenceArray72);
        java.lang.Object obj75 = null;
        boolean boolean76 = charSequenceList73.contains(obj75);
        java.lang.String str77 = charSequenceList73.toString();
        boolean boolean78 = charSequenceList66.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList73);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue80 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean82 = charSequenceQueue80.offer((java.lang.CharSequence) "");
        boolean boolean84 = charSequenceQueue80.add((java.lang.CharSequence) "hi!");
        int int85 = charSequenceQueue80.maxSize();
        boolean boolean86 = charSequenceList66.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue80);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue88 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean90 = charSequenceQueue88.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence91 = charSequenceQueue88.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream92 = charSequenceQueue88.parallelStream();
        boolean boolean94 = charSequenceQueue88.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator95 = charSequenceQueue88.spliterator();
        java.lang.CharSequence charSequence96 = charSequenceQueue88.element();
        boolean boolean97 = charSequenceList66.remove((java.lang.Object) charSequenceQueue88);
        boolean boolean98 = charSequenceQueue88.isEmpty();
        boolean boolean99 = charSequenceQueue50.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue88);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[hi!]" + "'", str24, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[hi!]" + "'", str31, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[hi!]" + "'", str40, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[hi!]" + "'", str47, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(charSequenceArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[hi!]" + "'", str70, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[hi!]" + "'", str77, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "" + "'", charSequence91, "");
        org.junit.Assert.assertNotNull(charSequenceStream92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator95);
        org.junit.Assert.assertEquals("'" + charSequence96 + "' != '" + "" + "'", charSequence96, "");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        int int11 = charSequenceQueue7.maxSize();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue7.stream();
        java.lang.String str13 = charSequenceQueue7.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceQueue15.parallelStream();
        boolean boolean18 = charSequenceQueue15.contains((java.lang.Object) 1.0d);
        boolean boolean19 = charSequenceQueue15.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator22 = charSequenceQueue21.spliterator();
        java.lang.CharSequence charSequence23 = charSequenceQueue21.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean27 = charSequenceQueue25.offer((java.lang.CharSequence) "");
        boolean boolean28 = charSequenceQueue21.contains((java.lang.Object) charSequenceQueue25);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = charSequenceQueue30.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream34 = charSequenceQueue30.parallelStream();
        boolean boolean36 = charSequenceQueue30.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue30.spliterator();
        boolean boolean38 = charSequenceQueue21.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        java.lang.CharSequence charSequence39 = charSequenceQueue30.poll();
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue42 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42, charSequenceArray41);
        int int44 = charSequenceQueue42.maxSize();
        boolean boolean45 = charSequenceQueue42.isFull();
        java.lang.String str46 = charSequenceQueue42.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean50 = charSequenceQueue48.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray53 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue54 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54, charSequenceArray53);
        boolean boolean56 = charSequenceQueue54.isAtFullCapacity();
        boolean boolean57 = charSequenceQueue48.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue59 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator60 = charSequenceQueue59.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator61 = charSequenceQueue59.spliterator();
        boolean boolean63 = charSequenceQueue59.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence64 = charSequenceQueue59.poll();
        boolean boolean65 = charSequenceQueue54.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue59);
        java.util.Queue[] queueArray67 = new java.util.Queue[2];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray68 = (java.util.Queue<java.lang.CharSequence>[]) queueArray67;
        charSequenceQueueArray68[0] = charSequenceQueue42;
        charSequenceQueueArray68[1] = charSequenceQueue59;
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray73 = charSequenceQueue30.toArray(charSequenceQueueArray68);
        java.lang.Iterable<java.lang.CharSequence>[] charSequenceIterableArray74 = charSequenceQueue15.toArray((java.lang.Iterable<java.lang.CharSequence>[]) charSequenceQueueArray73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<java.lang.CharSequence>[] charSequenceIterableArray75 = charSequenceQueue7.toArray(charSequenceIterableArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[, ]" + "'", str13, "[, ]");
        org.junit.Assert.assertNotNull(charSequenceStream16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator22);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertNotNull(charSequenceStream34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(charSequenceArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator60);
        org.junit.Assert.assertNotNull(charSequenceSpliterator61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "" + "'", charSequence64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(queueArray67);
        org.junit.Assert.assertNotNull(charSequenceQueueArray68);
        org.junit.Assert.assertNotNull(charSequenceQueueArray73);
        org.junit.Assert.assertNotNull(charSequenceIterableArray74);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = charSequenceQueue10.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream14 = charSequenceQueue10.parallelStream();
        boolean boolean16 = charSequenceQueue10.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator17 = charSequenceQueue10.spliterator();
        boolean boolean18 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10);
        java.lang.CharSequence charSequence19 = charSequenceQueue10.element();
        boolean boolean21 = charSequenceQueue10.add((java.lang.CharSequence) "[[hi!], [hi!]]");
        java.lang.Object[] objArray22 = charSequenceQueue10.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence24 = charSequenceQueue10.get((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (97) is outside the available range [0, 2)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
        org.junit.Assert.assertNotNull(charSequenceStream14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[, [[hi!], [hi!]]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[, [[hi!], [hi!]]]");
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.String str6 = charSequenceQueue1.toString();
        java.lang.Object[] objArray7 = charSequenceQueue1.toArray();
        boolean boolean8 = charSequenceQueue1.isAtFullCapacity();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Cloneable> cloneableQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Cloneable>((int) (short) 10);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        java.lang.CharSequence charSequence9 = charSequenceQueue1.poll();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator12 = charSequenceQueue11.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue11.spliterator();
        boolean boolean15 = charSequenceQueue11.add((java.lang.CharSequence) "");
        boolean boolean16 = charSequenceQueue11.isAtFullCapacity();
        int int17 = charSequenceQueue11.maxSize();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator18 = charSequenceQueue11.spliterator();
        boolean boolean19 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        boolean boolean20 = charSequenceQueue1.isEmpty();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(charSequenceSpliterator12);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(charSequenceSpliterator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.String str4 = charSequenceQueue1.toString();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor5 = charSequenceQueue1.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue8.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence11 = charSequenceQueue8.peek();
        boolean boolean12 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.lang.Class<?> wildcardClass13 = charSequenceQueue8.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(charSequenceItor5);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        boolean boolean14 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceQueue15.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream17 = charSequenceQueue15.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator20 = charSequenceQueue19.spliterator();
        java.lang.CharSequence charSequence21 = charSequenceQueue19.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean25 = charSequenceQueue23.offer((java.lang.CharSequence) "");
        boolean boolean26 = charSequenceQueue19.contains((java.lang.Object) charSequenceQueue23);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor27 = charSequenceQueue19.iterator();
        boolean boolean28 = charSequenceQueue15.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        java.lang.CharSequence charSequence29 = charSequenceQueue15.poll();
        java.lang.Class<?> wildcardClass30 = charSequenceQueue15.getClass();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceStream16);
        org.junit.Assert.assertNotNull(charSequenceStream17);
        org.junit.Assert.assertNotNull(charSequenceSpliterator20);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charSequenceItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        charSequenceQueue30.clear();
        boolean boolean35 = charSequenceQueue30.remove((java.lang.Object) (-1.0d));
        java.lang.CharSequence[] charSequenceArray38 = new java.lang.CharSequence[] { "[hi!]", "[hi!]" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList39 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39, charSequenceArray38);
        boolean boolean41 = charSequenceQueue30.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        boolean boolean42 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        java.lang.CharSequence charSequence43 = charSequenceQueue1.poll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charSequenceArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "" + "'", charSequence43, "");
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.lang.CharSequence charSequence12 = charSequenceQueue8.poll();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream13 = charSequenceQueue8.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence15 = charSequenceQueue8.get(52);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (52) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(charSequenceStream13);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.lang.CharSequence charSequence41 = charSequenceQueue38.element();
        java.lang.CharSequence charSequence42 = charSequenceQueue38.peek();
        java.lang.String str43 = charSequenceQueue38.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream46 = charSequenceQueue45.parallelStream();
        java.lang.String str47 = charSequenceQueue45.toString();
        boolean boolean49 = charSequenceQueue45.contains((java.lang.Object) 10.0d);
        boolean boolean50 = charSequenceQueue38.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence52 = charSequenceQueue45.get((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (97) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[hi!]" + "'", str43, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceStream46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        charSequenceQueue30.clear();
        boolean boolean35 = charSequenceQueue30.remove((java.lang.Object) (-1.0d));
        java.lang.CharSequence[] charSequenceArray38 = new java.lang.CharSequence[] { "[hi!]", "[hi!]" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList39 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39, charSequenceArray38);
        boolean boolean41 = charSequenceQueue30.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        boolean boolean42 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        java.lang.String str43 = charSequenceList39.toString();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream44 = charSequenceList39.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream45 = charSequenceList39.stream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue47 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.lang.CharSequence charSequence48 = charSequenceQueue47.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean52 = charSequenceQueue50.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = charSequenceQueue50.element();
        java.lang.CharSequence[] charSequenceArray55 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList56 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList56, charSequenceArray55);
        java.lang.CharSequence[] charSequenceArray60 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList61 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList61, charSequenceArray60);
        java.lang.CharSequence[] charSequenceArray65 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue66 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue66, charSequenceArray65);
        boolean boolean68 = charSequenceQueue66.isAtFullCapacity();
        boolean boolean69 = charSequenceList61.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue66);
        boolean boolean70 = charSequenceList56.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList61);
        boolean boolean71 = charSequenceQueue50.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList61);
        java.lang.CharSequence[] charSequenceArray73 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList74 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList74, charSequenceArray73);
        java.lang.Object obj76 = null;
        boolean boolean77 = charSequenceList74.contains(obj76);
        java.lang.String str78 = charSequenceList74.toString();
        java.lang.CharSequence[] charSequenceArray80 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList81 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList81, charSequenceArray80);
        java.lang.Object obj83 = null;
        boolean boolean84 = charSequenceList81.contains(obj83);
        java.lang.String str85 = charSequenceList81.toString();
        boolean boolean86 = charSequenceList74.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList81);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue87 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList81);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream88 = charSequenceQueue87.stream();
        boolean boolean89 = charSequenceQueue50.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue87);
        java.lang.CharSequence charSequence90 = charSequenceQueue87.element();
        java.lang.CharSequence charSequence91 = charSequenceQueue87.peek();
        java.lang.String str92 = charSequenceQueue87.toString();
        boolean boolean93 = charSequenceQueue47.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue87);
        boolean boolean94 = charSequenceList39.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charSequenceArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[[hi!], [hi!]]" + "'", str43, "[[hi!], [hi!]]");
        org.junit.Assert.assertNotNull(charSequenceStream44);
        org.junit.Assert.assertNotNull(charSequenceStream45);
        org.junit.Assert.assertNull(charSequence48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertNotNull(charSequenceArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(charSequenceArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(charSequenceArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(charSequenceArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[hi!]" + "'", str78, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[hi!]" + "'", str85, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(charSequenceStream88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + charSequence90 + "' != '" + "hi!" + "'", charSequence90, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "hi!" + "'", charSequence91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[hi!]" + "'", str92, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        int int9 = charSequenceQueue7.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray14 = charSequenceQueue11.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue11.iterator();
        boolean boolean16 = charSequenceQueue7.remove((java.lang.Object) charSequenceQueue11);
        java.lang.CharSequence charSequence17 = charSequenceQueue11.poll();
        boolean boolean18 = charSequenceList2.contains((java.lang.Object) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean22 = charSequenceQueue20.offer((java.lang.CharSequence) "");
        charSequenceQueue20.clear();
        java.lang.CharSequence charSequence24 = charSequenceQueue20.poll();
        boolean boolean25 = charSequenceQueue11.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence26 = charSequenceQueue20.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        boolean boolean20 = charSequenceQueue7.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream23 = charSequenceQueue22.parallelStream();
        boolean boolean24 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor25 = charSequenceQueue22.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator28 = charSequenceQueue27.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator29 = charSequenceQueue27.spliterator();
        boolean boolean31 = charSequenceQueue27.add((java.lang.CharSequence) "");
        java.lang.String str32 = charSequenceQueue27.toString();
        java.lang.CharSequence charSequence33 = charSequenceQueue27.element();
        boolean boolean34 = charSequenceQueue22.remove((java.lang.Object) charSequenceQueue27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence36 = charSequenceQueue22.get((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charSequenceStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charSequenceItor25);
        org.junit.Assert.assertNotNull(charSequenceSpliterator28);
        org.junit.Assert.assertNotNull(charSequenceSpliterator29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        int int9 = charSequenceQueue7.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray14 = charSequenceQueue11.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue11.iterator();
        boolean boolean16 = charSequenceQueue7.remove((java.lang.Object) charSequenceQueue11);
        java.lang.CharSequence charSequence17 = charSequenceQueue11.poll();
        boolean boolean18 = charSequenceList2.contains((java.lang.Object) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean22 = charSequenceQueue20.offer((java.lang.CharSequence) "");
        charSequenceQueue20.clear();
        java.lang.CharSequence charSequence24 = charSequenceQueue20.poll();
        boolean boolean25 = charSequenceQueue11.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean29 = charSequenceQueue27.offer((java.lang.CharSequence) "");
        boolean boolean31 = charSequenceQueue27.add((java.lang.CharSequence) "hi!");
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream32 = charSequenceQueue27.stream();
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = charSequenceList42.contains(obj44);
        java.lang.String str46 = charSequenceList42.toString();
        boolean boolean47 = charSequenceList35.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue49 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean51 = charSequenceQueue49.offer((java.lang.CharSequence) "");
        boolean boolean53 = charSequenceQueue49.add((java.lang.CharSequence) "hi!");
        int int54 = charSequenceQueue49.maxSize();
        boolean boolean55 = charSequenceList35.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue49);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue57 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean59 = charSequenceQueue57.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = charSequenceQueue57.peek();
        boolean boolean62 = charSequenceQueue57.add((java.lang.CharSequence) "");
        boolean boolean63 = charSequenceList35.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue57);
        boolean boolean64 = charSequenceQueue27.contains((java.lang.Object) charSequenceQueue57);
        java.lang.CharSequence[] charSequenceArray67 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList68 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList68, charSequenceArray67);
        java.lang.CharSequence[] charSequenceArray72 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue73 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue73, charSequenceArray72);
        boolean boolean75 = charSequenceQueue73.isAtFullCapacity();
        boolean boolean76 = charSequenceList68.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue73);
        java.lang.CharSequence charSequence77 = charSequenceQueue73.poll();
        boolean boolean78 = charSequenceQueue73.isAtFullCapacity();
        java.lang.CharSequence charSequence79 = charSequenceQueue73.element();
        charSequenceQueue73.clear();
        boolean boolean81 = charSequenceQueue27.remove((java.lang.Object) charSequenceQueue73);
        boolean boolean82 = charSequenceQueue11.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue73);
        java.lang.CharSequence[] charSequenceArray85 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList86 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList86, charSequenceArray85);
        java.lang.CharSequence[] charSequenceArray90 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue91 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue91, charSequenceArray90);
        boolean boolean93 = charSequenceQueue91.isAtFullCapacity();
        boolean boolean94 = charSequenceList86.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue91);
        java.lang.CharSequence charSequence95 = charSequenceQueue91.poll();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream96 = charSequenceQueue91.parallelStream();
        boolean boolean97 = charSequenceQueue91.isEmpty();
        boolean boolean98 = charSequenceQueue73.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue91);
        boolean boolean99 = charSequenceQueue91.isEmpty();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charSequenceStream32);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "" + "'", charSequence60, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charSequenceArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(charSequenceArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "" + "'", charSequence77, "");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + charSequence79 + "' != '" + "" + "'", charSequence79, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(charSequenceArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(charSequenceArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "" + "'", charSequence95, "");
        org.junit.Assert.assertNotNull(charSequenceStream96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        boolean boolean8 = charSequenceQueue1.add((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream10 = charSequenceQueue1.stream();
        charSequenceQueue1.clear();
        boolean boolean12 = charSequenceQueue1.isEmpty();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceStream10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray10 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11, charSequenceArray10);
        boolean boolean13 = charSequenceQueue11.isAtFullCapacity();
        boolean boolean14 = charSequenceQueue5.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        boolean boolean15 = charSequenceList2.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue5);
        java.lang.CharSequence[] charSequenceArray17 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList18 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18, charSequenceArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = charSequenceList18.contains(obj20);
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList24 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList24, charSequenceArray23);
        java.lang.Object obj26 = null;
        boolean boolean27 = charSequenceList24.contains(obj26);
        java.lang.String str28 = charSequenceList24.toString();
        java.lang.CharSequence[] charSequenceArray30 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList31 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList31, charSequenceArray30);
        java.lang.Object obj33 = null;
        boolean boolean34 = charSequenceList31.contains(obj33);
        java.lang.String str35 = charSequenceList31.toString();
        boolean boolean36 = charSequenceList24.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList31);
        java.lang.CharSequence[] charSequenceArray39 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList40 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList40, charSequenceArray39);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45, charSequenceArray44);
        boolean boolean47 = charSequenceQueue45.isAtFullCapacity();
        boolean boolean48 = charSequenceList40.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        boolean boolean49 = charSequenceQueue45.isAtFullCapacity();
        boolean boolean50 = charSequenceQueue45.isAtFullCapacity();
        boolean boolean51 = charSequenceList31.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        java.lang.CharSequence[] charSequenceArray53 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList54 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList54, charSequenceArray53);
        java.lang.Object obj56 = null;
        boolean boolean57 = charSequenceList54.contains(obj56);
        java.lang.CharSequence[] charSequenceArray59 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList60 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList60, charSequenceArray59);
        java.lang.Object obj62 = null;
        boolean boolean63 = charSequenceList60.contains(obj62);
        java.lang.String str64 = charSequenceList60.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue66 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean67 = charSequenceList60.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue66);
        boolean boolean68 = charSequenceList54.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue66);
        java.util.ArrayList[] arrayListArray70 = new java.util.ArrayList[3];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.CharSequence>[] charSequenceListArray71 = (java.util.ArrayList<java.lang.CharSequence>[]) arrayListArray70;
        charSequenceListArray71[0] = charSequenceList18;
        charSequenceListArray71[1] = charSequenceList31;
        charSequenceListArray71[2] = charSequenceList54;
        // The following exception was thrown during execution in test generation
        try {
            java.util.ArrayList<java.lang.CharSequence>[] charSequenceListArray78 = charSequenceList2.toArray(charSequenceListArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(charSequenceArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charSequenceArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[hi!]" + "'", str28, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[hi!]" + "'", str35, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charSequenceArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charSequenceArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charSequenceArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[hi!]" + "'", str64, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(arrayListArray70);
        org.junit.Assert.assertNotNull(charSequenceListArray71);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>(10);
        java.lang.String str2 = charSequenceQueue1.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue4 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean6 = charSequenceQueue4.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList16 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16, charSequenceArray15);
        java.lang.Object obj18 = null;
        boolean boolean19 = charSequenceList16.contains(obj18);
        java.lang.String str20 = charSequenceList16.toString();
        boolean boolean21 = charSequenceList9.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16);
        boolean boolean22 = charSequenceQueue4.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        boolean boolean30 = charSequenceQueue4.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25);
        boolean boolean31 = charSequenceQueue1.contains((java.lang.Object) charSequenceList25);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue32 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList25);
        java.lang.Object[] objArray33 = charSequenceQueue32.toArray();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!]" + "'", str20, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[hi!]");
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean6 = charSequenceQueue1.offer((java.lang.CharSequence) "[hi!]");
        java.lang.String str7 = charSequenceQueue1.toString();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue1.parallelStream();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[hi!]]" + "'", str7, "[[hi!]]");
        org.junit.Assert.assertNotNull(charSequenceStream8);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = charSequenceList7.contains(obj9);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceList13.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue19);
        boolean boolean24 = charSequenceQueue1.add((java.lang.CharSequence) "");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList28 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList28, charSequenceArray27);
        java.lang.Object obj30 = null;
        boolean boolean31 = charSequenceList28.contains(obj30);
        java.lang.CharSequence[] charSequenceArray33 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList34 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34, charSequenceArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = charSequenceList34.contains(obj36);
        java.lang.String str38 = charSequenceList34.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue40 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean41 = charSequenceList34.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40);
        boolean boolean42 = charSequenceList28.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue44 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean45 = charSequenceList28.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue44);
        java.lang.CharSequence[] charSequenceArray47 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList48 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48, charSequenceArray47);
        java.lang.Object obj50 = null;
        boolean boolean51 = charSequenceList48.contains(obj50);
        java.lang.CharSequence[] charSequenceArray53 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList54 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList54, charSequenceArray53);
        java.lang.Object obj56 = null;
        boolean boolean57 = charSequenceList54.contains(obj56);
        java.lang.String str58 = charSequenceList54.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue60 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean61 = charSequenceList54.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue60);
        boolean boolean62 = charSequenceList48.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue60);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue64 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean65 = charSequenceList48.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue64);
        boolean boolean66 = charSequenceQueue44.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue64);
        boolean boolean67 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue44);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>> charSequenceBaseStreamQueue68 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>>();
        boolean boolean69 = charSequenceQueue1.contains((java.lang.Object) charSequenceBaseStreamQueue68);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charSequenceArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[hi!]" + "'", str38, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charSequenceArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charSequenceArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[hi!]" + "'", str58, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        boolean boolean6 = charSequenceQueue1.remove((java.lang.Object) (-1.0d));
        int int7 = charSequenceQueue1.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean11 = charSequenceQueue9.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence12 = charSequenceQueue9.peek();
        boolean boolean13 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceQueue15.parallelStream();
        boolean boolean18 = charSequenceQueue15.contains((java.lang.Object) 1.0d);
        boolean boolean19 = charSequenceQueue15.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator22 = charSequenceQueue21.spliterator();
        java.lang.CharSequence charSequence23 = charSequenceQueue21.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean27 = charSequenceQueue25.offer((java.lang.CharSequence) "");
        boolean boolean28 = charSequenceQueue21.contains((java.lang.Object) charSequenceQueue25);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = charSequenceQueue30.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream34 = charSequenceQueue30.parallelStream();
        boolean boolean36 = charSequenceQueue30.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue30.spliterator();
        boolean boolean38 = charSequenceQueue21.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        java.lang.CharSequence charSequence39 = charSequenceQueue30.poll();
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue42 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42, charSequenceArray41);
        int int44 = charSequenceQueue42.maxSize();
        boolean boolean45 = charSequenceQueue42.isFull();
        java.lang.String str46 = charSequenceQueue42.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean50 = charSequenceQueue48.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray53 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue54 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54, charSequenceArray53);
        boolean boolean56 = charSequenceQueue54.isAtFullCapacity();
        boolean boolean57 = charSequenceQueue48.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue59 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator60 = charSequenceQueue59.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator61 = charSequenceQueue59.spliterator();
        boolean boolean63 = charSequenceQueue59.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence64 = charSequenceQueue59.poll();
        boolean boolean65 = charSequenceQueue54.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue59);
        java.util.Queue[] queueArray67 = new java.util.Queue[2];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray68 = (java.util.Queue<java.lang.CharSequence>[]) queueArray67;
        charSequenceQueueArray68[0] = charSequenceQueue42;
        charSequenceQueueArray68[1] = charSequenceQueue59;
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray73 = charSequenceQueue30.toArray(charSequenceQueueArray68);
        java.lang.Iterable<java.lang.CharSequence>[] charSequenceIterableArray74 = charSequenceQueue15.toArray((java.lang.Iterable<java.lang.CharSequence>[]) charSequenceQueueArray73);
        java.lang.Iterable<java.lang.CharSequence>[] charSequenceIterableArray75 = charSequenceQueue1.toArray(charSequenceIterableArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence77 = charSequenceQueue1.get(3);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (3) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charSequenceStream16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator22);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertNotNull(charSequenceStream34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(charSequenceArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator60);
        org.junit.Assert.assertNotNull(charSequenceSpliterator61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "" + "'", charSequence64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(queueArray67);
        org.junit.Assert.assertNotNull(charSequenceQueueArray68);
        org.junit.Assert.assertNotNull(charSequenceQueueArray73);
        org.junit.Assert.assertNotNull(charSequenceIterableArray74);
        org.junit.Assert.assertNotNull(charSequenceIterableArray75);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Iterable<java.lang.CharSequence>[]> charSequenceIterableArrayQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Iterable<java.lang.CharSequence>[]>((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30, charSequenceArray29);
        boolean boolean32 = charSequenceQueue30.isAtFullCapacity();
        boolean boolean33 = charSequenceQueue24.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator36 = charSequenceQueue35.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue35.spliterator();
        boolean boolean39 = charSequenceQueue35.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = charSequenceQueue35.poll();
        boolean boolean41 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList45 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList45, charSequenceArray44);
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50, charSequenceArray49);
        boolean boolean52 = charSequenceQueue50.isAtFullCapacity();
        boolean boolean53 = charSequenceList45.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean54 = charSequenceQueue50.isAtFullCapacity();
        int int55 = charSequenceQueue50.maxSize();
        boolean boolean56 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean57 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean59 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = charSequenceQueue1.remove();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence61 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator36);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        boolean boolean10 = charSequenceQueue7.contains((java.lang.Object) 1.0d);
        boolean boolean11 = charSequenceQueue7.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue7.stream();
        boolean boolean13 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence15 = charSequenceQueue1.get(3);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (3) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean2 = charSequenceQueue1.isAtFullCapacity();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        charSequenceQueue1.clear();
        java.lang.CharSequence charSequence7 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue1.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence9 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNotNull(charSequenceStream8);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor10 = charSequenceQueue8.iterator();
        charSequenceQueue8.clear();
        java.lang.CharSequence charSequence12 = charSequenceQueue8.poll();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence13 = charSequenceQueue8.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceItor10);
        org.junit.Assert.assertNull(charSequence12);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        boolean boolean15 = charSequenceQueue8.add((java.lang.CharSequence) "[, ]");
        java.util.Iterator<java.lang.CharSequence> charSequenceItor16 = charSequenceQueue8.iterator();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charSequenceItor16);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.poll();
        int int5 = charSequenceQueue1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        java.lang.CharSequence charSequence4 = charSequenceQueue1.poll();
        boolean boolean5 = charSequenceQueue1.isFull();
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.parallelStream();
        boolean boolean9 = charSequenceQueue1.add((java.lang.CharSequence) "[[hi!]]");
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(charSequenceStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.lang.String str41 = charSequenceQueue38.toString();
        int int42 = charSequenceQueue38.maxSize();
        java.lang.CharSequence charSequence43 = charSequenceQueue38.poll();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence44 = charSequenceQueue38.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[hi!]" + "'", str41, "[hi!]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        java.lang.CharSequence[] charSequenceArray5 = new java.lang.CharSequence[] { "[, ]", "hi!", "[, ]", "[]", "[, ]" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue6, charSequenceArray5);
        java.lang.CharSequence charSequence8 = charSequenceQueue6.remove();
        charSequenceQueue6.clear();
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.CharSequence[] charSequenceArray17 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue18, charSequenceArray17);
        boolean boolean20 = charSequenceQueue18.isAtFullCapacity();
        boolean boolean21 = charSequenceList13.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue18);
        java.lang.CharSequence charSequence22 = charSequenceQueue18.poll();
        boolean boolean23 = charSequenceQueue18.isAtFullCapacity();
        java.lang.CharSequence charSequence24 = charSequenceQueue18.element();
        int int25 = charSequenceQueue18.size();
        boolean boolean26 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence28 = charSequenceQueue6.get((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "[, ]" + "'", charSequence8, "[, ]");
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(charSequenceArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "" + "'", charSequence24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        boolean boolean14 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        java.lang.Object[] objArray16 = charSequenceList9.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean20 = charSequenceQueue18.offer((java.lang.CharSequence) "");
        boolean boolean22 = charSequenceQueue18.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean25 = charSequenceQueue18.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        boolean boolean26 = charSequenceQueue18.isEmpty();
        boolean boolean28 = charSequenceQueue18.remove((java.lang.Object) 10.0d);
        charSequenceQueue18.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        int int32 = charSequenceQueue31.maxSize();
        boolean boolean33 = charSequenceQueue18.remove((java.lang.Object) charSequenceQueue31);
        boolean boolean34 = charSequenceList9.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue18);
        boolean boolean36 = charSequenceQueue18.offer((java.lang.CharSequence) "[hi!, hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.lang.String str41 = charSequenceQueue38.toString();
        int int42 = charSequenceQueue38.size();
        java.lang.Object[] objArray43 = charSequenceQueue38.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream46 = charSequenceQueue45.parallelStream();
        boolean boolean48 = charSequenceQueue45.contains((java.lang.Object) 1.0d);
        boolean boolean49 = charSequenceQueue45.isFull();
        boolean boolean50 = charSequenceQueue45.isFull();
        int int51 = charSequenceQueue45.maxSize();
        int int52 = charSequenceQueue45.maxSize();
        java.lang.CharSequence charSequence53 = charSequenceQueue45.peek();
        boolean boolean54 = charSequenceQueue38.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        boolean boolean56 = charSequenceQueue38.offer((java.lang.CharSequence) "[, hi!]");
        java.lang.CharSequence charSequence57 = charSequenceQueue38.remove();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[hi!]" + "'", str41, "[hi!]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceStream46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "[, hi!]" + "'", charSequence57, "[, hi!]");
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.AutoCloseable> autoCloseableQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.AutoCloseable>((int) (byte) 10);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean18 = charSequenceQueue16.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = charSequenceQueue16.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream20 = charSequenceQueue16.parallelStream();
        boolean boolean22 = charSequenceQueue16.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator23 = charSequenceQueue16.spliterator();
        boolean boolean24 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.lang.CharSequence charSequence25 = charSequenceQueue16.poll();
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue28 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue28, charSequenceArray27);
        int int30 = charSequenceQueue28.maxSize();
        boolean boolean31 = charSequenceQueue28.isFull();
        java.lang.String str32 = charSequenceQueue28.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean36 = charSequenceQueue34.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray39 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue40 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40, charSequenceArray39);
        boolean boolean42 = charSequenceQueue40.isAtFullCapacity();
        boolean boolean43 = charSequenceQueue34.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator46 = charSequenceQueue45.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator47 = charSequenceQueue45.spliterator();
        boolean boolean49 = charSequenceQueue45.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence50 = charSequenceQueue45.poll();
        boolean boolean51 = charSequenceQueue40.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        java.util.Queue[] queueArray53 = new java.util.Queue[2];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray54 = (java.util.Queue<java.lang.CharSequence>[]) queueArray53;
        charSequenceQueueArray54[0] = charSequenceQueue28;
        charSequenceQueueArray54[1] = charSequenceQueue45;
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray59 = charSequenceQueue16.toArray(charSequenceQueueArray54);
        java.lang.Iterable<java.lang.CharSequence>[] charSequenceIterableArray60 = charSequenceQueue1.toArray((java.lang.Iterable<java.lang.CharSequence>[]) charSequenceQueueArray59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence61 = charSequenceQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertNotNull(charSequenceStream20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "" + "'", charSequence25, "");
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(charSequenceArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator46);
        org.junit.Assert.assertNotNull(charSequenceSpliterator47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "" + "'", charSequence50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(queueArray53);
        org.junit.Assert.assertNotNull(charSequenceQueueArray54);
        org.junit.Assert.assertNotNull(charSequenceQueueArray59);
        org.junit.Assert.assertNotNull(charSequenceIterableArray60);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        boolean boolean4 = charSequenceQueue1.isEmpty();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12, charSequenceArray11);
        boolean boolean14 = charSequenceQueue12.isAtFullCapacity();
        boolean boolean15 = charSequenceQueue6.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor16 = charSequenceQueue12.iterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator17 = charSequenceQueue12.spliterator();
        charSequenceQueue12.clear();
        int int19 = charSequenceQueue12.maxSize();
        boolean boolean20 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.Class<?> wildcardClass21 = charSequenceQueue12.getClass();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charSequenceItor16);
        org.junit.Assert.assertNotNull(charSequenceSpliterator17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        boolean boolean7 = charSequenceQueue3.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue3.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        charSequenceQueue3.clear();
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue3);
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "", "[hi!]", "", "hi!" };
        java.lang.Comparable<java.lang.String>[] strComparableArray24 = charSequenceList15.toArray((java.lang.Comparable<java.lang.String>[]) strArray23);
        java.lang.Comparable<java.lang.String>[] strComparableArray25 = charSequenceQueue3.toArray((java.lang.Comparable<java.lang.String>[]) strArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence26 = charSequenceQueue3.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strComparableArray24);
        org.junit.Assert.assertNotNull(strComparableArray25);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceQueue7.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.Object obj14 = null;
        boolean boolean15 = charSequenceList12.contains(obj14);
        java.lang.String str16 = charSequenceList12.toString();
        java.lang.CharSequence[] charSequenceArray18 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList19 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList19, charSequenceArray18);
        java.lang.Object obj21 = null;
        boolean boolean22 = charSequenceList19.contains(obj21);
        java.lang.String str23 = charSequenceList19.toString();
        boolean boolean24 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList19);
        boolean boolean25 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean26 = charSequenceQueue5.remove((java.lang.Object) charSequenceQueue7);
        boolean boolean27 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean28 = charSequenceQueue7.isFull();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor29 = charSequenceQueue7.iterator();
        java.lang.CharSequence charSequence30 = charSequenceQueue7.peek();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence32 = charSequenceQueue7.get(32);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (32) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[hi!]" + "'", str16, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[hi!]" + "'", str23, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charSequenceItor29);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        charSequenceQueue8.clear();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator11 = charSequenceQueue8.spliterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue13 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean15 = charSequenceQueue13.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray16 = charSequenceQueue13.toArray();
        boolean boolean17 = charSequenceQueue8.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue13);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean21 = charSequenceQueue19.offer((java.lang.CharSequence) "");
        java.lang.String str22 = charSequenceQueue19.toString();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor23 = charSequenceQueue19.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream24 = charSequenceQueue19.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue26 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean28 = charSequenceQueue26.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = charSequenceQueue26.peek();
        boolean boolean30 = charSequenceQueue19.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue26);
        boolean boolean31 = charSequenceQueue8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue26);
        java.lang.Comparable[][][] comparableArray33 = new java.lang.Comparable[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][][] strComparableArray34 = (java.lang.Comparable<java.lang.String>[][][]) comparableArray33;
        java.lang.Comparable[][][] comparableArray36 = new java.lang.Comparable[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][][] strComparableArray37 = (java.lang.Comparable<java.lang.String>[][][]) comparableArray36;
        java.lang.Comparable[][][] comparableArray39 = new java.lang.Comparable[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][][] strComparableArray40 = (java.lang.Comparable<java.lang.String>[][][]) comparableArray39;
        java.lang.Comparable[][][] comparableArray42 = new java.lang.Comparable[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][][] strComparableArray43 = (java.lang.Comparable<java.lang.String>[][][]) comparableArray42;
        java.lang.Comparable[][][][] comparableArray45 = new java.lang.Comparable[4][][][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][][][] strComparableArray46 = (java.lang.Comparable<java.lang.String>[][][][]) comparableArray45;
        strComparableArray46[0] = strComparableArray34;
        strComparableArray46[1] = strComparableArray37;
        strComparableArray46[2] = strComparableArray40;
        strComparableArray46[3] = strComparableArray43;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable<java.lang.String>[][][][] strComparableArray55 = charSequenceQueue26.toArray(strComparableArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(charSequenceItor23);
        org.junit.Assert.assertNotNull(charSequenceStream24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "" + "'", charSequence29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(comparableArray33);
        org.junit.Assert.assertNotNull(strComparableArray34);
        org.junit.Assert.assertNotNull(comparableArray36);
        org.junit.Assert.assertNotNull(strComparableArray37);
        org.junit.Assert.assertNotNull(comparableArray39);
        org.junit.Assert.assertNotNull(strComparableArray40);
        org.junit.Assert.assertNotNull(comparableArray42);
        org.junit.Assert.assertNotNull(strComparableArray43);
        org.junit.Assert.assertNotNull(comparableArray45);
        org.junit.Assert.assertNotNull(strComparableArray46);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.GenericDeclaration> genericDeclarationQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.GenericDeclaration>((int) '#');
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean18 = charSequenceQueue16.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = charSequenceQueue16.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream20 = charSequenceQueue16.parallelStream();
        boolean boolean22 = charSequenceQueue16.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator23 = charSequenceQueue16.spliterator();
        boolean boolean24 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.lang.CharSequence charSequence25 = charSequenceQueue16.poll();
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue28 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue28, charSequenceArray27);
        int int30 = charSequenceQueue28.maxSize();
        boolean boolean31 = charSequenceQueue28.isFull();
        java.lang.String str32 = charSequenceQueue28.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean36 = charSequenceQueue34.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray39 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue40 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40, charSequenceArray39);
        boolean boolean42 = charSequenceQueue40.isAtFullCapacity();
        boolean boolean43 = charSequenceQueue34.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator46 = charSequenceQueue45.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator47 = charSequenceQueue45.spliterator();
        boolean boolean49 = charSequenceQueue45.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence50 = charSequenceQueue45.poll();
        boolean boolean51 = charSequenceQueue40.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        java.util.Queue[] queueArray53 = new java.util.Queue[2];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray54 = (java.util.Queue<java.lang.CharSequence>[]) queueArray53;
        charSequenceQueueArray54[0] = charSequenceQueue28;
        charSequenceQueueArray54[1] = charSequenceQueue45;
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray59 = charSequenceQueue16.toArray(charSequenceQueueArray54);
        java.lang.Iterable<java.lang.CharSequence>[] charSequenceIterableArray60 = charSequenceQueue1.toArray((java.lang.Iterable<java.lang.CharSequence>[]) charSequenceQueueArray59);
        java.lang.CharSequence charSequence61 = charSequenceQueue1.poll();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertNotNull(charSequenceStream20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "" + "'", charSequence25, "");
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(charSequenceArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator46);
        org.junit.Assert.assertNotNull(charSequenceSpliterator47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "" + "'", charSequence50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(queueArray53);
        org.junit.Assert.assertNotNull(charSequenceQueueArray54);
        org.junit.Assert.assertNotNull(charSequenceQueueArray59);
        org.junit.Assert.assertNotNull(charSequenceIterableArray60);
        org.junit.Assert.assertNull(charSequence61);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = charSequenceList7.contains(obj9);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceList13.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue19);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor23 = charSequenceQueue19.iterator();
        java.lang.Class<?> wildcardClass24 = charSequenceQueue19.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceItor23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        java.lang.Object[] objArray29 = charSequenceQueue1.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator32 = charSequenceQueue31.spliterator();
        java.lang.CharSequence charSequence33 = charSequenceQueue31.peek();
        boolean boolean34 = charSequenceQueue31.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream35 = charSequenceQueue31.stream();
        boolean boolean36 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence37 = charSequenceQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(charSequenceSpliterator32);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charSequenceStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList22 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22, charSequenceArray21);
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27, charSequenceArray26);
        boolean boolean29 = charSequenceQueue27.isAtFullCapacity();
        boolean boolean30 = charSequenceList22.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27);
        boolean boolean31 = charSequenceQueue27.isAtFullCapacity();
        int int32 = charSequenceQueue27.maxSize();
        boolean boolean33 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.lang.CharSequence charSequence36 = charSequenceQueue35.peek();
        boolean boolean37 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream38 = charSequenceQueue7.stream();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream38);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        boolean boolean14 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean18 = charSequenceQueue16.offer((java.lang.CharSequence) "");
        boolean boolean20 = charSequenceQueue16.add((java.lang.CharSequence) "hi!");
        int int21 = charSequenceQueue16.maxSize();
        boolean boolean22 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.lang.Object[] objArray23 = charSequenceList2.toArray();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[hi!]");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = charSequenceQueue11.element();
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList22 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22, charSequenceArray21);
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27, charSequenceArray26);
        boolean boolean29 = charSequenceQueue27.isAtFullCapacity();
        boolean boolean30 = charSequenceList22.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27);
        boolean boolean31 = charSequenceList17.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        boolean boolean32 = charSequenceQueue11.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = charSequenceList42.contains(obj44);
        java.lang.String str46 = charSequenceList42.toString();
        boolean boolean47 = charSequenceList35.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream49 = charSequenceQueue48.stream();
        boolean boolean50 = charSequenceQueue11.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.lang.CharSequence charSequence51 = charSequenceQueue48.element();
        java.lang.CharSequence charSequence52 = charSequenceQueue48.peek();
        java.lang.String str53 = charSequenceQueue48.toString();
        boolean boolean54 = charSequenceList2.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.lang.Object[] objArray55 = charSequenceList2.toArray();
        java.lang.Class<?> wildcardClass56 = objArray55.getClass();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charSequenceStream49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[hi!]" + "'", str53, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[hi!, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[hi!, hi!]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        java.lang.CharSequence charSequence4 = charSequenceQueue1.poll();
        boolean boolean5 = charSequenceQueue1.isFull();
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        boolean boolean7 = charSequenceQueue1.isAtFullCapacity();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream10 = charSequenceQueue9.parallelStream();
        boolean boolean12 = charSequenceQueue9.contains((java.lang.Object) 1.0d);
        boolean boolean13 = charSequenceQueue9.isFull();
        boolean boolean14 = charSequenceQueue9.isFull();
        int int15 = charSequenceQueue9.maxSize();
        int int16 = charSequenceQueue9.maxSize();
        java.lang.CharSequence charSequence17 = charSequenceQueue9.peek();
        boolean boolean18 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue9);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = charSequenceQueue1.retainAll(charSequenceCollection19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSequenceStream10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray4 = charSequenceQueue1.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor5 = charSequenceQueue1.iterator();
        boolean boolean7 = charSequenceQueue1.offer((java.lang.CharSequence) "[]");
        java.lang.Object obj8 = null;
        boolean boolean9 = charSequenceQueue1.remove(obj8);
        int int10 = charSequenceQueue1.size();
        int int11 = charSequenceQueue1.maxSize();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        boolean boolean42 = charSequenceQueue38.offer((java.lang.CharSequence) "[, ]");
        int int43 = charSequenceQueue38.maxSize();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.lang.CharSequence charSequence12 = charSequenceQueue8.poll();
        boolean boolean13 = charSequenceQueue8.isAtFullCapacity();
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList16 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16, charSequenceArray15);
        java.lang.Object obj18 = null;
        boolean boolean19 = charSequenceList16.contains(obj18);
        java.lang.String str20 = charSequenceList16.toString();
        java.lang.CharSequence[] charSequenceArray22 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList23 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23, charSequenceArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = charSequenceList23.contains(obj25);
        java.lang.String str27 = charSequenceList23.toString();
        boolean boolean28 = charSequenceList16.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23);
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.CharSequence[] charSequenceArray36 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37, charSequenceArray36);
        boolean boolean39 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean40 = charSequenceList32.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37);
        boolean boolean41 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean42 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean43 = charSequenceList23.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37);
        boolean boolean44 = charSequenceQueue8.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue46 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean48 = charSequenceQueue46.offer((java.lang.CharSequence) "");
        java.lang.String str49 = charSequenceQueue46.toString();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor50 = charSequenceQueue46.iterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator51 = charSequenceQueue46.spliterator();
        boolean boolean52 = charSequenceList23.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue46);
        boolean boolean53 = charSequenceQueue46.isEmpty();
        java.lang.CharSequence charSequence54 = charSequenceQueue46.poll();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!]" + "'", str20, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[hi!]" + "'", str27, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(charSequenceArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(charSequenceItor50);
        org.junit.Assert.assertNotNull(charSequenceSpliterator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "" + "'", charSequence54, "");
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "[]" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue2 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue2, charSequenceArray1);
        charSequenceQueue2.clear();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Object> objQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Object>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        int int9 = charSequenceQueue7.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray14 = charSequenceQueue11.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue11.iterator();
        boolean boolean16 = charSequenceQueue7.remove((java.lang.Object) charSequenceQueue11);
        java.lang.CharSequence charSequence17 = charSequenceQueue11.poll();
        boolean boolean18 = charSequenceList2.contains((java.lang.Object) charSequenceQueue11);
        boolean boolean19 = charSequenceQueue11.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence20 = charSequenceQueue11.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue2 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue2, charSequenceArray1);
        int int4 = charSequenceQueue2.maxSize();
        boolean boolean5 = charSequenceQueue2.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        boolean boolean10 = charSequenceQueue7.contains((java.lang.Object) 1.0d);
        boolean boolean12 = charSequenceQueue7.offer((java.lang.CharSequence) "[hi!]");
        java.lang.Class<?> wildcardClass13 = charSequenceQueue7.getClass();
        boolean boolean14 = charSequenceQueue2.remove((java.lang.Object) charSequenceQueue7);
        int int15 = charSequenceQueue2.maxSize();
        java.lang.CharSequence[] charSequenceArray17 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList18 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18, charSequenceArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = charSequenceList18.contains(obj20);
        java.lang.String str22 = charSequenceList18.toString();
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        boolean boolean30 = charSequenceList18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList25);
        java.lang.Object[] objArray32 = charSequenceList25.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean36 = charSequenceQueue34.offer((java.lang.CharSequence) "");
        boolean boolean38 = charSequenceQueue34.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue40 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean41 = charSequenceQueue34.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40);
        boolean boolean42 = charSequenceQueue34.isEmpty();
        boolean boolean44 = charSequenceQueue34.remove((java.lang.Object) 10.0d);
        charSequenceQueue34.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue47 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        int int48 = charSequenceQueue47.maxSize();
        boolean boolean49 = charSequenceQueue34.remove((java.lang.Object) charSequenceQueue47);
        boolean boolean50 = charSequenceList25.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue52 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean54 = charSequenceQueue52.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray57 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue58 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue58, charSequenceArray57);
        boolean boolean60 = charSequenceQueue58.isAtFullCapacity();
        boolean boolean61 = charSequenceQueue52.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue58);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor62 = charSequenceQueue58.iterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator63 = charSequenceQueue58.spliterator();
        boolean boolean64 = charSequenceList25.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue58);
        boolean boolean65 = charSequenceQueue2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25);
        java.lang.CharSequence charSequence66 = charSequenceQueue2.poll();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertNotNull(charSequenceArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[hi!]" + "'", str22, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(charSequenceArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(charSequenceItor62);
        org.junit.Assert.assertNotNull(charSequenceSpliterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "" + "'", charSequence66, "");
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.lang.CharSequence charSequence5 = charSequenceQueue1.poll();
        boolean boolean6 = charSequenceQueue1.isAtFullCapacity();
        java.lang.CharSequence charSequence7 = charSequenceQueue1.poll();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence9 = charSequenceQueue1.get(0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(charSequence7);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        boolean boolean23 = charSequenceQueue3.isEmpty();
        boolean boolean24 = charSequenceQueue3.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream25 = charSequenceQueue3.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean29 = charSequenceQueue27.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray32 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue33 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue33, charSequenceArray32);
        boolean boolean35 = charSequenceQueue33.isAtFullCapacity();
        boolean boolean36 = charSequenceQueue27.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue33);
        boolean boolean38 = charSequenceQueue33.offer((java.lang.CharSequence) "[[hi!], [hi!]]");
        boolean boolean39 = charSequenceQueue33.isEmpty();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean43 = charSequenceQueue41.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = charSequenceQueue41.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream45 = charSequenceQueue41.parallelStream();
        boolean boolean47 = charSequenceQueue41.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator48 = charSequenceQueue41.spliterator();
        java.lang.CharSequence charSequence49 = charSequenceQueue41.element();
        boolean boolean50 = charSequenceQueue33.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        boolean boolean51 = charSequenceQueue3.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        int int52 = charSequenceQueue3.maxSize();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charSequenceStream25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charSequenceArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "" + "'", charSequence44, "");
        org.junit.Assert.assertNotNull(charSequenceStream45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator48);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "" + "'", charSequence49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        int int7 = charSequenceQueue1.maxSize();
        java.lang.CharSequence[] charSequenceArray9 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList10 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList10, charSequenceArray9);
        java.lang.Object obj12 = null;
        boolean boolean13 = charSequenceList10.contains(obj12);
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList16 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16, charSequenceArray15);
        java.lang.Object obj18 = null;
        boolean boolean19 = charSequenceList16.contains(obj18);
        java.lang.String str20 = charSequenceList16.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean23 = charSequenceList16.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean24 = charSequenceList10.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue26 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean27 = charSequenceList10.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue26);
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList30 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList30, charSequenceArray29);
        java.lang.Object obj32 = null;
        boolean boolean33 = charSequenceList30.contains(obj32);
        java.lang.CharSequence[] charSequenceArray35 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList36 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList36, charSequenceArray35);
        java.lang.Object obj38 = null;
        boolean boolean39 = charSequenceList36.contains(obj38);
        java.lang.String str40 = charSequenceList36.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue42 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean43 = charSequenceList36.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        boolean boolean44 = charSequenceList30.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue46 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean47 = charSequenceList30.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue46);
        boolean boolean48 = charSequenceQueue26.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue46);
        java.lang.String[] strArray52 = new java.lang.String[] { "[[hi!], [hi!]]", "hi!", "hi!" };
        java.lang.String[] strArray56 = new java.lang.String[] { "[[hi!], [hi!]]", "hi!", "hi!" };
        java.lang.String[] strArray60 = new java.lang.String[] { "[[hi!], [hi!]]", "hi!", "hi!" };
        java.lang.String[] strArray64 = new java.lang.String[] { "[[hi!], [hi!]]", "hi!", "hi!" };
        java.lang.Comparable[][] comparableArray66 = new java.lang.Comparable[4][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray67 = (java.lang.Comparable<java.lang.String>[][]) comparableArray66;
        strComparableArray67[0] = strArray52;
        strComparableArray67[1] = strArray56;
        strComparableArray67[2] = strArray60;
        strComparableArray67[3] = strArray64;
        java.lang.Comparable<java.lang.String>[][] strComparableArray76 = charSequenceQueue46.toArray(strComparableArray67);
        boolean boolean77 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue46);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator78 = charSequenceQueue46.spliterator();
        java.lang.CharSequence charSequence79 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = charSequenceQueue46.offer(charSequence79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Attempted to add null object to queue");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(charSequenceArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!]" + "'", str20, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[hi!]" + "'", str40, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(comparableArray66);
        org.junit.Assert.assertNotNull(strComparableArray67);
        org.junit.Assert.assertNotNull(strComparableArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator78);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue7.iterator();
        boolean boolean16 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceQueue18.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24, charSequenceArray23);
        boolean boolean26 = charSequenceQueue24.isAtFullCapacity();
        boolean boolean27 = charSequenceQueue18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator30 = charSequenceQueue29.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator31 = charSequenceQueue29.spliterator();
        boolean boolean33 = charSequenceQueue29.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = charSequenceQueue29.poll();
        boolean boolean35 = charSequenceQueue24.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29);
        boolean boolean36 = charSequenceQueue7.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        java.lang.CharSequence charSequence37 = charSequenceQueue24.poll();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream38 = charSequenceQueue24.stream();
        boolean boolean39 = charSequenceQueue24.isFull();
        charSequenceQueue24.clear();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator30);
        org.junit.Assert.assertNotNull(charSequenceSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "" + "'", charSequence37, "");
        org.junit.Assert.assertNotNull(charSequenceStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.stream();
        boolean boolean8 = charSequenceQueue1.isEmpty();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertNotNull(charSequenceStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        java.lang.CharSequence charSequence4 = charSequenceQueue1.poll();
        boolean boolean5 = charSequenceQueue1.isFull();
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.parallelStream();
        java.lang.CharSequence charSequence8 = charSequenceQueue1.poll();
        int int9 = charSequenceQueue1.maxSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence10 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertNotNull(charSequenceStream7);
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.lang.CharSequence charSequence5 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean24 = charSequenceQueue22.offer((java.lang.CharSequence) "");
        boolean boolean26 = charSequenceQueue22.add((java.lang.CharSequence) "hi!");
        int int27 = charSequenceQueue22.maxSize();
        boolean boolean28 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean30 = charSequenceList8.remove((java.lang.Object) 0);
        boolean boolean31 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        int int32 = charSequenceQueue1.maxSize();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor9 = charSequenceQueue1.iterator();
        boolean boolean10 = charSequenceQueue1.isAtFullCapacity();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence12 = charSequenceQueue1.get(2);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (2) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charSequenceItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        boolean boolean14 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceQueue15.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream17 = charSequenceQueue15.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator20 = charSequenceQueue19.spliterator();
        java.lang.CharSequence charSequence21 = charSequenceQueue19.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean25 = charSequenceQueue23.offer((java.lang.CharSequence) "");
        boolean boolean26 = charSequenceQueue19.contains((java.lang.Object) charSequenceQueue23);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor27 = charSequenceQueue19.iterator();
        boolean boolean28 = charSequenceQueue15.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        java.lang.CharSequence charSequence29 = charSequenceQueue15.poll();
        int int30 = charSequenceQueue15.maxSize();
        boolean boolean32 = charSequenceQueue15.add((java.lang.CharSequence) "[, hi!]");
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator33 = charSequenceQueue15.spliterator();
        boolean boolean34 = charSequenceQueue15.isAtFullCapacity();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceStream16);
        org.junit.Assert.assertNotNull(charSequenceStream17);
        org.junit.Assert.assertNotNull(charSequenceSpliterator20);
        org.junit.Assert.assertNull(charSequence21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charSequenceItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue8.offer((java.lang.CharSequence) "");
        java.lang.String str11 = charSequenceQueue8.toString();
        boolean boolean12 = charSequenceQueue1.remove((java.lang.Object) str11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean16 = charSequenceQueue14.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue14.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean21 = charSequenceQueue19.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = charSequenceQueue19.element();
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList30 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList30, charSequenceArray29);
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35, charSequenceArray34);
        boolean boolean37 = charSequenceQueue35.isAtFullCapacity();
        boolean boolean38 = charSequenceList30.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        boolean boolean39 = charSequenceList25.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList30);
        boolean boolean40 = charSequenceQueue19.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList30);
        boolean boolean41 = charSequenceQueue14.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList30);
        java.lang.Object[] objArray42 = charSequenceQueue14.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue44 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator45 = charSequenceQueue44.spliterator();
        java.lang.CharSequence charSequence46 = charSequenceQueue44.peek();
        boolean boolean47 = charSequenceQueue44.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream48 = charSequenceQueue44.stream();
        boolean boolean49 = charSequenceQueue14.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue44);
        boolean boolean50 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence51 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(charSequenceSpliterator45);
        org.junit.Assert.assertNull(charSequence46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charSequenceStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30, charSequenceArray29);
        boolean boolean32 = charSequenceQueue30.isAtFullCapacity();
        boolean boolean33 = charSequenceQueue24.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator36 = charSequenceQueue35.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue35.spliterator();
        boolean boolean39 = charSequenceQueue35.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = charSequenceQueue35.poll();
        boolean boolean41 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList45 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList45, charSequenceArray44);
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50, charSequenceArray49);
        boolean boolean52 = charSequenceQueue50.isAtFullCapacity();
        boolean boolean53 = charSequenceList45.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean54 = charSequenceQueue50.isAtFullCapacity();
        int int55 = charSequenceQueue50.maxSize();
        boolean boolean56 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean57 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        charSequenceQueue1.clear();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor59 = charSequenceQueue1.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence60 = charSequenceQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator36);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charSequenceItor59);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = charSequenceQueue10.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream14 = charSequenceQueue10.parallelStream();
        boolean boolean16 = charSequenceQueue10.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator17 = charSequenceQueue10.spliterator();
        boolean boolean18 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10);
        java.lang.CharSequence charSequence19 = charSequenceQueue10.poll();
        int int20 = charSequenceQueue10.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence21 = charSequenceQueue10.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
        org.junit.Assert.assertNotNull(charSequenceStream14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray5 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList6 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList6, charSequenceArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = charSequenceList6.contains(obj8);
        java.lang.String str10 = charSequenceList6.toString();
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        boolean boolean18 = charSequenceList6.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13);
        boolean boolean19 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList6);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList22 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22, charSequenceArray21);
        java.lang.Object obj24 = null;
        boolean boolean25 = charSequenceList22.contains(obj24);
        java.lang.String str26 = charSequenceList22.toString();
        java.lang.CharSequence[] charSequenceArray28 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList29 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList29, charSequenceArray28);
        java.lang.Object obj31 = null;
        boolean boolean32 = charSequenceList29.contains(obj31);
        java.lang.String str33 = charSequenceList29.toString();
        boolean boolean34 = charSequenceList22.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList29);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue36 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean38 = charSequenceQueue36.offer((java.lang.CharSequence) "");
        boolean boolean40 = charSequenceQueue36.add((java.lang.CharSequence) "hi!");
        int int41 = charSequenceQueue36.maxSize();
        boolean boolean42 = charSequenceList22.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue36);
        boolean boolean43 = charSequenceList6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue36);
        boolean boolean45 = charSequenceQueue36.remove((java.lang.Object) 100);
        int int46 = charSequenceQueue36.maxSize();
        java.lang.CharSequence[] charSequenceArray48 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList49 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList49, charSequenceArray48);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue52 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean54 = charSequenceQueue52.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray57 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue58 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue58, charSequenceArray57);
        boolean boolean60 = charSequenceQueue58.isAtFullCapacity();
        boolean boolean61 = charSequenceQueue52.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue58);
        boolean boolean62 = charSequenceList49.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue52);
        boolean boolean63 = charSequenceQueue36.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence65 = charSequenceQueue52.get((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[hi!]" + "'", str10, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[hi!]" + "'", str26, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[hi!]" + "'", str33, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(charSequenceArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(charSequenceArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        charSequenceQueue1.clear();
        boolean boolean6 = charSequenceQueue1.isEmpty();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList16 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16, charSequenceArray15);
        java.lang.Object obj18 = null;
        boolean boolean19 = charSequenceList16.contains(obj18);
        java.lang.String str20 = charSequenceList16.toString();
        boolean boolean21 = charSequenceList9.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList16);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue28 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = charSequenceList42.contains(obj44);
        java.lang.String str46 = charSequenceList42.toString();
        boolean boolean47 = charSequenceList35.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        boolean boolean48 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35);
        boolean boolean49 = charSequenceQueue28.remove((java.lang.Object) charSequenceQueue30);
        boolean boolean50 = charSequenceQueue24.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        boolean boolean51 = charSequenceList16.remove((java.lang.Object) charSequenceQueue30);
        boolean boolean52 = charSequenceQueue1.remove((java.lang.Object) boolean51);
        java.lang.CharSequence charSequence53 = charSequenceQueue1.poll();
        java.lang.Class<?> wildcardClass54 = charSequenceQueue1.getClass();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!]" + "'", str20, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        boolean boolean7 = charSequenceQueue3.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue3.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        charSequenceQueue3.clear();
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue3);
        java.lang.String str13 = charSequenceQueue3.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean17 = charSequenceQueue15.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray19 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList20 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList20, charSequenceArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = charSequenceList20.contains(obj22);
        java.lang.String str24 = charSequenceList20.toString();
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList27 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27, charSequenceArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = charSequenceList27.contains(obj29);
        java.lang.String str31 = charSequenceList27.toString();
        boolean boolean32 = charSequenceList20.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27);
        boolean boolean33 = charSequenceQueue15.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList20);
        java.lang.CharSequence[] charSequenceArray35 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList36 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList36, charSequenceArray35);
        java.lang.Object obj38 = null;
        boolean boolean39 = charSequenceList36.contains(obj38);
        java.lang.String str40 = charSequenceList36.toString();
        java.lang.CharSequence[] charSequenceArray42 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList43 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList43, charSequenceArray42);
        java.lang.Object obj45 = null;
        boolean boolean46 = charSequenceList43.contains(obj45);
        java.lang.String str47 = charSequenceList43.toString();
        boolean boolean48 = charSequenceList36.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList43);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean52 = charSequenceQueue50.offer((java.lang.CharSequence) "");
        boolean boolean54 = charSequenceQueue50.add((java.lang.CharSequence) "hi!");
        int int55 = charSequenceQueue50.maxSize();
        boolean boolean56 = charSequenceList36.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean57 = charSequenceList20.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean59 = charSequenceQueue50.remove((java.lang.Object) 100);
        int int60 = charSequenceQueue50.maxSize();
        boolean boolean62 = charSequenceQueue50.offer((java.lang.CharSequence) "");
        boolean boolean63 = charSequenceQueue3.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence65 = charSequenceQueue3.get((int) '#');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (35) is outside the available range [0, 3)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[hi!]" + "'", str24, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[hi!]" + "'", str31, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[hi!]" + "'", str40, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[hi!]" + "'", str47, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        boolean boolean20 = charSequenceQueue7.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream23 = charSequenceQueue22.parallelStream();
        boolean boolean24 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        int int25 = charSequenceQueue7.maxSize();
        java.lang.CharSequence charSequence26 = charSequenceQueue7.poll();
        int int27 = charSequenceQueue7.maxSize();
        int int28 = charSequenceQueue7.maxSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence29 = charSequenceQueue7.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charSequenceStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "" + "'", charSequence26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.CharSequence[] charSequenceArray13 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14, charSequenceArray13);
        boolean boolean16 = charSequenceQueue14.isAtFullCapacity();
        boolean boolean17 = charSequenceList9.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean18 = charSequenceQueue14.isAtFullCapacity();
        int int19 = charSequenceQueue14.maxSize();
        boolean boolean20 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean22 = charSequenceQueue1.offer((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = charSequenceQueue1.remove();
        boolean boolean24 = charSequenceQueue1.isEmpty();
        boolean boolean25 = charSequenceQueue1.isFull();
        java.lang.Class<?> wildcardClass26 = charSequenceQueue1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charSequenceArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "" + "'", charSequence23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        java.lang.CharSequence[] charSequenceArray5 = new java.lang.CharSequence[] { "[, ]", "hi!", "[, ]", "[]", "[, ]" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue6, charSequenceArray5);
        java.lang.CharSequence charSequence8 = charSequenceQueue6.remove();
        charSequenceQueue6.clear();
        int int10 = charSequenceQueue6.size();
        org.junit.Assert.assertNotNull(charSequenceArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "[, ]" + "'", charSequence8, "[, ]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        boolean boolean6 = charSequenceQueue1.isAtFullCapacity();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor7 = charSequenceQueue1.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue1.parallelStream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream9 = charSequenceQueue1.parallelStream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream10 = charSequenceQueue1.stream();
        java.lang.CharSequence charSequence11 = charSequenceQueue1.remove();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence12 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSequenceItor7);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertNotNull(charSequenceStream9);
        org.junit.Assert.assertNotNull(charSequenceStream10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        boolean boolean23 = charSequenceQueue3.isEmpty();
        boolean boolean24 = charSequenceQueue3.isFull();
        boolean boolean26 = charSequenceQueue3.offer((java.lang.CharSequence) "[, , [, ]]");
        boolean boolean28 = charSequenceQueue3.add((java.lang.CharSequence) "[hi!, hi!]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.util.stream.Stream<java.lang.CharSequence>> charSequenceStreamQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.stream.Stream<java.lang.CharSequence>>();
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
        org.junit.Assert.assertNotNull(charSequenceStream7);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        boolean boolean23 = charSequenceQueue3.isEmpty();
        boolean boolean24 = charSequenceQueue3.isFull();
        boolean boolean26 = charSequenceQueue3.offer((java.lang.CharSequence) "[, , [, ]]");
        java.util.Collection<java.lang.CharSequence> charSequenceCollection27 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = charSequenceQueue3.containsAll(charSequenceCollection27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.util.List<java.lang.CharSequence>> charSequenceListQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.List<java.lang.CharSequence>>(10);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        boolean boolean7 = charSequenceQueue3.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue3.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        charSequenceQueue3.clear();
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue3);
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "", "[hi!]", "", "hi!" };
        java.lang.Comparable<java.lang.String>[] strComparableArray24 = charSequenceList15.toArray((java.lang.Comparable<java.lang.String>[]) strArray23);
        java.lang.Comparable<java.lang.String>[] strComparableArray25 = charSequenceQueue3.toArray((java.lang.Comparable<java.lang.String>[]) strArray23);
        java.lang.CharSequence charSequence26 = charSequenceQueue3.peek();
        boolean boolean28 = charSequenceQueue3.add((java.lang.CharSequence) "[, ]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence30 = charSequenceQueue3.get((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strComparableArray24);
        org.junit.Assert.assertNotNull(strComparableArray25);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Comparable<java.lang.String>[][][][]> strComparableArrayQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Comparable<java.lang.String>[][][][]>();
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        int int7 = charSequenceQueue1.maxSize();
        int int8 = charSequenceQueue1.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16, charSequenceArray15);
        boolean boolean18 = charSequenceQueue16.isAtFullCapacity();
        boolean boolean19 = charSequenceQueue10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream20 = charSequenceQueue10.stream();
        boolean boolean21 = charSequenceQueue1.contains((java.lang.Object) charSequenceStream20);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream24 = charSequenceQueue23.parallelStream();
        int int25 = charSequenceQueue23.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean29 = charSequenceQueue27.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray30 = charSequenceQueue27.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor31 = charSequenceQueue27.iterator();
        boolean boolean32 = charSequenceQueue23.remove((java.lang.Object) charSequenceQueue27);
        boolean boolean33 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream34 = charSequenceQueue23.parallelStream();
        boolean boolean36 = charSequenceQueue23.offer((java.lang.CharSequence) "");
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charSequenceStream24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceStream34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.String str4 = charSequenceQueue1.toString();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor5 = charSequenceQueue1.iterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator6 = charSequenceQueue1.spliterator();
        boolean boolean8 = charSequenceQueue1.offer((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue10.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean17 = charSequenceQueue10.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean21 = charSequenceQueue19.offer((java.lang.CharSequence) "");
        boolean boolean23 = charSequenceQueue19.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean26 = charSequenceQueue19.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue25);
        boolean boolean27 = charSequenceQueue19.isEmpty();
        java.lang.CharSequence charSequence28 = charSequenceQueue19.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        boolean boolean34 = charSequenceQueue30.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue36 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean37 = charSequenceQueue30.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue36);
        boolean boolean38 = charSequenceQueue30.isEmpty();
        boolean boolean39 = charSequenceQueue19.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        boolean boolean40 = charSequenceQueue10.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean41 = charSequenceQueue10.isFull();
        java.lang.CharSequence[] charSequenceArray43 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList44 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList44, charSequenceArray43);
        java.lang.Object obj46 = null;
        boolean boolean47 = charSequenceList44.contains(obj46);
        java.lang.String str48 = charSequenceList44.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean51 = charSequenceList44.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue53 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean55 = charSequenceQueue53.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence56 = charSequenceQueue53.element();
        java.lang.CharSequence[] charSequenceArray58 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList59 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList59, charSequenceArray58);
        java.lang.CharSequence[] charSequenceArray63 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList64 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList64, charSequenceArray63);
        java.lang.CharSequence[] charSequenceArray68 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue69 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue69, charSequenceArray68);
        boolean boolean71 = charSequenceQueue69.isAtFullCapacity();
        boolean boolean72 = charSequenceList64.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue69);
        boolean boolean73 = charSequenceList59.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList64);
        boolean boolean74 = charSequenceQueue53.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList64);
        java.lang.CharSequence[] charSequenceArray76 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList77 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList77, charSequenceArray76);
        java.lang.Object obj79 = null;
        boolean boolean80 = charSequenceList77.contains(obj79);
        java.lang.String str81 = charSequenceList77.toString();
        java.lang.CharSequence[] charSequenceArray83 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList84 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList84, charSequenceArray83);
        java.lang.Object obj86 = null;
        boolean boolean87 = charSequenceList84.contains(obj86);
        java.lang.String str88 = charSequenceList84.toString();
        boolean boolean89 = charSequenceList77.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList84);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue90 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList84);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream91 = charSequenceQueue90.stream();
        boolean boolean92 = charSequenceQueue53.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue90);
        java.lang.CharSequence charSequence93 = charSequenceQueue90.element();
        java.lang.CharSequence charSequence94 = charSequenceQueue90.peek();
        java.lang.String str95 = charSequenceQueue90.toString();
        boolean boolean96 = charSequenceList44.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue90);
        boolean boolean97 = charSequenceQueue10.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue90);
        int int98 = charSequenceQueue10.size();
        boolean boolean99 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(charSequenceItor5);
        org.junit.Assert.assertNotNull(charSequenceSpliterator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[hi!]" + "'", str48, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "" + "'", charSequence56, "");
        org.junit.Assert.assertNotNull(charSequenceArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(charSequenceArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(charSequenceArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(charSequenceArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[hi!]" + "'", str81, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[hi!]" + "'", str88, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(charSequenceStream91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + charSequence93 + "' != '" + "hi!" + "'", charSequence93, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence94 + "' != '" + "hi!" + "'", charSequence94, "hi!");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[hi!]" + "'", str95, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 5 + "'", int98 == 5);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = charSequenceList7.contains(obj9);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceList13.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue19);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = charSequenceQueue24.peek();
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList30 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList30, charSequenceArray29);
        java.lang.Object obj32 = null;
        boolean boolean33 = charSequenceList30.contains(obj32);
        java.lang.CharSequence[] charSequenceArray35 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList36 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList36, charSequenceArray35);
        java.lang.Object obj38 = null;
        boolean boolean39 = charSequenceList36.contains(obj38);
        java.lang.String str40 = charSequenceList36.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue42 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean43 = charSequenceList36.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        boolean boolean44 = charSequenceList30.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        boolean boolean45 = charSequenceQueue24.remove((java.lang.Object) charSequenceQueue42);
        boolean boolean46 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator49 = charSequenceQueue48.spliterator();
        java.lang.CharSequence charSequence50 = charSequenceQueue48.peek();
        boolean boolean51 = charSequenceQueue48.isFull();
        boolean boolean52 = charSequenceQueue42.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        boolean boolean54 = charSequenceQueue42.offer((java.lang.CharSequence) "[hi!]");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue56 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean58 = charSequenceQueue56.offer((java.lang.CharSequence) "");
        charSequenceQueue56.clear();
        java.lang.CharSequence charSequence60 = charSequenceQueue56.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue62 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean64 = charSequenceQueue62.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence65 = charSequenceQueue62.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream66 = charSequenceQueue62.parallelStream();
        java.lang.CharSequence[] charSequenceArray69 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList70 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList70, charSequenceArray69);
        java.lang.CharSequence[] charSequenceArray74 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue75 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue75, charSequenceArray74);
        boolean boolean77 = charSequenceQueue75.isAtFullCapacity();
        boolean boolean78 = charSequenceList70.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue75);
        boolean boolean79 = charSequenceQueue75.isAtFullCapacity();
        int int80 = charSequenceQueue75.maxSize();
        boolean boolean81 = charSequenceQueue62.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue75);
        boolean boolean83 = charSequenceQueue62.offer((java.lang.CharSequence) "hi!");
        boolean boolean84 = charSequenceQueue56.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue62);
        boolean boolean85 = charSequenceQueue42.remove((java.lang.Object) charSequenceQueue56);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue87 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator88 = charSequenceQueue87.spliterator();
        java.lang.CharSequence charSequence89 = charSequenceQueue87.peek();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor90 = charSequenceQueue87.iterator();
        boolean boolean91 = charSequenceQueue42.contains((java.lang.Object) charSequenceQueue87);
        java.lang.Object[] objArray92 = charSequenceQueue87.toArray();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[hi!]" + "'", str40, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator49);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(charSequence60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "" + "'", charSequence65, "");
        org.junit.Assert.assertNotNull(charSequenceStream66);
        org.junit.Assert.assertNotNull(charSequenceArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(charSequenceArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 32 + "'", int80 == 32);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator88);
        org.junit.Assert.assertNull(charSequence89);
        org.junit.Assert.assertNotNull(charSequenceItor90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean11 = charSequenceQueue7.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue13 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue13.spliterator();
        java.lang.CharSequence charSequence15 = charSequenceQueue13.peek();
        boolean boolean16 = charSequenceQueue13.isEmpty();
        int int17 = charSequenceQueue13.maxSize();
        boolean boolean18 = charSequenceQueue7.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue13);
        int int19 = charSequenceQueue13.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertNull(charSequence15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        boolean boolean7 = charSequenceQueue1.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue1.spliterator();
        boolean boolean9 = charSequenceQueue1.isAtFullCapacity();
        boolean boolean11 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue13 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue13.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator15 = charSequenceQueue13.spliterator();
        boolean boolean17 = charSequenceQueue13.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = charSequenceQueue13.poll();
        boolean boolean20 = charSequenceQueue13.add((java.lang.CharSequence) "");
        charSequenceQueue13.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream22 = charSequenceQueue13.stream();
        charSequenceQueue13.clear();
        boolean boolean24 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue13);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue26 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean28 = charSequenceQueue26.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = charSequenceQueue26.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean33 = charSequenceQueue31.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = charSequenceQueue31.element();
        java.lang.CharSequence[] charSequenceArray36 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList37 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList37, charSequenceArray36);
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.CharSequence[] charSequenceArray46 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue47 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue47, charSequenceArray46);
        boolean boolean49 = charSequenceQueue47.isAtFullCapacity();
        boolean boolean50 = charSequenceList42.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue47);
        boolean boolean51 = charSequenceList37.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        boolean boolean52 = charSequenceQueue31.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        boolean boolean53 = charSequenceQueue26.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue55 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean57 = charSequenceQueue55.offer((java.lang.CharSequence) "");
        charSequenceQueue55.clear();
        boolean boolean60 = charSequenceQueue55.remove((java.lang.Object) (-1.0d));
        java.lang.CharSequence[] charSequenceArray63 = new java.lang.CharSequence[] { "[hi!]", "[hi!]" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList64 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList64, charSequenceArray63);
        boolean boolean66 = charSequenceQueue55.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList64);
        boolean boolean67 = charSequenceQueue26.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList64);
        boolean boolean68 = charSequenceQueue26.isAtFullCapacity();
        boolean boolean69 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue26);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream70 = charSequenceQueue1.parallelStream();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertNotNull(charSequenceSpliterator15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceStream22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "" + "'", charSequence29, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertNotNull(charSequenceArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(charSequenceArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(charSequenceArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(charSequenceStream70);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean12 = charSequenceQueue7.offer((java.lang.CharSequence) "[[hi!], [hi!]]");
        boolean boolean13 = charSequenceQueue7.isEmpty();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean17 = charSequenceQueue15.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = charSequenceQueue15.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream19 = charSequenceQueue15.parallelStream();
        boolean boolean21 = charSequenceQueue15.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator22 = charSequenceQueue15.spliterator();
        java.lang.CharSequence charSequence23 = charSequenceQueue15.element();
        boolean boolean24 = charSequenceQueue7.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue15);
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList28 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList28, charSequenceArray27);
        java.lang.CharSequence[] charSequenceArray32 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue33 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue33, charSequenceArray32);
        boolean boolean35 = charSequenceQueue33.isAtFullCapacity();
        boolean boolean36 = charSequenceList28.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue33);
        boolean boolean37 = charSequenceQueue33.isAtFullCapacity();
        boolean boolean38 = charSequenceQueue33.isAtFullCapacity();
        boolean boolean39 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue33);
        java.lang.Object[] objArray40 = charSequenceQueue33.toArray();
        java.lang.Object[] objArray41 = charSequenceQueue33.toArray();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertNotNull(charSequenceStream19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator22);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "" + "'", charSequence23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charSequenceArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[, ]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[, ]");
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>[]> charSequenceBaseStreamArrayQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.stream.BaseStream<java.lang.CharSequence, java.util.stream.Stream<java.lang.CharSequence>>[]>();
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        int int7 = charSequenceQueue1.size();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue1.stream();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(charSequenceStream8);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        java.lang.CharSequence charSequence4 = charSequenceQueue1.poll();
        boolean boolean5 = charSequenceQueue1.isFull();
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        boolean boolean7 = charSequenceQueue1.isAtFullCapacity();
        boolean boolean9 = charSequenceQueue1.add((java.lang.CharSequence) "[, , , hi!]");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue11.parallelStream();
        boolean boolean14 = charSequenceQueue11.contains((java.lang.Object) 1.0d);
        boolean boolean15 = charSequenceQueue11.isFull();
        boolean boolean16 = charSequenceQueue11.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean20 = charSequenceQueue18.offer((java.lang.CharSequence) "");
        java.lang.String str21 = charSequenceQueue18.toString();
        boolean boolean22 = charSequenceQueue11.remove((java.lang.Object) str21);
        boolean boolean23 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator26 = charSequenceQueue25.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator27 = charSequenceQueue25.spliterator();
        boolean boolean29 = charSequenceQueue25.add((java.lang.CharSequence) "");
        boolean boolean30 = charSequenceQueue25.isAtFullCapacity();
        java.lang.CharSequence charSequence31 = charSequenceQueue25.element();
        int int32 = charSequenceQueue25.size();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream33 = charSequenceQueue25.stream();
        boolean boolean34 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue25);
        java.lang.CharSequence charSequence35 = charSequenceQueue1.peek();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator26);
        org.junit.Assert.assertNotNull(charSequenceSpliterator27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "" + "'", charSequence31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(charSequenceStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(charSequence35);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        boolean boolean14 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean18 = charSequenceQueue16.offer((java.lang.CharSequence) "");
        boolean boolean20 = charSequenceQueue16.add((java.lang.CharSequence) "hi!");
        int int21 = charSequenceQueue16.maxSize();
        boolean boolean22 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator23 = charSequenceQueue16.spliterator();
        int int24 = charSequenceQueue16.size();
        java.lang.Class<?> wildcardClass25 = charSequenceQueue16.getClass();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList22 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22, charSequenceArray21);
        java.lang.Object obj24 = null;
        boolean boolean25 = charSequenceList22.contains(obj24);
        java.lang.String str26 = charSequenceList22.toString();
        boolean boolean27 = charSequenceList15.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22);
        boolean boolean28 = charSequenceQueue10.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        java.lang.CharSequence[] charSequenceArray30 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList31 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList31, charSequenceArray30);
        java.lang.Object obj33 = null;
        boolean boolean34 = charSequenceList31.contains(obj33);
        java.lang.String str35 = charSequenceList31.toString();
        java.lang.CharSequence[] charSequenceArray37 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList38 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList38, charSequenceArray37);
        java.lang.Object obj40 = null;
        boolean boolean41 = charSequenceList38.contains(obj40);
        java.lang.String str42 = charSequenceList38.toString();
        boolean boolean43 = charSequenceList31.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList38);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean47 = charSequenceQueue45.offer((java.lang.CharSequence) "");
        boolean boolean49 = charSequenceQueue45.add((java.lang.CharSequence) "hi!");
        int int50 = charSequenceQueue45.maxSize();
        boolean boolean51 = charSequenceList31.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        boolean boolean52 = charSequenceList15.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue54 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue56 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean58 = charSequenceQueue56.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray60 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList61 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList61, charSequenceArray60);
        java.lang.Object obj63 = null;
        boolean boolean64 = charSequenceList61.contains(obj63);
        java.lang.String str65 = charSequenceList61.toString();
        java.lang.CharSequence[] charSequenceArray67 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList68 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList68, charSequenceArray67);
        java.lang.Object obj70 = null;
        boolean boolean71 = charSequenceList68.contains(obj70);
        java.lang.String str72 = charSequenceList68.toString();
        boolean boolean73 = charSequenceList61.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList68);
        boolean boolean74 = charSequenceQueue56.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList61);
        boolean boolean75 = charSequenceQueue54.remove((java.lang.Object) charSequenceQueue56);
        boolean boolean76 = charSequenceList15.remove((java.lang.Object) charSequenceQueue54);
        boolean boolean77 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence78 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[hi!]" + "'", str26, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charSequenceArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[hi!]" + "'", str35, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[hi!]" + "'", str42, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charSequenceArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[hi!]" + "'", str65, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[hi!]" + "'", str72, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor9 = charSequenceQueue1.iterator();
        boolean boolean10 = charSequenceQueue1.isAtFullCapacity();
        boolean boolean12 = charSequenceQueue1.add((java.lang.CharSequence) "[hi!, hi!]");
        java.lang.CharSequence charSequence13 = charSequenceQueue1.peek();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charSequenceItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "[hi!, hi!]" + "'", charSequence13, "[hi!, hi!]");
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        boolean boolean14 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceQueue15.stream();
        java.lang.String str17 = charSequenceQueue15.toString();
        java.lang.CharSequence charSequence18 = charSequenceQueue15.element();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream21 = charSequenceQueue20.parallelStream();
        boolean boolean23 = charSequenceQueue20.contains((java.lang.Object) 1.0d);
        boolean boolean24 = charSequenceQueue20.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue26 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator27 = charSequenceQueue26.spliterator();
        java.lang.CharSequence charSequence28 = charSequenceQueue26.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        boolean boolean33 = charSequenceQueue26.contains((java.lang.Object) charSequenceQueue30);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor34 = charSequenceQueue26.iterator();
        boolean boolean35 = charSequenceQueue20.remove((java.lang.Object) charSequenceQueue26);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean39 = charSequenceQueue37.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray42 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue43 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43, charSequenceArray42);
        boolean boolean45 = charSequenceQueue43.isAtFullCapacity();
        boolean boolean46 = charSequenceQueue37.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator49 = charSequenceQueue48.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator50 = charSequenceQueue48.spliterator();
        boolean boolean52 = charSequenceQueue48.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = charSequenceQueue48.poll();
        boolean boolean54 = charSequenceQueue43.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        boolean boolean55 = charSequenceQueue26.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        java.lang.CharSequence charSequence56 = charSequenceQueue43.poll();
        java.lang.CharSequence charSequence58 = charSequenceQueue43.get((int) (short) 0);
        boolean boolean59 = charSequenceQueue15.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue61 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean62 = charSequenceQueue43.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue61);
        java.lang.CharSequence charSequence63 = charSequenceQueue43.poll();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence64 = charSequenceQueue43.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceStream16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNotNull(charSequenceStream21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator27);
        org.junit.Assert.assertNull(charSequence28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charSequenceArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator49);
        org.junit.Assert.assertNotNull(charSequenceSpliterator50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "" + "'", charSequence56, "");
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "" + "'", charSequence58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "" + "'", charSequence63, "");
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.lang.CharSequence charSequence2 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue4 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean6 = charSequenceQueue4.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = charSequenceQueue4.element();
        java.lang.CharSequence[] charSequenceArray9 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList10 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList10, charSequenceArray9);
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.CharSequence[] charSequenceArray19 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20, charSequenceArray19);
        boolean boolean22 = charSequenceQueue20.isAtFullCapacity();
        boolean boolean23 = charSequenceList15.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        boolean boolean24 = charSequenceList10.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean25 = charSequenceQueue4.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList28 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList28, charSequenceArray27);
        java.lang.Object obj30 = null;
        boolean boolean31 = charSequenceList28.contains(obj30);
        java.lang.String str32 = charSequenceList28.toString();
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        boolean boolean40 = charSequenceList28.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList35);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream42 = charSequenceQueue41.stream();
        boolean boolean43 = charSequenceQueue4.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        java.lang.CharSequence charSequence44 = charSequenceQueue41.element();
        java.lang.CharSequence charSequence45 = charSequenceQueue41.peek();
        java.lang.String str46 = charSequenceQueue41.toString();
        boolean boolean47 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        boolean boolean49 = charSequenceQueue1.add((java.lang.CharSequence) "[]");
        java.lang.Object[] objArray50 = charSequenceQueue1.toArray();
        boolean boolean52 = charSequenceQueue1.add((java.lang.CharSequence) "[]");
        java.lang.CharSequence charSequence53 = charSequenceQueue1.poll();
        java.lang.CharSequence[] charSequenceArray55 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList56 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList56, charSequenceArray55);
        java.lang.Object obj58 = null;
        boolean boolean59 = charSequenceList56.contains(obj58);
        java.lang.String str60 = charSequenceList56.toString();
        java.lang.CharSequence[] charSequenceArray62 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList63 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList63, charSequenceArray62);
        java.lang.Object obj65 = null;
        boolean boolean66 = charSequenceList63.contains(obj65);
        java.lang.String str67 = charSequenceList63.toString();
        boolean boolean68 = charSequenceList56.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList63);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue70 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean72 = charSequenceQueue70.offer((java.lang.CharSequence) "");
        boolean boolean74 = charSequenceQueue70.add((java.lang.CharSequence) "hi!");
        int int75 = charSequenceQueue70.maxSize();
        boolean boolean76 = charSequenceList56.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue70);
        java.lang.Object[] objArray77 = charSequenceQueue70.toArray();
        boolean boolean78 = charSequenceQueue1.remove((java.lang.Object) objArray77);
        org.junit.Assert.assertNull(charSequence2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "" + "'", charSequence7, "");
        org.junit.Assert.assertNotNull(charSequenceArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[hi!]" + "'", str32, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSequenceStream42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[[]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[[]]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "[]" + "'", charSequence53, "[]");
        org.junit.Assert.assertNotNull(charSequenceArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[hi!]" + "'", str60, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[hi!]" + "'", str67, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[, hi!]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        boolean boolean7 = charSequenceQueue3.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue3.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        charSequenceQueue3.clear();
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue3);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue1.spliterator();
        int int14 = charSequenceQueue1.size();
        java.lang.String str15 = charSequenceQueue1.toString();
        int int16 = charSequenceQueue1.maxSize();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        boolean boolean20 = charSequenceQueue7.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream23 = charSequenceQueue22.parallelStream();
        boolean boolean24 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        int int25 = charSequenceQueue7.maxSize();
        java.lang.CharSequence charSequence26 = charSequenceQueue7.poll();
        int int27 = charSequenceQueue7.maxSize();
        int int28 = charSequenceQueue7.maxSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence30 = charSequenceQueue7.get((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charSequenceStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "" + "'", charSequence26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        boolean boolean15 = charSequenceQueue8.contains((java.lang.Object) false);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean19 = charSequenceQueue17.offer((java.lang.CharSequence) "");
        boolean boolean21 = charSequenceQueue17.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean24 = charSequenceQueue17.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        boolean boolean25 = charSequenceQueue8.remove((java.lang.Object) charSequenceQueue23);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator28 = charSequenceQueue27.spliterator();
        java.lang.CharSequence charSequence29 = charSequenceQueue27.peek();
        boolean boolean30 = charSequenceQueue8.contains((java.lang.Object) charSequenceQueue27);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue32 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>(10);
        java.lang.String str33 = charSequenceQueue32.toString();
        boolean boolean34 = charSequenceQueue8.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence35 = charSequenceQueue32.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator28);
        org.junit.Assert.assertNull(charSequence29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue7.iterator();
        boolean boolean16 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceQueue18.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24, charSequenceArray23);
        boolean boolean26 = charSequenceQueue24.isAtFullCapacity();
        boolean boolean27 = charSequenceQueue18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator30 = charSequenceQueue29.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator31 = charSequenceQueue29.spliterator();
        boolean boolean33 = charSequenceQueue29.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = charSequenceQueue29.poll();
        boolean boolean35 = charSequenceQueue24.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29);
        boolean boolean36 = charSequenceQueue7.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        java.lang.CharSequence charSequence37 = charSequenceQueue24.poll();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream38 = charSequenceQueue24.stream();
        boolean boolean40 = charSequenceQueue24.offer((java.lang.CharSequence) "[]");
        java.lang.Class<?> wildcardClass41 = charSequenceQueue24.getClass();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator30);
        org.junit.Assert.assertNotNull(charSequenceSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "" + "'", charSequence37, "");
        org.junit.Assert.assertNotNull(charSequenceStream38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        int int7 = charSequenceQueue1.maxSize();
        int int8 = charSequenceQueue1.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16, charSequenceArray15);
        boolean boolean18 = charSequenceQueue16.isAtFullCapacity();
        boolean boolean19 = charSequenceQueue10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream20 = charSequenceQueue10.stream();
        boolean boolean21 = charSequenceQueue1.contains((java.lang.Object) charSequenceStream20);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream24 = charSequenceQueue23.parallelStream();
        int int25 = charSequenceQueue23.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean29 = charSequenceQueue27.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray30 = charSequenceQueue27.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor31 = charSequenceQueue27.iterator();
        boolean boolean32 = charSequenceQueue23.remove((java.lang.Object) charSequenceQueue27);
        boolean boolean33 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream34 = charSequenceQueue23.parallelStream();
        boolean boolean35 = charSequenceQueue23.isAtFullCapacity();
        java.lang.AutoCloseable[] autoCloseableArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.AutoCloseable[] autoCloseableArray37 = charSequenceQueue23.toArray(autoCloseableArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charSequenceStream24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30, charSequenceArray29);
        boolean boolean32 = charSequenceQueue30.isAtFullCapacity();
        boolean boolean33 = charSequenceQueue24.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator36 = charSequenceQueue35.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue35.spliterator();
        boolean boolean39 = charSequenceQueue35.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = charSequenceQueue35.poll();
        boolean boolean41 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList45 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList45, charSequenceArray44);
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50, charSequenceArray49);
        boolean boolean52 = charSequenceQueue50.isAtFullCapacity();
        boolean boolean53 = charSequenceList45.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean54 = charSequenceQueue50.isAtFullCapacity();
        int int55 = charSequenceQueue50.maxSize();
        boolean boolean56 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean57 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean59 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = charSequenceQueue1.remove();
        boolean boolean62 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence63 = charSequenceQueue1.element();
        int int64 = charSequenceQueue1.maxSize();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator36);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "" + "'", charSequence63, "");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = charSequenceList7.contains(obj9);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceList13.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue19);
        boolean boolean23 = charSequenceQueue19.isEmpty();
        java.lang.Object[] objArray24 = charSequenceQueue19.toArray();
        java.util.Collection<java.lang.CharSequence> charSequenceCollection25 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = charSequenceQueue19.retainAll(charSequenceCollection25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor4 = charSequenceQueue1.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray10 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList11 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList11, charSequenceArray10);
        java.lang.Object obj13 = null;
        boolean boolean14 = charSequenceList11.contains(obj13);
        java.lang.String str15 = charSequenceList11.toString();
        java.lang.CharSequence[] charSequenceArray17 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList18 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18, charSequenceArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = charSequenceList18.contains(obj20);
        java.lang.String str22 = charSequenceList18.toString();
        boolean boolean23 = charSequenceList11.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18);
        boolean boolean24 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList11);
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList27 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27, charSequenceArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = charSequenceList27.contains(obj29);
        java.lang.String str31 = charSequenceList27.toString();
        java.lang.CharSequence[] charSequenceArray33 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList34 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34, charSequenceArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = charSequenceList34.contains(obj36);
        java.lang.String str38 = charSequenceList34.toString();
        boolean boolean39 = charSequenceList27.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean43 = charSequenceQueue41.offer((java.lang.CharSequence) "");
        boolean boolean45 = charSequenceQueue41.add((java.lang.CharSequence) "hi!");
        int int46 = charSequenceQueue41.maxSize();
        boolean boolean47 = charSequenceList27.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        boolean boolean48 = charSequenceList11.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        boolean boolean50 = charSequenceQueue41.remove((java.lang.Object) 100);
        boolean boolean51 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        int int52 = charSequenceQueue1.size();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNotNull(charSequenceItor4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[hi!]" + "'", str15, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[hi!]" + "'", str22, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[hi!]" + "'", str31, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[hi!]" + "'", str38, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        boolean boolean15 = charSequenceQueue8.contains((java.lang.Object) false);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator16 = charSequenceQueue8.spliterator();
        boolean boolean18 = charSequenceQueue8.add((java.lang.CharSequence) "[[hi!], [hi!]]");
        java.lang.Class<?> wildcardClass19 = charSequenceQueue8.getClass();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        boolean boolean20 = charSequenceQueue7.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream23 = charSequenceQueue22.parallelStream();
        boolean boolean24 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor25 = charSequenceQueue22.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator28 = charSequenceQueue27.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator29 = charSequenceQueue27.spliterator();
        boolean boolean31 = charSequenceQueue27.add((java.lang.CharSequence) "");
        java.lang.String str32 = charSequenceQueue27.toString();
        java.lang.CharSequence charSequence33 = charSequenceQueue27.element();
        boolean boolean34 = charSequenceQueue22.remove((java.lang.Object) charSequenceQueue27);
        boolean boolean35 = charSequenceQueue27.isEmpty();
        java.lang.Object[] objArray36 = charSequenceQueue27.toArray();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charSequenceStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charSequenceItor25);
        org.junit.Assert.assertNotNull(charSequenceSpliterator28);
        org.junit.Assert.assertNotNull(charSequenceSpliterator29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        java.lang.Comparable<java.lang.String>[][] strComparableArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable<java.lang.String>[][] strComparableArray21 = charSequenceQueue7.toArray(strComparableArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        boolean boolean6 = charSequenceQueue1.isAtFullCapacity();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor7 = charSequenceQueue1.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue1.parallelStream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream9 = charSequenceQueue1.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue11.parallelStream();
        boolean boolean14 = charSequenceQueue11.contains((java.lang.Object) 1.0d);
        boolean boolean16 = charSequenceQueue11.offer((java.lang.CharSequence) "[hi!]");
        java.lang.CharSequence charSequence17 = charSequenceQueue11.element();
        boolean boolean18 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator21 = charSequenceQueue20.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator22 = charSequenceQueue20.spliterator();
        boolean boolean24 = charSequenceQueue20.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence25 = charSequenceQueue20.poll();
        boolean boolean27 = charSequenceQueue20.add((java.lang.CharSequence) "");
        charSequenceQueue20.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = charSequenceQueue30.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream34 = charSequenceQueue30.parallelStream();
        java.lang.CharSequence[] charSequenceArray37 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList38 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList38, charSequenceArray37);
        java.lang.CharSequence[] charSequenceArray42 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue43 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43, charSequenceArray42);
        boolean boolean45 = charSequenceQueue43.isAtFullCapacity();
        boolean boolean46 = charSequenceList38.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        boolean boolean47 = charSequenceQueue43.isAtFullCapacity();
        int int48 = charSequenceQueue43.maxSize();
        boolean boolean49 = charSequenceQueue30.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        boolean boolean51 = charSequenceQueue30.offer((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = charSequenceQueue30.remove();
        boolean boolean53 = charSequenceQueue20.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        boolean boolean54 = charSequenceQueue11.remove((java.lang.Object) boolean53);
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSequenceItor7);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertNotNull(charSequenceStream9);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "[hi!]" + "'", charSequence17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator21);
        org.junit.Assert.assertNotNull(charSequenceSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "" + "'", charSequence25, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertNotNull(charSequenceStream34);
        org.junit.Assert.assertNotNull(charSequenceArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charSequenceArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 32 + "'", int48 == 32);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "" + "'", charSequence52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        boolean boolean7 = charSequenceQueue1.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue1.spliterator();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor9 = charSequenceQueue1.iterator();
        boolean boolean10 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean14 = charSequenceQueue12.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = charSequenceQueue12.peek();
        java.lang.CharSequence[] charSequenceArray17 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList18 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18, charSequenceArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = charSequenceList18.contains(obj20);
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList24 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList24, charSequenceArray23);
        java.lang.Object obj26 = null;
        boolean boolean27 = charSequenceList24.contains(obj26);
        java.lang.String str28 = charSequenceList24.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean31 = charSequenceList24.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        boolean boolean32 = charSequenceList18.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        boolean boolean33 = charSequenceQueue12.remove((java.lang.Object) charSequenceQueue30);
        int int34 = charSequenceQueue30.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue36 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue36.spliterator();
        java.lang.CharSequence charSequence38 = charSequenceQueue36.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue40 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean42 = charSequenceQueue40.offer((java.lang.CharSequence) "");
        boolean boolean43 = charSequenceQueue36.contains((java.lang.Object) charSequenceQueue40);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean47 = charSequenceQueue45.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence48 = charSequenceQueue45.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream49 = charSequenceQueue45.parallelStream();
        boolean boolean51 = charSequenceQueue45.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator52 = charSequenceQueue45.spliterator();
        boolean boolean53 = charSequenceQueue36.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        java.lang.CharSequence charSequence54 = charSequenceQueue45.poll();
        java.lang.CharSequence[] charSequenceArray56 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue57 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue57, charSequenceArray56);
        int int59 = charSequenceQueue57.maxSize();
        boolean boolean60 = charSequenceQueue57.isFull();
        java.lang.String str61 = charSequenceQueue57.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue63 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean65 = charSequenceQueue63.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray68 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue69 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue69, charSequenceArray68);
        boolean boolean71 = charSequenceQueue69.isAtFullCapacity();
        boolean boolean72 = charSequenceQueue63.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue69);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue74 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator75 = charSequenceQueue74.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator76 = charSequenceQueue74.spliterator();
        boolean boolean78 = charSequenceQueue74.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence79 = charSequenceQueue74.poll();
        boolean boolean80 = charSequenceQueue69.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue74);
        java.util.Queue[] queueArray82 = new java.util.Queue[2];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray83 = (java.util.Queue<java.lang.CharSequence>[]) queueArray82;
        charSequenceQueueArray83[0] = charSequenceQueue57;
        charSequenceQueueArray83[1] = charSequenceQueue74;
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray88 = charSequenceQueue45.toArray(charSequenceQueueArray83);
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray89 = charSequenceQueue30.toArray(charSequenceQueueArray83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<java.lang.CharSequence>[] charSequenceIterableArray90 = charSequenceQueue1.toArray((java.lang.Iterable<java.lang.CharSequence>[]) charSequenceQueueArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.String");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNotNull(charSequenceItor9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "" + "'", charSequence15, "");
        org.junit.Assert.assertNotNull(charSequenceArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[hi!]" + "'", str28, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertNull(charSequence38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "" + "'", charSequence48, "");
        org.junit.Assert.assertNotNull(charSequenceStream49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "" + "'", charSequence54, "");
        org.junit.Assert.assertNotNull(charSequenceArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 32 + "'", int59 == 32);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(charSequenceArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator75);
        org.junit.Assert.assertNotNull(charSequenceSpliterator76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + charSequence79 + "' != '" + "" + "'", charSequence79, "");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(queueArray82);
        org.junit.Assert.assertNotNull(charSequenceQueueArray83);
        org.junit.Assert.assertNotNull(charSequenceQueueArray88);
        org.junit.Assert.assertNotNull(charSequenceQueueArray89);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.lang.CharSequence charSequence12 = charSequenceQueue8.poll();
        boolean boolean13 = charSequenceQueue8.isAtFullCapacity();
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList16 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16, charSequenceArray15);
        java.lang.Object obj18 = null;
        boolean boolean19 = charSequenceList16.contains(obj18);
        java.lang.String str20 = charSequenceList16.toString();
        java.lang.CharSequence[] charSequenceArray22 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList23 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23, charSequenceArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = charSequenceList23.contains(obj25);
        java.lang.String str27 = charSequenceList23.toString();
        boolean boolean28 = charSequenceList16.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23);
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.CharSequence[] charSequenceArray36 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37, charSequenceArray36);
        boolean boolean39 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean40 = charSequenceList32.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37);
        boolean boolean41 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean42 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean43 = charSequenceList23.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37);
        boolean boolean44 = charSequenceQueue8.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor45 = charSequenceQueue8.iterator();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor46 = charSequenceQueue8.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean50 = charSequenceQueue48.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray52 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList53 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList53, charSequenceArray52);
        java.lang.Object obj55 = null;
        boolean boolean56 = charSequenceList53.contains(obj55);
        java.lang.String str57 = charSequenceList53.toString();
        java.lang.CharSequence[] charSequenceArray59 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList60 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList60, charSequenceArray59);
        java.lang.Object obj62 = null;
        boolean boolean63 = charSequenceList60.contains(obj62);
        java.lang.String str64 = charSequenceList60.toString();
        boolean boolean65 = charSequenceList53.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList60);
        boolean boolean66 = charSequenceQueue48.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList53);
        boolean boolean67 = charSequenceQueue8.remove((java.lang.Object) boolean66);
        java.lang.Class<?> wildcardClass68 = charSequenceQueue8.getClass();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!]" + "'", str20, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[hi!]" + "'", str27, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(charSequenceArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charSequenceItor45);
        org.junit.Assert.assertNotNull(charSequenceItor46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(charSequenceArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[hi!]" + "'", str57, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[hi!]" + "'", str64, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        boolean boolean8 = charSequenceQueue1.add((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream10 = charSequenceQueue1.stream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean14 = charSequenceQueue12.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = charSequenceQueue12.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceQueue12.parallelStream();
        boolean boolean18 = charSequenceQueue12.contains((java.lang.Object) (short) 100);
        boolean boolean19 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator22 = charSequenceQueue21.spliterator();
        java.lang.CharSequence charSequence23 = charSequenceQueue21.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean27 = charSequenceQueue25.offer((java.lang.CharSequence) "");
        boolean boolean28 = charSequenceQueue21.contains((java.lang.Object) charSequenceQueue25);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = charSequenceQueue30.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream34 = charSequenceQueue30.parallelStream();
        boolean boolean36 = charSequenceQueue30.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue30.spliterator();
        boolean boolean38 = charSequenceQueue21.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        java.lang.CharSequence charSequence39 = charSequenceQueue30.element();
        java.lang.CharSequence charSequence40 = charSequenceQueue30.poll();
        boolean boolean41 = charSequenceQueue12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue42 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceStream10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "" + "'", charSequence15, "");
        org.junit.Assert.assertNotNull(charSequenceStream16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator22);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertNotNull(charSequenceStream34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        int int7 = charSequenceQueue1.maxSize();
        int int8 = charSequenceQueue1.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16, charSequenceArray15);
        boolean boolean18 = charSequenceQueue16.isAtFullCapacity();
        boolean boolean19 = charSequenceQueue10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream20 = charSequenceQueue10.stream();
        boolean boolean21 = charSequenceQueue1.contains((java.lang.Object) charSequenceStream20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence22 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator9 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator10 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence11 = charSequenceQueue1.peek();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator9);
        org.junit.Assert.assertNotNull(charSequenceSpliterator10);
        org.junit.Assert.assertNull(charSequence11);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = charSequenceList7.contains(obj9);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceList13.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue19);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = charSequenceQueue24.peek();
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList30 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList30, charSequenceArray29);
        java.lang.Object obj32 = null;
        boolean boolean33 = charSequenceList30.contains(obj32);
        java.lang.CharSequence[] charSequenceArray35 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList36 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList36, charSequenceArray35);
        java.lang.Object obj38 = null;
        boolean boolean39 = charSequenceList36.contains(obj38);
        java.lang.String str40 = charSequenceList36.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue42 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean43 = charSequenceList36.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        boolean boolean44 = charSequenceList30.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        boolean boolean45 = charSequenceQueue24.remove((java.lang.Object) charSequenceQueue42);
        boolean boolean46 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator49 = charSequenceQueue48.spliterator();
        java.lang.CharSequence charSequence50 = charSequenceQueue48.peek();
        boolean boolean51 = charSequenceQueue48.isFull();
        boolean boolean52 = charSequenceQueue42.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator53 = charSequenceQueue48.spliterator();
        int int54 = charSequenceQueue48.maxSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence55 = charSequenceQueue48.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[hi!]" + "'", str40, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator49);
        org.junit.Assert.assertNull(charSequence50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30, charSequenceArray29);
        boolean boolean32 = charSequenceQueue30.isAtFullCapacity();
        boolean boolean33 = charSequenceQueue24.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator36 = charSequenceQueue35.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue35.spliterator();
        boolean boolean39 = charSequenceQueue35.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = charSequenceQueue35.poll();
        boolean boolean41 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList45 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList45, charSequenceArray44);
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50, charSequenceArray49);
        boolean boolean52 = charSequenceQueue50.isAtFullCapacity();
        boolean boolean53 = charSequenceList45.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean54 = charSequenceQueue50.isAtFullCapacity();
        int int55 = charSequenceQueue50.maxSize();
        boolean boolean56 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean57 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean59 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = charSequenceQueue1.remove();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream61 = charSequenceQueue1.stream();
        boolean boolean62 = charSequenceQueue1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator36);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(charSequenceStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        int int9 = charSequenceQueue7.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray14 = charSequenceQueue11.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue11.iterator();
        boolean boolean16 = charSequenceQueue7.remove((java.lang.Object) charSequenceQueue11);
        java.lang.CharSequence charSequence17 = charSequenceQueue11.poll();
        boolean boolean18 = charSequenceList2.contains((java.lang.Object) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean22 = charSequenceQueue20.offer((java.lang.CharSequence) "");
        charSequenceQueue20.clear();
        java.lang.CharSequence charSequence24 = charSequenceQueue20.poll();
        boolean boolean25 = charSequenceQueue11.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean29 = charSequenceQueue27.offer((java.lang.CharSequence) "");
        boolean boolean31 = charSequenceQueue27.add((java.lang.CharSequence) "hi!");
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream32 = charSequenceQueue27.stream();
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = charSequenceList42.contains(obj44);
        java.lang.String str46 = charSequenceList42.toString();
        boolean boolean47 = charSequenceList35.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue49 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean51 = charSequenceQueue49.offer((java.lang.CharSequence) "");
        boolean boolean53 = charSequenceQueue49.add((java.lang.CharSequence) "hi!");
        int int54 = charSequenceQueue49.maxSize();
        boolean boolean55 = charSequenceList35.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue49);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue57 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean59 = charSequenceQueue57.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = charSequenceQueue57.peek();
        boolean boolean62 = charSequenceQueue57.add((java.lang.CharSequence) "");
        boolean boolean63 = charSequenceList35.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue57);
        boolean boolean64 = charSequenceQueue27.contains((java.lang.Object) charSequenceQueue57);
        java.lang.CharSequence[] charSequenceArray67 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList68 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList68, charSequenceArray67);
        java.lang.CharSequence[] charSequenceArray72 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue73 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue73, charSequenceArray72);
        boolean boolean75 = charSequenceQueue73.isAtFullCapacity();
        boolean boolean76 = charSequenceList68.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue73);
        java.lang.CharSequence charSequence77 = charSequenceQueue73.poll();
        boolean boolean78 = charSequenceQueue73.isAtFullCapacity();
        java.lang.CharSequence charSequence79 = charSequenceQueue73.element();
        charSequenceQueue73.clear();
        boolean boolean81 = charSequenceQueue27.remove((java.lang.Object) charSequenceQueue73);
        boolean boolean82 = charSequenceQueue11.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence83 = charSequenceQueue73.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charSequenceStream32);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "" + "'", charSequence60, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charSequenceArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(charSequenceArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "" + "'", charSequence77, "");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + charSequence79 + "' != '" + "" + "'", charSequence79, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30, charSequenceArray29);
        boolean boolean32 = charSequenceQueue30.isAtFullCapacity();
        boolean boolean33 = charSequenceQueue24.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator36 = charSequenceQueue35.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue35.spliterator();
        boolean boolean39 = charSequenceQueue35.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = charSequenceQueue35.poll();
        boolean boolean41 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList45 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList45, charSequenceArray44);
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50, charSequenceArray49);
        boolean boolean52 = charSequenceQueue50.isAtFullCapacity();
        boolean boolean53 = charSequenceList45.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean54 = charSequenceQueue50.isAtFullCapacity();
        int int55 = charSequenceQueue50.maxSize();
        boolean boolean56 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean57 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean59 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        int int60 = charSequenceQueue1.maxSize();
        charSequenceQueue1.clear();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator36);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.lang.String str41 = charSequenceQueue38.toString();
        int int42 = charSequenceQueue38.size();
        java.lang.Object[] objArray43 = charSequenceQueue38.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream46 = charSequenceQueue45.parallelStream();
        boolean boolean48 = charSequenceQueue45.contains((java.lang.Object) 1.0d);
        boolean boolean49 = charSequenceQueue45.isFull();
        boolean boolean50 = charSequenceQueue45.isFull();
        int int51 = charSequenceQueue45.maxSize();
        int int52 = charSequenceQueue45.maxSize();
        java.lang.CharSequence charSequence53 = charSequenceQueue45.peek();
        boolean boolean54 = charSequenceQueue38.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        java.lang.Class<?> wildcardClass55 = charSequenceQueue45.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[hi!]" + "'", str41, "[hi!]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceStream46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNull(charSequence53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        charSequenceQueue8.clear();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator11 = charSequenceQueue8.spliterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue13 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean15 = charSequenceQueue13.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray16 = charSequenceQueue13.toArray();
        boolean boolean17 = charSequenceQueue8.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue13);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean21 = charSequenceQueue19.offer((java.lang.CharSequence) "");
        java.lang.String str22 = charSequenceQueue19.toString();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor23 = charSequenceQueue19.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream24 = charSequenceQueue19.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue26 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean28 = charSequenceQueue26.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence29 = charSequenceQueue26.peek();
        boolean boolean30 = charSequenceQueue19.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue26);
        boolean boolean31 = charSequenceQueue8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue26);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream32 = charSequenceQueue26.parallelStream();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(charSequenceItor23);
        org.junit.Assert.assertNotNull(charSequenceStream24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "" + "'", charSequence29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charSequenceStream32);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        int int9 = charSequenceQueue7.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray14 = charSequenceQueue11.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue11.iterator();
        boolean boolean16 = charSequenceQueue7.remove((java.lang.Object) charSequenceQueue11);
        java.lang.CharSequence charSequence17 = charSequenceQueue11.poll();
        boolean boolean18 = charSequenceList2.contains((java.lang.Object) charSequenceQueue11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence20 = charSequenceQueue11.get((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        boolean boolean20 = charSequenceQueue7.isFull();
        java.lang.String str21 = charSequenceQueue7.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean25 = charSequenceQueue23.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray28 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29, charSequenceArray28);
        boolean boolean31 = charSequenceQueue29.isAtFullCapacity();
        boolean boolean32 = charSequenceQueue23.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator35 = charSequenceQueue34.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator36 = charSequenceQueue34.spliterator();
        boolean boolean38 = charSequenceQueue34.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence39 = charSequenceQueue34.poll();
        boolean boolean40 = charSequenceQueue29.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        java.lang.Object[] objArray41 = charSequenceQueue34.toArray();
        boolean boolean42 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        java.lang.String str43 = charSequenceQueue34.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence44 = charSequenceQueue34.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charSequenceArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator35);
        org.junit.Assert.assertNotNull(charSequenceSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.Object obj9 = null;
        boolean boolean10 = charSequenceList7.contains(obj9);
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceList13.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue19);
        boolean boolean24 = charSequenceQueue1.add((java.lang.CharSequence) "");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList28 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList28, charSequenceArray27);
        java.lang.Object obj30 = null;
        boolean boolean31 = charSequenceList28.contains(obj30);
        java.lang.String str32 = charSequenceList28.toString();
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        boolean boolean40 = charSequenceList28.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList35);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream42 = charSequenceQueue41.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream43 = charSequenceQueue41.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator46 = charSequenceQueue45.spliterator();
        java.lang.CharSequence charSequence47 = charSequenceQueue45.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue49 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean51 = charSequenceQueue49.offer((java.lang.CharSequence) "");
        boolean boolean52 = charSequenceQueue45.contains((java.lang.Object) charSequenceQueue49);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor53 = charSequenceQueue45.iterator();
        boolean boolean54 = charSequenceQueue41.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        int int55 = charSequenceQueue45.size();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor56 = charSequenceQueue45.iterator();
        boolean boolean57 = charSequenceQueue25.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        java.lang.Class<?> wildcardClass58 = charSequenceQueue25.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[hi!]" + "'", str32, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSequenceStream42);
        org.junit.Assert.assertNotNull(charSequenceStream43);
        org.junit.Assert.assertNotNull(charSequenceSpliterator46);
        org.junit.Assert.assertNull(charSequence47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charSequenceItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(charSequenceItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.lang.CharSequence charSequence12 = charSequenceQueue8.poll();
        boolean boolean13 = charSequenceQueue8.isAtFullCapacity();
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList16 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16, charSequenceArray15);
        java.lang.Object obj18 = null;
        boolean boolean19 = charSequenceList16.contains(obj18);
        java.lang.String str20 = charSequenceList16.toString();
        java.lang.CharSequence[] charSequenceArray22 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList23 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23, charSequenceArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = charSequenceList23.contains(obj25);
        java.lang.String str27 = charSequenceList23.toString();
        boolean boolean28 = charSequenceList16.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23);
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.CharSequence[] charSequenceArray36 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37, charSequenceArray36);
        boolean boolean39 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean40 = charSequenceList32.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37);
        boolean boolean41 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean42 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean43 = charSequenceList23.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37);
        boolean boolean44 = charSequenceQueue8.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23);
        java.lang.Object[] objArray45 = charSequenceQueue8.toArray();
        charSequenceQueue8.clear();
        java.lang.String str47 = charSequenceQueue8.toString();
        boolean boolean48 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean50 = charSequenceQueue8.offer((java.lang.CharSequence) "[, , [[hi!], [hi!]]]");
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!]" + "'", str20, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[hi!]" + "'", str27, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(charSequenceArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator7 = charSequenceQueue6.spliterator();
        java.lang.CharSequence charSequence8 = charSequenceQueue6.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        boolean boolean13 = charSequenceQueue6.contains((java.lang.Object) charSequenceQueue10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean17 = charSequenceQueue15.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = charSequenceQueue15.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream19 = charSequenceQueue15.parallelStream();
        boolean boolean21 = charSequenceQueue15.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator22 = charSequenceQueue15.spliterator();
        boolean boolean23 = charSequenceQueue6.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue15);
        java.lang.CharSequence charSequence24 = charSequenceQueue15.poll();
        int int25 = charSequenceQueue15.size();
        boolean boolean26 = charSequenceQueue1.contains((java.lang.Object) int25);
        int int27 = charSequenceQueue1.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean31 = charSequenceQueue29.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray32 = charSequenceQueue29.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor33 = charSequenceQueue29.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream34 = charSequenceQueue29.parallelStream();
        boolean boolean35 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue29);
        java.lang.Class<?> wildcardClass36 = charSequenceQueue29.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator7);
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertNotNull(charSequenceStream19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "" + "'", charSequence24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor33);
        org.junit.Assert.assertNotNull(charSequenceStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        int int7 = charSequenceQueue1.maxSize();
        int int8 = charSequenceQueue1.maxSize();
        java.lang.CharSequence charSequence9 = charSequenceQueue1.peek();
        int int10 = charSequenceQueue1.size();
        java.lang.Class<?> wildcardClass11 = charSequenceQueue1.getClass();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        java.lang.CharSequence charSequence4 = charSequenceQueue1.poll();
        boolean boolean5 = charSequenceQueue1.isFull();
        java.lang.Class<?> wildcardClass6 = charSequenceQueue1.getClass();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.stream();
        boolean boolean9 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = charSequenceQueue1.get(0);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
        java.lang.Class<?> wildcardClass13 = charSequenceQueue12.getClass();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertNotNull(charSequenceStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.lang.CharSequence charSequence5 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean9 = charSequenceQueue7.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence10 = charSequenceQueue7.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream11 = charSequenceQueue7.parallelStream();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.CharSequence[] charSequenceArray19 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20, charSequenceArray19);
        boolean boolean22 = charSequenceQueue20.isAtFullCapacity();
        boolean boolean23 = charSequenceList15.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        boolean boolean24 = charSequenceQueue20.isAtFullCapacity();
        int int25 = charSequenceQueue20.maxSize();
        boolean boolean26 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        boolean boolean28 = charSequenceQueue7.offer((java.lang.CharSequence) "hi!");
        boolean boolean29 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor30 = charSequenceQueue7.iterator();
        int int31 = charSequenceQueue7.maxSize();
        java.lang.Class<?> wildcardClass32 = charSequenceQueue7.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertNotNull(charSequenceStream11);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charSequenceItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray4 = charSequenceQueue1.toArray();
        java.lang.Object[] objArray5 = charSequenceQueue1.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean9 = charSequenceQueue7.offer((java.lang.CharSequence) "");
        boolean boolean11 = charSequenceQueue7.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue13 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean14 = charSequenceQueue7.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue13);
        charSequenceQueue7.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceQueue7.parallelStream();
        boolean boolean17 = charSequenceQueue1.remove((java.lang.Object) charSequenceStream16);
        java.lang.Object[] objArray18 = charSequenceQueue1.toArray();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(charSequenceStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        charSequenceQueue1.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        boolean boolean7 = charSequenceQueue1.isEmpty();
        int int8 = charSequenceQueue1.maxSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence10 = charSequenceQueue1.get(10);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (10) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor14 = charSequenceQueue8.iterator();
        int int15 = charSequenceQueue8.size();
        boolean boolean17 = charSequenceQueue8.add((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray19 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList20 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList20, charSequenceArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = charSequenceList20.contains(obj22);
        java.lang.String str24 = charSequenceList20.toString();
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList27 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27, charSequenceArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = charSequenceList27.contains(obj29);
        java.lang.String str31 = charSequenceList27.toString();
        boolean boolean32 = charSequenceList20.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue33 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList27);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream34 = charSequenceQueue33.stream();
        java.lang.CharSequence charSequence35 = charSequenceQueue33.poll();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean39 = charSequenceQueue37.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = charSequenceQueue37.element();
        java.lang.CharSequence[] charSequenceArray42 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList43 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList43, charSequenceArray42);
        java.lang.CharSequence[] charSequenceArray47 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList48 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48, charSequenceArray47);
        java.lang.CharSequence[] charSequenceArray52 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue53 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue53, charSequenceArray52);
        boolean boolean55 = charSequenceQueue53.isAtFullCapacity();
        boolean boolean56 = charSequenceList48.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue53);
        boolean boolean57 = charSequenceList43.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48);
        boolean boolean58 = charSequenceQueue37.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48);
        java.lang.CharSequence[] charSequenceArray60 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList61 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList61, charSequenceArray60);
        java.lang.Object obj63 = null;
        boolean boolean64 = charSequenceList61.contains(obj63);
        java.lang.String str65 = charSequenceList61.toString();
        java.lang.CharSequence[] charSequenceArray67 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList68 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList68, charSequenceArray67);
        java.lang.Object obj70 = null;
        boolean boolean71 = charSequenceList68.contains(obj70);
        java.lang.String str72 = charSequenceList68.toString();
        boolean boolean73 = charSequenceList61.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList68);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue74 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList68);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream75 = charSequenceQueue74.stream();
        boolean boolean76 = charSequenceQueue37.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue74);
        java.lang.String str77 = charSequenceQueue74.toString();
        int int78 = charSequenceQueue74.size();
        java.lang.Object[] objArray79 = charSequenceQueue74.toArray();
        boolean boolean80 = charSequenceQueue33.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue74);
        boolean boolean81 = charSequenceQueue8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue33);
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertNotNull(charSequenceItor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[hi!]" + "'", str24, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[hi!]" + "'", str31, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charSequenceStream34);
        org.junit.Assert.assertEquals("'" + charSequence35 + "' != '" + "hi!" + "'", charSequence35, "hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertNotNull(charSequenceArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(charSequenceArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(charSequenceArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(charSequenceArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[hi!]" + "'", str65, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[hi!]" + "'", str72, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(charSequenceStream75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[hi!]" + "'", str77, "[hi!]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray4 = charSequenceQueue1.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor5 = charSequenceQueue1.iterator();
        boolean boolean6 = charSequenceQueue1.isFull();
        boolean boolean8 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray10 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList11 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList11, charSequenceArray10);
        java.lang.Object obj13 = null;
        boolean boolean14 = charSequenceList11.contains(obj13);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = charSequenceList17.contains(obj19);
        java.lang.String str21 = charSequenceList17.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean24 = charSequenceList17.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        boolean boolean25 = charSequenceList11.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean28 = charSequenceList11.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27);
        java.lang.CharSequence[] charSequenceArray30 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList31 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList31, charSequenceArray30);
        java.lang.Object obj33 = null;
        boolean boolean34 = charSequenceList31.contains(obj33);
        java.lang.CharSequence[] charSequenceArray36 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList37 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList37, charSequenceArray36);
        java.lang.Object obj39 = null;
        boolean boolean40 = charSequenceList37.contains(obj39);
        java.lang.String str41 = charSequenceList37.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue43 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean44 = charSequenceList37.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        boolean boolean45 = charSequenceList31.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue47 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean48 = charSequenceList31.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue47);
        boolean boolean49 = charSequenceQueue27.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue47);
        boolean boolean50 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue47);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue52 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream53 = charSequenceQueue52.parallelStream();
        boolean boolean55 = charSequenceQueue52.contains((java.lang.Object) 1.0d);
        boolean boolean56 = charSequenceQueue52.isFull();
        boolean boolean57 = charSequenceQueue52.isFull();
        int int58 = charSequenceQueue52.maxSize();
        int int59 = charSequenceQueue52.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue61 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean63 = charSequenceQueue61.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray66 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue67 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue67, charSequenceArray66);
        boolean boolean69 = charSequenceQueue67.isAtFullCapacity();
        boolean boolean70 = charSequenceQueue61.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue67);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream71 = charSequenceQueue61.stream();
        boolean boolean72 = charSequenceQueue52.contains((java.lang.Object) charSequenceStream71);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator73 = charSequenceQueue52.spliterator();
        int int74 = charSequenceQueue52.maxSize();
        boolean boolean75 = charSequenceQueue47.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue52);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator76 = charSequenceQueue47.spliterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[hi!]" + "'", str21, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(charSequenceArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charSequenceArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[hi!]" + "'", str41, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(charSequenceStream53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(charSequenceArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charSequenceStream71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator76);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        java.lang.CharSequence[] charSequenceArray3 = new java.lang.CharSequence[] { "[[hi!], [hi!]]", "hi!", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue4 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue4, charSequenceArray3);
        boolean boolean6 = charSequenceQueue4.isEmpty();
        charSequenceQueue4.clear();
        int int8 = charSequenceQueue4.size();
        org.junit.Assert.assertNotNull(charSequenceArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean17 = charSequenceQueue15.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray19 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList20 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList20, charSequenceArray19);
        java.lang.Object obj22 = null;
        boolean boolean23 = charSequenceList20.contains(obj22);
        java.lang.String str24 = charSequenceList20.toString();
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList27 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27, charSequenceArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = charSequenceList27.contains(obj29);
        java.lang.String str31 = charSequenceList27.toString();
        boolean boolean32 = charSequenceList20.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27);
        boolean boolean33 = charSequenceQueue15.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList20);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator34 = charSequenceQueue15.spliterator();
        boolean boolean36 = charSequenceQueue15.offer((java.lang.CharSequence) "[hi!]");
        java.lang.CharSequence[] charSequenceArray39 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList40 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList40, charSequenceArray39);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45, charSequenceArray44);
        boolean boolean47 = charSequenceQueue45.isAtFullCapacity();
        boolean boolean48 = charSequenceList40.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        boolean boolean49 = charSequenceQueue45.isAtFullCapacity();
        java.lang.Object[] objArray50 = charSequenceQueue45.toArray();
        boolean boolean52 = charSequenceQueue45.contains((java.lang.Object) false);
        boolean boolean53 = charSequenceQueue15.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        boolean boolean54 = charSequenceQueue8.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        java.lang.CharSequence charSequence55 = charSequenceQueue8.remove();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue57 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean59 = charSequenceQueue57.offer((java.lang.CharSequence) "");
        charSequenceQueue57.clear();
        java.lang.CharSequence charSequence61 = charSequenceQueue57.peek();
        java.lang.CharSequence[] charSequenceArray63 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList64 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList64, charSequenceArray63);
        java.lang.Object obj66 = null;
        boolean boolean67 = charSequenceList64.contains(obj66);
        java.lang.String str68 = charSequenceList64.toString();
        java.lang.CharSequence[] charSequenceArray70 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList71 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList71, charSequenceArray70);
        java.lang.Object obj73 = null;
        boolean boolean74 = charSequenceList71.contains(obj73);
        java.lang.String str75 = charSequenceList71.toString();
        boolean boolean76 = charSequenceList64.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList71);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue78 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean80 = charSequenceQueue78.offer((java.lang.CharSequence) "");
        boolean boolean82 = charSequenceQueue78.add((java.lang.CharSequence) "hi!");
        int int83 = charSequenceQueue78.maxSize();
        boolean boolean84 = charSequenceList64.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue78);
        boolean boolean86 = charSequenceList64.remove((java.lang.Object) 0);
        boolean boolean87 = charSequenceQueue57.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList64);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue88 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean89 = charSequenceQueue57.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue88);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator90 = charSequenceQueue88.spliterator();
        boolean boolean91 = charSequenceQueue8.remove((java.lang.Object) charSequenceSpliterator90);
        java.lang.Object[] objArray92 = charSequenceQueue8.toArray();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[hi!]" + "'", str24, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[hi!]" + "'", str31, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(charSequenceArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[, ]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(charSequence61);
        org.junit.Assert.assertNotNull(charSequenceArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[hi!]" + "'", str68, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[hi!]" + "'", str75, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.util.List<java.lang.CharSequence>> charSequenceListQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.List<java.lang.CharSequence>>(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Comparable<java.lang.String>> strComparableQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Comparable<java.lang.String>>((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        java.lang.CharSequence charSequence4 = charSequenceQueue1.poll();
        boolean boolean5 = charSequenceQueue1.isFull();
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        boolean boolean7 = charSequenceQueue1.isAtFullCapacity();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream10 = charSequenceQueue9.parallelStream();
        boolean boolean12 = charSequenceQueue9.contains((java.lang.Object) 1.0d);
        boolean boolean13 = charSequenceQueue9.isFull();
        boolean boolean14 = charSequenceQueue9.isFull();
        int int15 = charSequenceQueue9.maxSize();
        int int16 = charSequenceQueue9.maxSize();
        java.lang.CharSequence charSequence17 = charSequenceQueue9.peek();
        boolean boolean18 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence20 = charSequenceQueue1.get(5);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (5) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSequenceStream10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator6 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence7 = charSequenceQueue1.element();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertNotNull(charSequenceSpliterator6);
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "" + "'", charSequence7, "");
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.AnnotatedElement> annotatedElementQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.AnnotatedElement>(32);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence3 = charSequenceQueue1.get((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        boolean boolean8 = charSequenceQueue1.add((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream10 = charSequenceQueue1.stream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean14 = charSequenceQueue12.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = charSequenceQueue12.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceQueue12.parallelStream();
        boolean boolean18 = charSequenceQueue12.contains((java.lang.Object) (short) 100);
        boolean boolean19 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator22 = charSequenceQueue21.spliterator();
        java.lang.CharSequence charSequence23 = charSequenceQueue21.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean27 = charSequenceQueue25.offer((java.lang.CharSequence) "");
        boolean boolean28 = charSequenceQueue21.contains((java.lang.Object) charSequenceQueue25);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence33 = charSequenceQueue30.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream34 = charSequenceQueue30.parallelStream();
        boolean boolean36 = charSequenceQueue30.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue30.spliterator();
        boolean boolean38 = charSequenceQueue21.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        java.lang.CharSequence charSequence39 = charSequenceQueue30.element();
        java.lang.CharSequence charSequence40 = charSequenceQueue30.poll();
        boolean boolean41 = charSequenceQueue12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence42 = charSequenceQueue12.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceStream10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "" + "'", charSequence15, "");
        org.junit.Assert.assertNotNull(charSequenceStream16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator22);
        org.junit.Assert.assertNull(charSequence23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertNotNull(charSequenceStream34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence13 = charSequenceQueue10.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream14 = charSequenceQueue10.parallelStream();
        boolean boolean16 = charSequenceQueue10.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator17 = charSequenceQueue10.spliterator();
        boolean boolean18 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10);
        java.lang.CharSequence charSequence19 = charSequenceQueue10.element();
        java.lang.CharSequence charSequence20 = charSequenceQueue10.poll();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator23 = charSequenceQueue22.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator24 = charSequenceQueue22.spliterator();
        boolean boolean26 = charSequenceQueue22.add((java.lang.CharSequence) "");
        boolean boolean27 = charSequenceQueue22.isAtFullCapacity();
        java.lang.CharSequence charSequence28 = charSequenceQueue22.element();
        int int29 = charSequenceQueue22.size();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream30 = charSequenceQueue22.stream();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator31 = charSequenceQueue22.spliterator();
        boolean boolean32 = charSequenceQueue22.isFull();
        boolean boolean34 = charSequenceQueue22.contains((java.lang.Object) ' ');
        boolean boolean35 = charSequenceQueue10.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean39 = charSequenceQueue37.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray42 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue43 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43, charSequenceArray42);
        boolean boolean45 = charSequenceQueue43.isAtFullCapacity();
        boolean boolean46 = charSequenceQueue37.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator49 = charSequenceQueue48.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator50 = charSequenceQueue48.spliterator();
        boolean boolean52 = charSequenceQueue48.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence53 = charSequenceQueue48.poll();
        boolean boolean54 = charSequenceQueue43.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.lang.CharSequence[] charSequenceArray57 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList58 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList58, charSequenceArray57);
        java.lang.CharSequence[] charSequenceArray62 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue63 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue63, charSequenceArray62);
        boolean boolean65 = charSequenceQueue63.isAtFullCapacity();
        boolean boolean66 = charSequenceList58.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue63);
        boolean boolean67 = charSequenceQueue63.isAtFullCapacity();
        int int68 = charSequenceQueue63.maxSize();
        boolean boolean69 = charSequenceQueue43.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue63);
        boolean boolean70 = charSequenceQueue10.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence71 = charSequenceQueue10.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
        org.junit.Assert.assertNotNull(charSequenceStream14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertNotNull(charSequenceSpliterator23);
        org.junit.Assert.assertNotNull(charSequenceSpliterator24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(charSequenceStream30);
        org.junit.Assert.assertNotNull(charSequenceSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charSequenceArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator49);
        org.junit.Assert.assertNotNull(charSequenceSpliterator50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(charSequenceArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(charSequenceArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 32 + "'", int68 == 32);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue2 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue2, charSequenceArray1);
        int int4 = charSequenceQueue2.maxSize();
        boolean boolean5 = charSequenceQueue2.isAtFullCapacity();
        java.lang.String str6 = charSequenceQueue2.toString();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence10 = charSequenceQueue8.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.lang.CharSequence charSequence2 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue4 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean6 = charSequenceQueue4.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence7 = charSequenceQueue4.element();
        java.lang.CharSequence[] charSequenceArray9 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList10 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList10, charSequenceArray9);
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.CharSequence[] charSequenceArray19 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20, charSequenceArray19);
        boolean boolean22 = charSequenceQueue20.isAtFullCapacity();
        boolean boolean23 = charSequenceList15.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        boolean boolean24 = charSequenceList10.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean25 = charSequenceQueue4.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList28 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList28, charSequenceArray27);
        java.lang.Object obj30 = null;
        boolean boolean31 = charSequenceList28.contains(obj30);
        java.lang.String str32 = charSequenceList28.toString();
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        boolean boolean40 = charSequenceList28.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList35);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream42 = charSequenceQueue41.stream();
        boolean boolean43 = charSequenceQueue4.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        java.lang.CharSequence charSequence44 = charSequenceQueue41.element();
        java.lang.CharSequence charSequence45 = charSequenceQueue41.peek();
        java.lang.String str46 = charSequenceQueue41.toString();
        boolean boolean47 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        boolean boolean49 = charSequenceQueue1.add((java.lang.CharSequence) "[]");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue51 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean53 = charSequenceQueue51.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray56 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue57 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue57, charSequenceArray56);
        boolean boolean59 = charSequenceQueue57.isAtFullCapacity();
        boolean boolean60 = charSequenceQueue51.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue57);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue62 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator63 = charSequenceQueue62.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator64 = charSequenceQueue62.spliterator();
        boolean boolean66 = charSequenceQueue62.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence67 = charSequenceQueue62.poll();
        boolean boolean68 = charSequenceQueue57.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue62);
        boolean boolean69 = charSequenceQueue62.isEmpty();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream70 = charSequenceQueue62.stream();
        boolean boolean71 = charSequenceQueue62.isEmpty();
        boolean boolean72 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue62);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue74 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean76 = charSequenceQueue74.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray79 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue80 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue80, charSequenceArray79);
        boolean boolean82 = charSequenceQueue80.isAtFullCapacity();
        boolean boolean83 = charSequenceQueue74.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue80);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue85 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator86 = charSequenceQueue85.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator87 = charSequenceQueue85.spliterator();
        boolean boolean89 = charSequenceQueue85.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence90 = charSequenceQueue85.poll();
        boolean boolean91 = charSequenceQueue80.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue85);
        boolean boolean92 = charSequenceQueue62.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue80);
        int int93 = charSequenceQueue62.size();
        org.junit.Assert.assertNull(charSequence2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "" + "'", charSequence7, "");
        org.junit.Assert.assertNotNull(charSequenceArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[hi!]" + "'", str32, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSequenceStream42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(charSequenceArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator63);
        org.junit.Assert.assertNotNull(charSequenceSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "" + "'", charSequence67, "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(charSequenceStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(charSequenceArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator86);
        org.junit.Assert.assertNotNull(charSequenceSpliterator87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + charSequence90 + "' != '" + "" + "'", charSequence90, "");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue7.iterator();
        boolean boolean16 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceQueue18.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24, charSequenceArray23);
        boolean boolean26 = charSequenceQueue24.isAtFullCapacity();
        boolean boolean27 = charSequenceQueue18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator30 = charSequenceQueue29.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator31 = charSequenceQueue29.spliterator();
        boolean boolean33 = charSequenceQueue29.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = charSequenceQueue29.poll();
        boolean boolean35 = charSequenceQueue24.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29);
        boolean boolean36 = charSequenceQueue7.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        java.lang.CharSequence charSequence37 = charSequenceQueue24.poll();
        java.lang.CharSequence charSequence39 = charSequenceQueue24.get((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence41 = charSequenceQueue24.get((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (32) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator30);
        org.junit.Assert.assertNotNull(charSequenceSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "" + "'", charSequence37, "");
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor10 = charSequenceQueue8.iterator();
        charSequenceQueue8.clear();
        java.lang.CharSequence charSequence12 = charSequenceQueue8.poll();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean16 = charSequenceQueue14.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue14.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean21 = charSequenceQueue19.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = charSequenceQueue19.element();
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList30 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList30, charSequenceArray29);
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35, charSequenceArray34);
        boolean boolean37 = charSequenceQueue35.isAtFullCapacity();
        boolean boolean38 = charSequenceList30.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        boolean boolean39 = charSequenceList25.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList30);
        boolean boolean40 = charSequenceQueue19.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList30);
        boolean boolean41 = charSequenceQueue14.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList30);
        java.lang.Object[] objArray42 = charSequenceQueue14.toArray();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream43 = charSequenceQueue14.parallelStream();
        charSequenceQueue14.clear();
        boolean boolean46 = charSequenceQueue14.add((java.lang.CharSequence) "");
        boolean boolean47 = charSequenceQueue8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean49 = charSequenceQueue8.offer((java.lang.CharSequence) "[, , [[hi!], [hi!]]]");
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceItor10);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(charSequenceStream43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.GenericDeclaration[]>((int) (short) 10);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean11 = charSequenceQueue7.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue13 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean15 = charSequenceQueue13.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = charSequenceQueue13.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream17 = charSequenceQueue13.parallelStream();
        boolean boolean19 = charSequenceQueue13.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator20 = charSequenceQueue13.spliterator();
        boolean boolean21 = charSequenceQueue13.isAtFullCapacity();
        boolean boolean22 = charSequenceQueue7.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue13);
        java.lang.reflect.AnnotatedElement[] annotatedElementArray23 = new java.lang.reflect.AnnotatedElement[] {};
        java.lang.reflect.AnnotatedElement[] annotatedElementArray24 = new java.lang.reflect.AnnotatedElement[] {};
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray25 = new java.lang.reflect.AnnotatedElement[][] { annotatedElementArray23, annotatedElementArray24 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.AnnotatedElement[][] annotatedElementArray26 = charSequenceQueue7.toArray(annotatedElementArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "" + "'", charSequence16, "");
        org.junit.Assert.assertNotNull(charSequenceStream17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(annotatedElementArray23);
        org.junit.Assert.assertNotNull(annotatedElementArray24);
        org.junit.Assert.assertNotNull(annotatedElementArray25);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.String str6 = charSequenceQueue1.toString();
        java.lang.CharSequence charSequence7 = charSequenceQueue1.element();
        java.lang.CharSequence charSequence8 = charSequenceQueue1.remove();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor9 = charSequenceQueue1.iterator();
        java.lang.CharSequence charSequence10 = charSequenceQueue1.poll();
        java.lang.Class<?> wildcardClass11 = charSequenceQueue1.getClass();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "" + "'", charSequence7, "");
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertNotNull(charSequenceItor9);
        org.junit.Assert.assertNull(charSequence10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.stream();
        boolean boolean9 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = charSequenceQueue1.get(0);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue1);
        java.lang.CharSequence charSequence13 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue17);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator23 = charSequenceQueue22.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator24 = charSequenceQueue22.spliterator();
        boolean boolean26 = charSequenceQueue22.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = charSequenceQueue22.poll();
        boolean boolean29 = charSequenceQueue22.add((java.lang.CharSequence) "");
        charSequenceQueue22.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue32 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean36 = charSequenceQueue34.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray38 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList39 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39, charSequenceArray38);
        java.lang.Object obj41 = null;
        boolean boolean42 = charSequenceList39.contains(obj41);
        java.lang.String str43 = charSequenceList39.toString();
        java.lang.CharSequence[] charSequenceArray45 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList46 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList46, charSequenceArray45);
        java.lang.Object obj48 = null;
        boolean boolean49 = charSequenceList46.contains(obj48);
        java.lang.String str50 = charSequenceList46.toString();
        boolean boolean51 = charSequenceList39.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList46);
        boolean boolean52 = charSequenceQueue34.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        boolean boolean53 = charSequenceQueue32.remove((java.lang.Object) charSequenceQueue34);
        boolean boolean54 = charSequenceQueue22.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue32);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor55 = charSequenceQueue22.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue57 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator58 = charSequenceQueue57.spliterator();
        java.lang.CharSequence charSequence59 = charSequenceQueue57.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue61 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean63 = charSequenceQueue61.offer((java.lang.CharSequence) "");
        boolean boolean64 = charSequenceQueue57.contains((java.lang.Object) charSequenceQueue61);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor65 = charSequenceQueue57.iterator();
        java.util.Iterator[] iteratorArray67 = new java.util.Iterator[2];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.lang.CharSequence>[] charSequenceItorArray68 = (java.util.Iterator<java.lang.CharSequence>[]) iteratorArray67;
        charSequenceItorArray68[0] = charSequenceItor55;
        charSequenceItorArray68[1] = charSequenceItor65;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.lang.CharSequence>[] charSequenceItorArray73 = charSequenceQueue17.toArray(charSequenceItorArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertNotNull(charSequenceStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator23);
        org.junit.Assert.assertNotNull(charSequenceSpliterator24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(charSequenceArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[hi!]" + "'", str43, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[hi!]" + "'", str50, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(charSequenceItor55);
        org.junit.Assert.assertNotNull(charSequenceSpliterator58);
        org.junit.Assert.assertNull(charSequence59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charSequenceItor65);
        org.junit.Assert.assertNotNull(iteratorArray67);
        org.junit.Assert.assertNotNull(charSequenceItorArray68);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.CharSequence[] charSequenceArray13 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14, charSequenceArray13);
        boolean boolean16 = charSequenceQueue14.isAtFullCapacity();
        boolean boolean17 = charSequenceList9.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean18 = charSequenceQueue14.isAtFullCapacity();
        int int19 = charSequenceQueue14.maxSize();
        boolean boolean20 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean22 = charSequenceQueue1.offer((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator25 = charSequenceQueue24.spliterator();
        java.lang.CharSequence charSequence26 = charSequenceQueue24.peek();
        java.lang.Iterable[] iterableArray28 = new java.lang.Iterable[1];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<java.lang.CharSequence>[] charSequenceIterableArray29 = (java.lang.Iterable<java.lang.CharSequence>[]) iterableArray28;
        charSequenceIterableArray29[0] = charSequenceQueue24;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<java.lang.CharSequence>[] charSequenceIterableArray32 = charSequenceQueue1.toArray(charSequenceIterableArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charSequenceArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator25);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertNotNull(iterableArray28);
        org.junit.Assert.assertNotNull(charSequenceIterableArray29);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean12 = charSequenceQueue7.offer((java.lang.CharSequence) "[[hi!], [hi!]]");
        int int13 = charSequenceQueue7.maxSize();
        java.lang.CharSequence charSequence14 = charSequenceQueue7.element();
        int int15 = charSequenceQueue7.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.util.AbstractList<java.lang.CharSequence>> charSequenceListQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.AbstractList<java.lang.CharSequence>>(32);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.Object[] objArray6 = charSequenceQueue1.toArray();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.stream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        int int10 = charSequenceQueue9.maxSize();
        java.util.Queue[] queueArray12 = new java.util.Queue[0];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray13 = (java.util.Queue<java.lang.CharSequence>[]) queueArray12;
        java.util.Queue[] queueArray15 = new java.util.Queue[0];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray16 = (java.util.Queue<java.lang.CharSequence>[]) queueArray15;
        java.util.Queue[] queueArray18 = new java.util.Queue[0];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray19 = (java.util.Queue<java.lang.CharSequence>[]) queueArray18;
        java.util.Queue[] queueArray21 = new java.util.Queue[0];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray22 = (java.util.Queue<java.lang.CharSequence>[]) queueArray21;
        java.util.Queue[] queueArray24 = new java.util.Queue[0];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray25 = (java.util.Queue<java.lang.CharSequence>[]) queueArray24;
        java.util.Queue[][] queueArray27 = new java.util.Queue[5][];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[][] charSequenceQueueArray28 = (java.util.Queue<java.lang.CharSequence>[][]) queueArray27;
        charSequenceQueueArray28[0] = charSequenceQueueArray13;
        charSequenceQueueArray28[1] = charSequenceQueueArray16;
        charSequenceQueueArray28[2] = queueArray18;
        charSequenceQueueArray28[3] = charSequenceQueueArray22;
        charSequenceQueueArray28[4] = charSequenceQueueArray25;
        java.util.Queue<java.lang.CharSequence>[][] charSequenceQueueArray39 = charSequenceQueue9.toArray(charSequenceQueueArray28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray40 = charSequenceQueue1.toArray((java.lang.Object[]) charSequenceQueueArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(charSequenceStream7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(queueArray12);
        org.junit.Assert.assertNotNull(charSequenceQueueArray13);
        org.junit.Assert.assertNotNull(queueArray15);
        org.junit.Assert.assertNotNull(charSequenceQueueArray16);
        org.junit.Assert.assertNotNull(queueArray18);
        org.junit.Assert.assertNotNull(charSequenceQueueArray19);
        org.junit.Assert.assertNotNull(queueArray21);
        org.junit.Assert.assertNotNull(charSequenceQueueArray22);
        org.junit.Assert.assertNotNull(queueArray24);
        org.junit.Assert.assertNotNull(charSequenceQueueArray25);
        org.junit.Assert.assertNotNull(queueArray27);
        org.junit.Assert.assertNotNull(charSequenceQueueArray28);
        org.junit.Assert.assertNotNull(charSequenceQueueArray39);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean11 = charSequenceQueue7.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue13 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean15 = charSequenceQueue13.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = charSequenceQueue13.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream17 = charSequenceQueue13.parallelStream();
        boolean boolean19 = charSequenceQueue13.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator20 = charSequenceQueue13.spliterator();
        boolean boolean21 = charSequenceQueue13.isAtFullCapacity();
        boolean boolean22 = charSequenceQueue7.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue13);
        java.lang.CharSequence charSequence23 = charSequenceQueue7.peek();
        java.lang.CharSequence[] charSequenceArray25 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList26 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList26, charSequenceArray25);
        java.lang.CharSequence[] charSequenceArray30 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList31 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList31, charSequenceArray30);
        java.lang.CharSequence[] charSequenceArray35 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue36 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue36, charSequenceArray35);
        boolean boolean38 = charSequenceQueue36.isAtFullCapacity();
        boolean boolean39 = charSequenceList31.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue36);
        boolean boolean40 = charSequenceList26.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList31);
        java.lang.CharSequence[] charSequenceArray43 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList44 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList44, charSequenceArray43);
        java.lang.CharSequence[] charSequenceArray48 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue49 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue49, charSequenceArray48);
        boolean boolean51 = charSequenceQueue49.isAtFullCapacity();
        boolean boolean52 = charSequenceList44.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue49);
        boolean boolean53 = charSequenceQueue49.isAtFullCapacity();
        int int54 = charSequenceQueue49.maxSize();
        boolean boolean55 = charSequenceList31.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue49);
        boolean boolean56 = charSequenceQueue7.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList31);
        java.lang.CharSequence charSequence57 = charSequenceQueue7.poll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "" + "'", charSequence16, "");
        org.junit.Assert.assertNotNull(charSequenceStream17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "" + "'", charSequence23, "");
        org.junit.Assert.assertNotNull(charSequenceArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(charSequenceArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charSequenceArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSequenceArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charSequenceArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 32 + "'", int54 == 32);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(charSequence57);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.apache.commons.collections4.queue.CircularFifoQueue<org.apache.commons.collections4.BoundedCollection<java.lang.CharSequence>> charSequenceCollectionQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<org.apache.commons.collections4.BoundedCollection<java.lang.CharSequence>>((int) ' ');
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue7.iterator();
        boolean boolean16 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceQueue18.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24, charSequenceArray23);
        boolean boolean26 = charSequenceQueue24.isAtFullCapacity();
        boolean boolean27 = charSequenceQueue18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator30 = charSequenceQueue29.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator31 = charSequenceQueue29.spliterator();
        boolean boolean33 = charSequenceQueue29.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = charSequenceQueue29.poll();
        boolean boolean35 = charSequenceQueue24.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29);
        boolean boolean36 = charSequenceQueue7.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        java.lang.CharSequence charSequence37 = charSequenceQueue24.poll();
        java.lang.CharSequence charSequence39 = charSequenceQueue24.get((int) (short) 0);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean43 = charSequenceQueue41.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray46 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue47 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue47, charSequenceArray46);
        boolean boolean49 = charSequenceQueue47.isAtFullCapacity();
        boolean boolean50 = charSequenceQueue41.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue47);
        boolean boolean52 = charSequenceQueue47.offer((java.lang.CharSequence) "[[hi!], [hi!]]");
        int int53 = charSequenceQueue47.size();
        boolean boolean54 = charSequenceQueue24.contains((java.lang.Object) charSequenceQueue47);
        charSequenceQueue24.clear();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator30);
        org.junit.Assert.assertNotNull(charSequenceSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "" + "'", charSequence37, "");
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(charSequenceArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        int int9 = charSequenceQueue7.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray14 = charSequenceQueue11.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue11.iterator();
        boolean boolean16 = charSequenceQueue7.remove((java.lang.Object) charSequenceQueue11);
        java.lang.CharSequence charSequence17 = charSequenceQueue11.poll();
        boolean boolean18 = charSequenceList2.contains((java.lang.Object) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean22 = charSequenceQueue20.offer((java.lang.CharSequence) "");
        charSequenceQueue20.clear();
        java.lang.CharSequence charSequence24 = charSequenceQueue20.poll();
        boolean boolean25 = charSequenceQueue11.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean29 = charSequenceQueue27.offer((java.lang.CharSequence) "");
        boolean boolean31 = charSequenceQueue27.add((java.lang.CharSequence) "hi!");
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream32 = charSequenceQueue27.stream();
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = charSequenceList42.contains(obj44);
        java.lang.String str46 = charSequenceList42.toString();
        boolean boolean47 = charSequenceList35.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue49 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean51 = charSequenceQueue49.offer((java.lang.CharSequence) "");
        boolean boolean53 = charSequenceQueue49.add((java.lang.CharSequence) "hi!");
        int int54 = charSequenceQueue49.maxSize();
        boolean boolean55 = charSequenceList35.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue49);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue57 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean59 = charSequenceQueue57.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence60 = charSequenceQueue57.peek();
        boolean boolean62 = charSequenceQueue57.add((java.lang.CharSequence) "");
        boolean boolean63 = charSequenceList35.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue57);
        boolean boolean64 = charSequenceQueue27.contains((java.lang.Object) charSequenceQueue57);
        java.lang.CharSequence[] charSequenceArray67 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList68 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList68, charSequenceArray67);
        java.lang.CharSequence[] charSequenceArray72 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue73 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue73, charSequenceArray72);
        boolean boolean75 = charSequenceQueue73.isAtFullCapacity();
        boolean boolean76 = charSequenceList68.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue73);
        java.lang.CharSequence charSequence77 = charSequenceQueue73.poll();
        boolean boolean78 = charSequenceQueue73.isAtFullCapacity();
        java.lang.CharSequence charSequence79 = charSequenceQueue73.element();
        charSequenceQueue73.clear();
        boolean boolean81 = charSequenceQueue27.remove((java.lang.Object) charSequenceQueue73);
        boolean boolean82 = charSequenceQueue11.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence83 = charSequenceQueue11.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(charSequence24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charSequenceStream32);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "" + "'", charSequence60, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charSequenceArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(charSequenceArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "" + "'", charSequence77, "");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + charSequence79 + "' != '" + "" + "'", charSequence79, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray4 = charSequenceQueue1.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor5 = charSequenceQueue1.iterator();
        boolean boolean7 = charSequenceQueue1.offer((java.lang.CharSequence) "[]");
        java.lang.Object obj8 = null;
        boolean boolean9 = charSequenceQueue1.remove(obj8);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = charSequenceQueue11.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean18 = charSequenceQueue16.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = charSequenceQueue16.element();
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList22 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList22, charSequenceArray21);
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList27 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27, charSequenceArray26);
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue32 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue32, charSequenceArray31);
        boolean boolean34 = charSequenceQueue32.isAtFullCapacity();
        boolean boolean35 = charSequenceList27.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue32);
        boolean boolean36 = charSequenceList22.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27);
        boolean boolean37 = charSequenceQueue16.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27);
        boolean boolean38 = charSequenceQueue11.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27);
        java.lang.Object[] objArray39 = charSequenceQueue11.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator42 = charSequenceQueue41.spliterator();
        java.lang.CharSequence charSequence43 = charSequenceQueue41.peek();
        boolean boolean44 = charSequenceQueue41.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream45 = charSequenceQueue41.stream();
        boolean boolean46 = charSequenceQueue11.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        java.lang.String str47 = charSequenceQueue11.toString();
        boolean boolean48 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        int int49 = charSequenceQueue1.size();
        int int50 = charSequenceQueue1.maxSize();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(charSequenceSpliterator42);
        org.junit.Assert.assertNull(charSequence43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charSequenceStream45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        java.lang.Object[] objArray29 = charSequenceQueue1.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator32 = charSequenceQueue31.spliterator();
        java.lang.CharSequence charSequence33 = charSequenceQueue31.peek();
        boolean boolean34 = charSequenceQueue31.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream35 = charSequenceQueue31.stream();
        boolean boolean36 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue31);
        charSequenceQueue1.clear();
        boolean boolean39 = charSequenceQueue1.offer((java.lang.CharSequence) "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(charSequenceSpliterator32);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charSequenceStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30, charSequenceArray29);
        boolean boolean32 = charSequenceQueue30.isAtFullCapacity();
        boolean boolean33 = charSequenceQueue24.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator36 = charSequenceQueue35.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue35.spliterator();
        boolean boolean39 = charSequenceQueue35.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = charSequenceQueue35.poll();
        boolean boolean41 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList45 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList45, charSequenceArray44);
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50, charSequenceArray49);
        boolean boolean52 = charSequenceQueue50.isAtFullCapacity();
        boolean boolean53 = charSequenceList45.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean54 = charSequenceQueue50.isAtFullCapacity();
        int int55 = charSequenceQueue50.maxSize();
        boolean boolean56 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean57 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean59 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = charSequenceQueue1.remove();
        boolean boolean62 = charSequenceQueue1.add((java.lang.CharSequence) "");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue64 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean66 = charSequenceQueue64.offer((java.lang.CharSequence) "");
        charSequenceQueue64.clear();
        boolean boolean69 = charSequenceQueue64.remove((java.lang.Object) (-1.0d));
        int int70 = charSequenceQueue64.maxSize();
        boolean boolean71 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue64);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream72 = charSequenceQueue64.stream();
        java.lang.String str73 = charSequenceQueue64.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator36);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(charSequenceStream72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        boolean boolean7 = charSequenceQueue3.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue3.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        charSequenceQueue3.clear();
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue3);
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "", "[hi!]", "", "hi!" };
        java.lang.Comparable<java.lang.String>[] strComparableArray24 = charSequenceList15.toArray((java.lang.Comparable<java.lang.String>[]) strArray23);
        java.lang.Comparable<java.lang.String>[] strComparableArray25 = charSequenceQueue3.toArray((java.lang.Comparable<java.lang.String>[]) strArray23);
        java.lang.CharSequence charSequence26 = charSequenceQueue3.peek();
        boolean boolean28 = charSequenceQueue3.add((java.lang.CharSequence) "[, ]");
        boolean boolean30 = charSequenceQueue3.add((java.lang.CharSequence) "[[hi!]]");
        boolean boolean31 = charSequenceQueue3.isAtFullCapacity();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strComparableArray24);
        org.junit.Assert.assertNotNull(strComparableArray25);
        org.junit.Assert.assertNull(charSequence26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor4 = charSequenceQueue1.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray10 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList11 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList11, charSequenceArray10);
        java.lang.Object obj13 = null;
        boolean boolean14 = charSequenceList11.contains(obj13);
        java.lang.String str15 = charSequenceList11.toString();
        java.lang.CharSequence[] charSequenceArray17 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList18 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18, charSequenceArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = charSequenceList18.contains(obj20);
        java.lang.String str22 = charSequenceList18.toString();
        boolean boolean23 = charSequenceList11.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18);
        boolean boolean24 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList11);
        java.lang.CharSequence[] charSequenceArray26 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList27 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList27, charSequenceArray26);
        java.lang.Object obj29 = null;
        boolean boolean30 = charSequenceList27.contains(obj29);
        java.lang.String str31 = charSequenceList27.toString();
        java.lang.CharSequence[] charSequenceArray33 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList34 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34, charSequenceArray33);
        java.lang.Object obj36 = null;
        boolean boolean37 = charSequenceList34.contains(obj36);
        java.lang.String str38 = charSequenceList34.toString();
        boolean boolean39 = charSequenceList27.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean43 = charSequenceQueue41.offer((java.lang.CharSequence) "");
        boolean boolean45 = charSequenceQueue41.add((java.lang.CharSequence) "hi!");
        int int46 = charSequenceQueue41.maxSize();
        boolean boolean47 = charSequenceList27.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        boolean boolean48 = charSequenceList11.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        boolean boolean50 = charSequenceQueue41.remove((java.lang.Object) 100);
        boolean boolean51 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue53 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.lang.CharSequence charSequence54 = charSequenceQueue53.peek();
        boolean boolean55 = charSequenceQueue41.remove((java.lang.Object) charSequence54);
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNotNull(charSequenceItor4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[hi!]" + "'", str15, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[hi!]" + "'", str22, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[hi!]" + "'", str31, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[hi!]" + "'", str38, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(charSequence54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30, charSequenceArray29);
        boolean boolean32 = charSequenceQueue30.isAtFullCapacity();
        boolean boolean33 = charSequenceQueue24.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator36 = charSequenceQueue35.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue35.spliterator();
        boolean boolean39 = charSequenceQueue35.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = charSequenceQueue35.poll();
        boolean boolean41 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList45 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList45, charSequenceArray44);
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50, charSequenceArray49);
        boolean boolean52 = charSequenceQueue50.isAtFullCapacity();
        boolean boolean53 = charSequenceList45.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean54 = charSequenceQueue50.isAtFullCapacity();
        int int55 = charSequenceQueue50.maxSize();
        boolean boolean56 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean57 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean59 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = charSequenceQueue1.remove();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue62 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean64 = charSequenceQueue62.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray67 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue68 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue68, charSequenceArray67);
        boolean boolean70 = charSequenceQueue68.isAtFullCapacity();
        boolean boolean71 = charSequenceQueue62.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue68);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue73 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator74 = charSequenceQueue73.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator75 = charSequenceQueue73.spliterator();
        boolean boolean77 = charSequenceQueue73.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence78 = charSequenceQueue73.poll();
        boolean boolean79 = charSequenceQueue68.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue73);
        java.lang.Object[] objArray80 = charSequenceQueue73.toArray();
        boolean boolean81 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue73);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue83 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream84 = charSequenceQueue83.parallelStream();
        boolean boolean86 = charSequenceQueue83.contains((java.lang.Object) 1.0d);
        boolean boolean87 = charSequenceQueue83.isFull();
        boolean boolean88 = charSequenceQueue83.isFull();
        boolean boolean89 = charSequenceQueue83.isFull();
        charSequenceQueue83.clear();
        boolean boolean91 = charSequenceQueue73.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue83);
        boolean boolean92 = charSequenceQueue83.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator36);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(charSequenceArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator74);
        org.junit.Assert.assertNotNull(charSequenceSpliterator75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "" + "'", charSequence78, "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charSequenceStream84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue8.spliterator();
        boolean boolean16 = charSequenceQueue8.offer((java.lang.CharSequence) "[[hi!]]");
        java.lang.CharSequence[] charSequenceArray18 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue19, charSequenceArray18);
        int int21 = charSequenceQueue19.maxSize();
        boolean boolean22 = charSequenceQueue19.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream25 = charSequenceQueue24.parallelStream();
        boolean boolean27 = charSequenceQueue24.contains((java.lang.Object) 1.0d);
        boolean boolean29 = charSequenceQueue24.offer((java.lang.CharSequence) "[hi!]");
        java.lang.Class<?> wildcardClass30 = charSequenceQueue24.getClass();
        boolean boolean31 = charSequenceQueue19.remove((java.lang.Object) charSequenceQueue24);
        int int32 = charSequenceQueue19.maxSize();
        java.lang.CharSequence[] charSequenceArray34 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList35 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList35, charSequenceArray34);
        java.lang.Object obj37 = null;
        boolean boolean38 = charSequenceList35.contains(obj37);
        java.lang.String str39 = charSequenceList35.toString();
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = charSequenceList42.contains(obj44);
        java.lang.String str46 = charSequenceList42.toString();
        boolean boolean47 = charSequenceList35.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        java.lang.Object[] objArray49 = charSequenceList42.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue51 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean53 = charSequenceQueue51.offer((java.lang.CharSequence) "");
        boolean boolean55 = charSequenceQueue51.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue57 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean58 = charSequenceQueue51.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue57);
        boolean boolean59 = charSequenceQueue51.isEmpty();
        boolean boolean61 = charSequenceQueue51.remove((java.lang.Object) 10.0d);
        charSequenceQueue51.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue64 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        int int65 = charSequenceQueue64.maxSize();
        boolean boolean66 = charSequenceQueue51.remove((java.lang.Object) charSequenceQueue64);
        boolean boolean67 = charSequenceList42.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue51);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue69 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean71 = charSequenceQueue69.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray74 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue75 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue75, charSequenceArray74);
        boolean boolean77 = charSequenceQueue75.isAtFullCapacity();
        boolean boolean78 = charSequenceQueue69.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue75);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor79 = charSequenceQueue75.iterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator80 = charSequenceQueue75.spliterator();
        boolean boolean81 = charSequenceList42.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue75);
        boolean boolean82 = charSequenceQueue19.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        java.util.RandomAccess[] randomAccessArray83 = new java.util.RandomAccess[] { charSequenceList42 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.RandomAccess[] randomAccessArray84 = charSequenceQueue8.toArray(randomAccessArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charSequenceArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceStream25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertNotNull(charSequenceArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[hi!]" + "'", str39, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(charSequenceArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(charSequenceItor79);
        org.junit.Assert.assertNotNull(charSequenceSpliterator80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(randomAccessArray83);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        java.lang.String str23 = charSequenceQueue3.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        boolean boolean7 = charSequenceQueue1.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue1.spliterator();
        java.lang.Class<?> wildcardClass9 = charSequenceSpliterator8.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        int int13 = charSequenceQueue8.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator16 = charSequenceQueue15.spliterator();
        java.lang.CharSequence charSequence17 = charSequenceQueue15.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue19 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean21 = charSequenceQueue19.offer((java.lang.CharSequence) "");
        boolean boolean22 = charSequenceQueue15.contains((java.lang.Object) charSequenceQueue19);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence27 = charSequenceQueue24.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream28 = charSequenceQueue24.parallelStream();
        boolean boolean30 = charSequenceQueue24.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator31 = charSequenceQueue24.spliterator();
        boolean boolean32 = charSequenceQueue15.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        boolean boolean33 = charSequenceQueue24.isFull();
        java.lang.CharSequence charSequence34 = charSequenceQueue24.peek();
        int int35 = charSequenceQueue24.maxSize();
        boolean boolean36 = charSequenceQueue8.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        java.lang.Class<?> wildcardClass37 = charSequenceQueue24.getClass();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
        org.junit.Assert.assertNotNull(charSequenceSpliterator16);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "" + "'", charSequence27, "");
        org.junit.Assert.assertNotNull(charSequenceStream28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        boolean boolean6 = charSequenceQueue1.isAtFullCapacity();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor7 = charSequenceQueue1.iterator();
        java.lang.Object[] objArray8 = charSequenceQueue1.toArray();
        boolean boolean9 = charSequenceQueue1.isAtFullCapacity();
        charSequenceQueue1.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean12 = charSequenceQueue11.isAtFullCapacity();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator15 = charSequenceQueue14.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator16 = charSequenceQueue14.spliterator();
        boolean boolean18 = charSequenceQueue14.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = charSequenceQueue14.poll();
        boolean boolean21 = charSequenceQueue14.add((java.lang.CharSequence) "");
        charSequenceQueue14.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream23 = charSequenceQueue14.stream();
        charSequenceQueue14.clear();
        boolean boolean25 = charSequenceQueue11.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean26 = charSequenceQueue11.isAtFullCapacity();
        boolean boolean27 = charSequenceQueue11.isAtFullCapacity();
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator31 = charSequenceQueue30.spliterator();
        java.lang.CharSequence charSequence32 = charSequenceQueue30.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean36 = charSequenceQueue34.offer((java.lang.CharSequence) "");
        boolean boolean37 = charSequenceQueue30.contains((java.lang.Object) charSequenceQueue34);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue39 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean41 = charSequenceQueue39.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence42 = charSequenceQueue39.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream43 = charSequenceQueue39.parallelStream();
        boolean boolean45 = charSequenceQueue39.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator46 = charSequenceQueue39.spliterator();
        boolean boolean47 = charSequenceQueue30.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue39);
        java.lang.CharSequence charSequence48 = charSequenceQueue39.poll();
        int int49 = charSequenceQueue39.size();
        charSequenceQueue39.clear();
        boolean boolean51 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue39);
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSequenceItor7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator15);
        org.junit.Assert.assertNotNull(charSequenceSpliterator16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charSequenceStream23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator31);
        org.junit.Assert.assertNull(charSequence32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "" + "'", charSequence42, "");
        org.junit.Assert.assertNotNull(charSequenceStream43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "" + "'", charSequence48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        boolean boolean10 = charSequenceQueue7.contains((java.lang.Object) 1.0d);
        boolean boolean11 = charSequenceQueue7.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue7.stream();
        boolean boolean13 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean14 = charSequenceQueue1.isEmpty();
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = charSequenceList17.contains(obj19);
        java.lang.String str21 = charSequenceList17.toString();
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList24 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList24, charSequenceArray23);
        java.lang.Object obj26 = null;
        boolean boolean27 = charSequenceList24.contains(obj26);
        java.lang.String str28 = charSequenceList24.toString();
        boolean boolean29 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList24);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList24);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream31 = charSequenceQueue30.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream32 = charSequenceQueue30.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator35 = charSequenceQueue34.spliterator();
        java.lang.CharSequence charSequence36 = charSequenceQueue34.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean40 = charSequenceQueue38.offer((java.lang.CharSequence) "");
        boolean boolean41 = charSequenceQueue34.contains((java.lang.Object) charSequenceQueue38);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor42 = charSequenceQueue34.iterator();
        boolean boolean43 = charSequenceQueue30.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        boolean boolean44 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue46 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean48 = charSequenceQueue46.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence49 = charSequenceQueue46.element();
        java.lang.CharSequence[] charSequenceArray51 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList52 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList52, charSequenceArray51);
        java.lang.CharSequence[] charSequenceArray56 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList57 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList57, charSequenceArray56);
        java.lang.CharSequence[] charSequenceArray61 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue62 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue62, charSequenceArray61);
        boolean boolean64 = charSequenceQueue62.isAtFullCapacity();
        boolean boolean65 = charSequenceList57.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue62);
        boolean boolean66 = charSequenceList52.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList57);
        boolean boolean67 = charSequenceQueue46.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList57);
        java.lang.CharSequence[] charSequenceArray69 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList70 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList70, charSequenceArray69);
        java.lang.Object obj72 = null;
        boolean boolean73 = charSequenceList70.contains(obj72);
        java.lang.String str74 = charSequenceList70.toString();
        java.lang.CharSequence[] charSequenceArray76 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList77 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList77, charSequenceArray76);
        java.lang.Object obj79 = null;
        boolean boolean80 = charSequenceList77.contains(obj79);
        java.lang.String str81 = charSequenceList77.toString();
        boolean boolean82 = charSequenceList70.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList77);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue83 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList77);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream84 = charSequenceQueue83.stream();
        boolean boolean85 = charSequenceQueue46.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue83);
        java.lang.String str86 = charSequenceQueue83.toString();
        int int87 = charSequenceQueue83.maxSize();
        boolean boolean88 = charSequenceQueue34.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue83);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator89 = charSequenceQueue34.spliterator();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[hi!]" + "'", str21, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[hi!]" + "'", str28, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charSequenceStream31);
        org.junit.Assert.assertNotNull(charSequenceStream32);
        org.junit.Assert.assertNotNull(charSequenceSpliterator35);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "" + "'", charSequence49, "");
        org.junit.Assert.assertNotNull(charSequenceArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(charSequenceArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charSequenceArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(charSequenceArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[hi!]" + "'", str74, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[hi!]" + "'", str81, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(charSequenceStream84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[hi!]" + "'", str86, "[hi!]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator89);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor4 = charSequenceQueue1.iterator();
        boolean boolean6 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        int int7 = charSequenceQueue1.size();
        boolean boolean8 = charSequenceQueue1.isAtFullCapacity();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNotNull(charSequenceItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray4 = charSequenceQueue1.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor5 = charSequenceQueue1.iterator();
        boolean boolean6 = charSequenceQueue1.isFull();
        boolean boolean8 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray10 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList11 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList11, charSequenceArray10);
        java.lang.Object obj13 = null;
        boolean boolean14 = charSequenceList11.contains(obj13);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = charSequenceList17.contains(obj19);
        java.lang.String str21 = charSequenceList17.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean24 = charSequenceList17.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        boolean boolean25 = charSequenceList11.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean28 = charSequenceList11.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27);
        java.lang.CharSequence[] charSequenceArray30 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList31 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList31, charSequenceArray30);
        java.lang.Object obj33 = null;
        boolean boolean34 = charSequenceList31.contains(obj33);
        java.lang.CharSequence[] charSequenceArray36 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList37 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList37, charSequenceArray36);
        java.lang.Object obj39 = null;
        boolean boolean40 = charSequenceList37.contains(obj39);
        java.lang.String str41 = charSequenceList37.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue43 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean44 = charSequenceList37.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        boolean boolean45 = charSequenceList31.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue47 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean48 = charSequenceList31.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue47);
        boolean boolean49 = charSequenceQueue27.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue47);
        boolean boolean50 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue47);
        int int51 = charSequenceQueue47.maxSize();
        int int52 = charSequenceQueue47.maxSize();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[hi!]" + "'", str21, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(charSequenceArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charSequenceArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[hi!]" + "'", str41, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        boolean boolean15 = charSequenceQueue8.contains((java.lang.Object) false);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator16 = charSequenceQueue8.spliterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream17 = charSequenceQueue8.parallelStream();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator16);
        org.junit.Assert.assertNotNull(charSequenceStream17);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean9 = charSequenceQueue1.isEmpty();
        boolean boolean11 = charSequenceQueue1.remove((java.lang.Object) 10.0d);
        charSequenceQueue1.clear();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue1.spliterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean15 = charSequenceQueue14.isAtFullCapacity();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator18 = charSequenceQueue17.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator19 = charSequenceQueue17.spliterator();
        boolean boolean21 = charSequenceQueue17.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = charSequenceQueue17.poll();
        boolean boolean24 = charSequenceQueue17.add((java.lang.CharSequence) "");
        charSequenceQueue17.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream26 = charSequenceQueue17.stream();
        charSequenceQueue17.clear();
        boolean boolean28 = charSequenceQueue14.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        boolean boolean34 = charSequenceQueue30.add((java.lang.CharSequence) "hi!");
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream35 = charSequenceQueue30.stream();
        java.lang.Class<?> wildcardClass36 = charSequenceStream35.getClass();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.lang.Class<?> wildcardClass39 = charSequenceQueue38.getClass();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>(100);
        java.lang.Class<?> wildcardClass42 = charSequenceQueue41.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray43 = new java.lang.reflect.GenericDeclaration[] { wildcardClass36, wildcardClass39, wildcardClass42 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray44 = charSequenceQueue17.toArray(genericDeclarationArray43);
        boolean boolean45 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence46 = charSequenceQueue17.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator18);
        org.junit.Assert.assertNotNull(charSequenceSpliterator19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charSequenceStream26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(charSequenceStream35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(genericDeclarationArray43);
        org.junit.Assert.assertNotNull(genericDeclarationArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        boolean boolean23 = charSequenceQueue3.isEmpty();
        boolean boolean24 = charSequenceQueue3.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream25 = charSequenceQueue3.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean29 = charSequenceQueue27.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray32 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue33 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue33, charSequenceArray32);
        boolean boolean35 = charSequenceQueue33.isAtFullCapacity();
        boolean boolean36 = charSequenceQueue27.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue33);
        boolean boolean38 = charSequenceQueue33.offer((java.lang.CharSequence) "[[hi!], [hi!]]");
        boolean boolean39 = charSequenceQueue33.isEmpty();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean43 = charSequenceQueue41.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence44 = charSequenceQueue41.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream45 = charSequenceQueue41.parallelStream();
        boolean boolean47 = charSequenceQueue41.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator48 = charSequenceQueue41.spliterator();
        java.lang.CharSequence charSequence49 = charSequenceQueue41.element();
        boolean boolean50 = charSequenceQueue33.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        boolean boolean51 = charSequenceQueue3.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue41);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue53 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream54 = charSequenceQueue53.parallelStream();
        boolean boolean56 = charSequenceQueue53.contains((java.lang.Object) 1.0d);
        boolean boolean57 = charSequenceQueue53.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream58 = charSequenceQueue53.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream59 = charSequenceQueue53.stream();
        boolean boolean61 = charSequenceQueue53.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = charSequenceQueue53.get(0);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue64 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue53);
        boolean boolean65 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue64);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue67 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean69 = charSequenceQueue67.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray72 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue73 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue73, charSequenceArray72);
        boolean boolean75 = charSequenceQueue73.isAtFullCapacity();
        boolean boolean76 = charSequenceQueue67.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue73);
        boolean boolean78 = charSequenceQueue73.offer((java.lang.CharSequence) "[[hi!], [hi!]]");
        boolean boolean79 = charSequenceQueue73.isEmpty();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue81 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean83 = charSequenceQueue81.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence84 = charSequenceQueue81.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream85 = charSequenceQueue81.parallelStream();
        boolean boolean87 = charSequenceQueue81.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator88 = charSequenceQueue81.spliterator();
        java.lang.CharSequence charSequence89 = charSequenceQueue81.element();
        boolean boolean90 = charSequenceQueue73.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue81);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream91 = charSequenceQueue81.stream();
        java.lang.CharSequence charSequence92 = charSequenceQueue81.remove();
        boolean boolean93 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue81);
        java.lang.Class<?> wildcardClass94 = charSequenceQueue81.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charSequenceStream25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charSequenceArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "" + "'", charSequence44, "");
        org.junit.Assert.assertNotNull(charSequenceStream45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator48);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "" + "'", charSequence49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(charSequenceStream54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charSequenceStream58);
        org.junit.Assert.assertNotNull(charSequenceStream59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(charSequenceArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + charSequence84 + "' != '" + "" + "'", charSequence84, "");
        org.junit.Assert.assertNotNull(charSequenceStream85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator88);
        org.junit.Assert.assertEquals("'" + charSequence89 + "' != '" + "" + "'", charSequence89, "");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(charSequenceStream91);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "" + "'", charSequence92, "");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean11 = charSequenceQueue7.isFull();
        java.lang.CharSequence charSequence13 = charSequenceQueue7.get(0);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor14 = charSequenceQueue7.iterator();
        charSequenceQueue7.clear();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
        org.junit.Assert.assertNotNull(charSequenceItor14);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Object[][]> objArrayQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Object[][]>();
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.lang.CharSequence charSequence5 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean9 = charSequenceQueue7.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence10 = charSequenceQueue7.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream11 = charSequenceQueue7.parallelStream();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.CharSequence[] charSequenceArray19 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20, charSequenceArray19);
        boolean boolean22 = charSequenceQueue20.isAtFullCapacity();
        boolean boolean23 = charSequenceList15.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        boolean boolean24 = charSequenceQueue20.isAtFullCapacity();
        int int25 = charSequenceQueue20.maxSize();
        boolean boolean26 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        boolean boolean28 = charSequenceQueue7.offer((java.lang.CharSequence) "hi!");
        boolean boolean29 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream32 = charSequenceQueue31.parallelStream();
        boolean boolean34 = charSequenceQueue31.contains((java.lang.Object) 1.0d);
        boolean boolean35 = charSequenceQueue31.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator38 = charSequenceQueue37.spliterator();
        java.lang.CharSequence charSequence39 = charSequenceQueue37.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue41 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean43 = charSequenceQueue41.offer((java.lang.CharSequence) "");
        boolean boolean44 = charSequenceQueue37.contains((java.lang.Object) charSequenceQueue41);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor45 = charSequenceQueue37.iterator();
        boolean boolean46 = charSequenceQueue31.remove((java.lang.Object) charSequenceQueue37);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean50 = charSequenceQueue48.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray53 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue54 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54, charSequenceArray53);
        boolean boolean56 = charSequenceQueue54.isAtFullCapacity();
        boolean boolean57 = charSequenceQueue48.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue59 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator60 = charSequenceQueue59.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator61 = charSequenceQueue59.spliterator();
        boolean boolean63 = charSequenceQueue59.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence64 = charSequenceQueue59.poll();
        boolean boolean65 = charSequenceQueue54.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue59);
        boolean boolean66 = charSequenceQueue37.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54);
        boolean boolean67 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue54);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection68 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean69 = charSequenceQueue1.addAll(charSequenceCollection68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertNotNull(charSequenceStream11);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charSequenceStream32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator38);
        org.junit.Assert.assertNull(charSequence39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charSequenceItor45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(charSequenceArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator60);
        org.junit.Assert.assertNotNull(charSequenceSpliterator61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "" + "'", charSequence64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        boolean boolean5 = charSequenceQueue1.isAtFullCapacity();
        boolean boolean6 = charSequenceQueue1.isFull();
        charSequenceQueue1.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator10 = charSequenceQueue9.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator11 = charSequenceQueue9.spliterator();
        boolean boolean13 = charSequenceQueue9.add((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue9.isAtFullCapacity();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue9.iterator();
        java.lang.Object[] objArray16 = charSequenceQueue9.toArray();
        boolean boolean17 = charSequenceQueue9.isAtFullCapacity();
        charSequenceQueue9.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean22 = charSequenceQueue20.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        boolean boolean38 = charSequenceQueue20.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25);
        java.lang.CharSequence[] charSequenceArray40 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList41 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList41, charSequenceArray40);
        java.lang.Object obj43 = null;
        boolean boolean44 = charSequenceList41.contains(obj43);
        java.lang.String str45 = charSequenceList41.toString();
        java.lang.CharSequence[] charSequenceArray47 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList48 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48, charSequenceArray47);
        java.lang.Object obj50 = null;
        boolean boolean51 = charSequenceList48.contains(obj50);
        java.lang.String str52 = charSequenceList48.toString();
        boolean boolean53 = charSequenceList41.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue55 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean57 = charSequenceQueue55.offer((java.lang.CharSequence) "");
        boolean boolean59 = charSequenceQueue55.add((java.lang.CharSequence) "hi!");
        int int60 = charSequenceQueue55.maxSize();
        boolean boolean61 = charSequenceList41.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue55);
        boolean boolean62 = charSequenceList25.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue55);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue64 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue66 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean68 = charSequenceQueue66.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray70 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList71 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList71, charSequenceArray70);
        java.lang.Object obj73 = null;
        boolean boolean74 = charSequenceList71.contains(obj73);
        java.lang.String str75 = charSequenceList71.toString();
        java.lang.CharSequence[] charSequenceArray77 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList78 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList78, charSequenceArray77);
        java.lang.Object obj80 = null;
        boolean boolean81 = charSequenceList78.contains(obj80);
        java.lang.String str82 = charSequenceList78.toString();
        boolean boolean83 = charSequenceList71.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList78);
        boolean boolean84 = charSequenceQueue66.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList71);
        boolean boolean85 = charSequenceQueue64.remove((java.lang.Object) charSequenceQueue66);
        boolean boolean86 = charSequenceList25.remove((java.lang.Object) charSequenceQueue64);
        boolean boolean87 = charSequenceQueue64.isAtFullCapacity();
        boolean boolean88 = charSequenceQueue64.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream89 = charSequenceQueue64.stream();
        boolean boolean90 = charSequenceQueue9.remove((java.lang.Object) charSequenceQueue64);
        boolean boolean91 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        boolean boolean93 = charSequenceQueue1.add((java.lang.CharSequence) "[, [hi!]]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator10);
        org.junit.Assert.assertNotNull(charSequenceSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charSequenceArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[hi!]" + "'", str45, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[hi!]" + "'", str52, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(charSequenceArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[hi!]" + "'", str75, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[hi!]" + "'", str82, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(charSequenceStream89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        java.lang.CharSequence charSequence5 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean9 = charSequenceQueue7.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence10 = charSequenceQueue7.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream11 = charSequenceQueue7.parallelStream();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.CharSequence[] charSequenceArray19 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue20 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20, charSequenceArray19);
        boolean boolean22 = charSequenceQueue20.isAtFullCapacity();
        boolean boolean23 = charSequenceList15.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        boolean boolean24 = charSequenceQueue20.isAtFullCapacity();
        int int25 = charSequenceQueue20.maxSize();
        boolean boolean26 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue20);
        boolean boolean28 = charSequenceQueue7.offer((java.lang.CharSequence) "hi!");
        boolean boolean29 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        java.lang.CharSequence charSequence30 = charSequenceQueue1.peek();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence32 = charSequenceQueue1.get(0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(charSequence5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertNotNull(charSequenceStream11);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charSequence30);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        boolean boolean7 = charSequenceQueue3.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean10 = charSequenceQueue3.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        charSequenceQueue3.clear();
        boolean boolean12 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue3);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue1.spliterator();
        int int14 = charSequenceQueue1.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence15 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.util.AbstractCollection<java.lang.CharSequence>[]> charSequenceCollectionArrayQueue0 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.AbstractCollection<java.lang.CharSequence>[]>();
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        java.lang.CharSequence charSequence4 = charSequenceQueue1.poll();
        boolean boolean5 = charSequenceQueue1.isFull();
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        boolean boolean7 = charSequenceQueue1.isAtFullCapacity();
        boolean boolean9 = charSequenceQueue1.add((java.lang.CharSequence) "[, , , hi!]");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue11.parallelStream();
        boolean boolean14 = charSequenceQueue11.contains((java.lang.Object) 1.0d);
        boolean boolean15 = charSequenceQueue11.isFull();
        boolean boolean16 = charSequenceQueue11.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean20 = charSequenceQueue18.offer((java.lang.CharSequence) "");
        java.lang.String str21 = charSequenceQueue18.toString();
        boolean boolean22 = charSequenceQueue11.remove((java.lang.Object) str21);
        boolean boolean23 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue25 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator26 = charSequenceQueue25.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator27 = charSequenceQueue25.spliterator();
        boolean boolean29 = charSequenceQueue25.add((java.lang.CharSequence) "");
        boolean boolean30 = charSequenceQueue25.isAtFullCapacity();
        java.lang.CharSequence charSequence31 = charSequenceQueue25.element();
        int int32 = charSequenceQueue25.size();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream33 = charSequenceQueue25.stream();
        boolean boolean34 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue25);
        boolean boolean35 = charSequenceQueue1.isAtFullCapacity();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertNull(charSequence4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(charSequence6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator26);
        org.junit.Assert.assertNotNull(charSequenceSpliterator27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "" + "'", charSequence31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(charSequenceStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor11 = charSequenceQueue7.iterator();
        boolean boolean13 = charSequenceQueue7.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence14 = charSequenceQueue7.poll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceItor11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.lang.CharSequence charSequence41 = charSequenceQueue38.element();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue43 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean45 = charSequenceQueue43.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence46 = charSequenceQueue43.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream47 = charSequenceQueue43.parallelStream();
        boolean boolean49 = charSequenceQueue43.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator50 = charSequenceQueue43.spliterator();
        java.lang.CharSequence charSequence51 = charSequenceQueue43.element();
        boolean boolean52 = charSequenceQueue38.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream53 = charSequenceQueue38.stream();
        java.lang.CharSequence charSequence54 = charSequenceQueue38.peek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "" + "'", charSequence46, "");
        org.junit.Assert.assertNotNull(charSequenceStream47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator50);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "" + "'", charSequence51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charSequenceStream53);
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = charSequenceQueue1.poll();
        boolean boolean8 = charSequenceQueue1.add((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue13 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean15 = charSequenceQueue13.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray17 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList18 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18, charSequenceArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = charSequenceList18.contains(obj20);
        java.lang.String str22 = charSequenceList18.toString();
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        boolean boolean30 = charSequenceList18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25);
        boolean boolean31 = charSequenceQueue13.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18);
        boolean boolean32 = charSequenceQueue11.remove((java.lang.Object) charSequenceQueue13);
        boolean boolean33 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean39 = charSequenceQueue37.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList42 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42, charSequenceArray41);
        java.lang.Object obj44 = null;
        boolean boolean45 = charSequenceList42.contains(obj44);
        java.lang.String str46 = charSequenceList42.toString();
        java.lang.CharSequence[] charSequenceArray48 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList49 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList49, charSequenceArray48);
        java.lang.Object obj51 = null;
        boolean boolean52 = charSequenceList49.contains(obj51);
        java.lang.String str53 = charSequenceList49.toString();
        boolean boolean54 = charSequenceList42.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList49);
        boolean boolean55 = charSequenceQueue37.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList42);
        boolean boolean56 = charSequenceQueue35.remove((java.lang.Object) charSequenceQueue37);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue58 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean60 = charSequenceQueue58.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray63 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue64 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue64, charSequenceArray63);
        boolean boolean66 = charSequenceQueue64.isAtFullCapacity();
        boolean boolean67 = charSequenceQueue58.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue64);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue69 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator70 = charSequenceQueue69.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator71 = charSequenceQueue69.spliterator();
        boolean boolean73 = charSequenceQueue69.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence74 = charSequenceQueue69.poll();
        boolean boolean75 = charSequenceQueue64.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue69);
        java.lang.CharSequence[] charSequenceArray78 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList79 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList79, charSequenceArray78);
        java.lang.CharSequence[] charSequenceArray83 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue84 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue84, charSequenceArray83);
        boolean boolean86 = charSequenceQueue84.isAtFullCapacity();
        boolean boolean87 = charSequenceList79.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue84);
        boolean boolean88 = charSequenceQueue84.isAtFullCapacity();
        int int89 = charSequenceQueue84.maxSize();
        boolean boolean90 = charSequenceQueue64.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue84);
        boolean boolean91 = charSequenceQueue35.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue84);
        boolean boolean93 = charSequenceQueue35.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence94 = charSequenceQueue35.remove();
        boolean boolean95 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue35);
        boolean boolean96 = charSequenceQueue1.isAtFullCapacity();
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charSequenceArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[hi!]" + "'", str22, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[hi!]" + "'", str46, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[hi!]" + "'", str53, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(charSequenceArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator70);
        org.junit.Assert.assertNotNull(charSequenceSpliterator71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + charSequence74 + "' != '" + "" + "'", charSequence74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(charSequenceArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(charSequenceArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 32 + "'", int89 == 32);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + charSequence94 + "' != '" + "hi!" + "'", charSequence94, "hi!");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30, charSequenceArray29);
        boolean boolean32 = charSequenceQueue30.isAtFullCapacity();
        boolean boolean33 = charSequenceQueue24.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator36 = charSequenceQueue35.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue35.spliterator();
        boolean boolean39 = charSequenceQueue35.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = charSequenceQueue35.poll();
        boolean boolean41 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList45 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList45, charSequenceArray44);
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50, charSequenceArray49);
        boolean boolean52 = charSequenceQueue50.isAtFullCapacity();
        boolean boolean53 = charSequenceList45.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean54 = charSequenceQueue50.isAtFullCapacity();
        int int55 = charSequenceQueue50.maxSize();
        boolean boolean56 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean57 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean59 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = charSequenceQueue1.remove();
        boolean boolean62 = charSequenceQueue1.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence63 = charSequenceQueue1.element();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue65 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean67 = charSequenceQueue65.offer((java.lang.CharSequence) "");
        java.lang.String str68 = charSequenceQueue65.toString();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor69 = charSequenceQueue65.iterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream70 = charSequenceQueue65.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue72 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean74 = charSequenceQueue72.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence75 = charSequenceQueue72.peek();
        boolean boolean76 = charSequenceQueue65.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue72);
        java.lang.CharSequence charSequence77 = charSequenceQueue65.poll();
        boolean boolean78 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue65);
        java.lang.Class<?> wildcardClass79 = charSequenceQueue65.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator36);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "" + "'", charSequence63, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertNotNull(charSequenceItor69);
        org.junit.Assert.assertNotNull(charSequenceStream70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "" + "'", charSequence75, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(charSequence77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList16 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16, charSequenceArray15);
        java.lang.Object obj18 = null;
        boolean boolean19 = charSequenceList16.contains(obj18);
        java.lang.String str20 = charSequenceList16.toString();
        boolean boolean21 = charSequenceList9.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean25 = charSequenceQueue23.offer((java.lang.CharSequence) "");
        boolean boolean27 = charSequenceQueue23.add((java.lang.CharSequence) "hi!");
        int int28 = charSequenceQueue23.maxSize();
        boolean boolean29 = charSequenceList9.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean33 = charSequenceQueue31.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = charSequenceQueue31.peek();
        boolean boolean36 = charSequenceQueue31.add((java.lang.CharSequence) "");
        boolean boolean37 = charSequenceList9.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue31);
        boolean boolean38 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue31);
        java.lang.Class<?> wildcardClass39 = charSequenceQueue1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!]" + "'", str20, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        charSequenceQueue1.clear();
        charSequenceQueue1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence8 = charSequenceQueue1.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.GenericDeclaration> genericDeclarationQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.reflect.GenericDeclaration>((int) (byte) 1);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue2 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue2, charSequenceArray1);
        int int4 = charSequenceQueue2.maxSize();
        boolean boolean5 = charSequenceQueue2.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        boolean boolean10 = charSequenceQueue7.contains((java.lang.Object) 1.0d);
        boolean boolean12 = charSequenceQueue7.offer((java.lang.CharSequence) "[hi!]");
        java.lang.Class<?> wildcardClass13 = charSequenceQueue7.getClass();
        boolean boolean14 = charSequenceQueue2.remove((java.lang.Object) charSequenceQueue7);
        int int15 = charSequenceQueue2.maxSize();
        java.lang.CharSequence[] charSequenceArray17 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList18 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList18, charSequenceArray17);
        java.lang.Object obj20 = null;
        boolean boolean21 = charSequenceList18.contains(obj20);
        java.lang.String str22 = charSequenceList18.toString();
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        boolean boolean30 = charSequenceList18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList25);
        java.lang.Object[] objArray32 = charSequenceList25.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean36 = charSequenceQueue34.offer((java.lang.CharSequence) "");
        boolean boolean38 = charSequenceQueue34.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue40 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean41 = charSequenceQueue34.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40);
        boolean boolean42 = charSequenceQueue34.isEmpty();
        boolean boolean44 = charSequenceQueue34.remove((java.lang.Object) 10.0d);
        charSequenceQueue34.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue47 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        int int48 = charSequenceQueue47.maxSize();
        boolean boolean49 = charSequenceQueue34.remove((java.lang.Object) charSequenceQueue47);
        boolean boolean50 = charSequenceList25.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue52 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean54 = charSequenceQueue52.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray57 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue58 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue58, charSequenceArray57);
        boolean boolean60 = charSequenceQueue58.isAtFullCapacity();
        boolean boolean61 = charSequenceQueue52.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue58);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor62 = charSequenceQueue58.iterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator63 = charSequenceQueue58.spliterator();
        boolean boolean64 = charSequenceList25.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue58);
        boolean boolean65 = charSequenceQueue2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25);
        java.lang.Object obj66 = null;
        boolean boolean67 = charSequenceList25.contains(obj66);
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertNotNull(charSequenceArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[hi!]" + "'", str22, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(charSequenceArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(charSequenceItor62);
        org.junit.Assert.assertNotNull(charSequenceSpliterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue10.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean17 = charSequenceQueue10.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        boolean boolean18 = charSequenceQueue10.isEmpty();
        java.lang.CharSequence charSequence19 = charSequenceQueue10.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue21 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean23 = charSequenceQueue21.offer((java.lang.CharSequence) "");
        boolean boolean25 = charSequenceQueue21.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean28 = charSequenceQueue21.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue27);
        boolean boolean29 = charSequenceQueue21.isEmpty();
        boolean boolean30 = charSequenceQueue10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue21);
        boolean boolean31 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10);
        boolean boolean32 = charSequenceQueue1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence34 = charSequenceQueue1.get(4);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (4) is outside the available range [0, 4)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        boolean boolean5 = charSequenceQueue1.isAtFullCapacity();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor6 = charSequenceQueue1.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = charSequenceQueue7.isAtFullCapacity();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator11 = charSequenceQueue10.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator12 = charSequenceQueue10.spliterator();
        boolean boolean14 = charSequenceQueue10.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = charSequenceQueue10.poll();
        boolean boolean17 = charSequenceQueue10.add((java.lang.CharSequence) "");
        charSequenceQueue10.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream19 = charSequenceQueue10.stream();
        charSequenceQueue10.clear();
        boolean boolean21 = charSequenceQueue7.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean25 = charSequenceQueue23.offer((java.lang.CharSequence) "");
        boolean boolean27 = charSequenceQueue23.add((java.lang.CharSequence) "hi!");
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream28 = charSequenceQueue23.stream();
        java.lang.Class<?> wildcardClass29 = charSequenceStream28.getClass();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.lang.Class<?> wildcardClass32 = charSequenceQueue31.getClass();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>(100);
        java.lang.Class<?> wildcardClass35 = charSequenceQueue34.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray36 = new java.lang.reflect.GenericDeclaration[] { wildcardClass29, wildcardClass32, wildcardClass35 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray37 = charSequenceQueue10.toArray(genericDeclarationArray36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.AnnotatedElement[] annotatedElementArray38 = charSequenceQueue1.toArray((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceItor6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator11);
        org.junit.Assert.assertNotNull(charSequenceSpliterator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "" + "'", charSequence15, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charSequenceStream19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(charSequenceStream28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(genericDeclarationArray36);
        org.junit.Assert.assertNotNull(genericDeclarationArray37);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        charSequenceQueue30.clear();
        boolean boolean35 = charSequenceQueue30.remove((java.lang.Object) (-1.0d));
        java.lang.CharSequence[] charSequenceArray38 = new java.lang.CharSequence[] { "[hi!]", "[hi!]" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList39 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39, charSequenceArray38);
        boolean boolean41 = charSequenceQueue30.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        boolean boolean42 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        java.lang.String str43 = charSequenceList39.toString();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator44 = charSequenceList39.spliterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue46 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue48 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean50 = charSequenceQueue48.offer((java.lang.CharSequence) "");
        boolean boolean52 = charSequenceQueue48.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue54 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean55 = charSequenceQueue48.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54);
        charSequenceQueue48.clear();
        boolean boolean57 = charSequenceQueue46.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue48);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator58 = charSequenceQueue46.spliterator();
        boolean boolean59 = charSequenceList39.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence60 = charSequenceQueue46.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charSequenceArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[[hi!], [hi!]]" + "'", str43, "[[hi!], [hi!]]");
        org.junit.Assert.assertNotNull(charSequenceSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator7 = charSequenceQueue6.spliterator();
        java.lang.CharSequence charSequence8 = charSequenceQueue6.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        boolean boolean13 = charSequenceQueue6.contains((java.lang.Object) charSequenceQueue10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean17 = charSequenceQueue15.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = charSequenceQueue15.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream19 = charSequenceQueue15.parallelStream();
        boolean boolean21 = charSequenceQueue15.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator22 = charSequenceQueue15.spliterator();
        boolean boolean23 = charSequenceQueue6.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue15);
        java.lang.CharSequence charSequence24 = charSequenceQueue15.poll();
        int int25 = charSequenceQueue15.size();
        boolean boolean26 = charSequenceQueue1.contains((java.lang.Object) int25);
        java.lang.CharSequence charSequence27 = charSequenceQueue1.peek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator7);
        org.junit.Assert.assertNull(charSequence8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertNotNull(charSequenceStream19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "" + "'", charSequence24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(charSequence27);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream6 = charSequenceQueue1.stream();
        boolean boolean8 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        charSequenceQueue1.clear();
        boolean boolean11 = charSequenceQueue1.offer((java.lang.CharSequence) "[[hi!]]");
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        boolean boolean15 = charSequenceQueue8.add((java.lang.CharSequence) "[, ]");
        int int16 = charSequenceQueue8.size();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator17 = charSequenceQueue8.spliterator();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(charSequenceSpliterator17);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        boolean boolean14 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator15 = charSequenceList9.spliterator();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceList9.stream();
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator15);
        org.junit.Assert.assertNotNull(charSequenceStream16);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.lang.CharSequence charSequence3 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue5 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean7 = charSequenceQueue5.offer((java.lang.CharSequence) "");
        boolean boolean8 = charSequenceQueue1.contains((java.lang.Object) charSequenceQueue5);
        java.lang.CharSequence charSequence9 = charSequenceQueue1.poll();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator12 = charSequenceQueue11.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue11.spliterator();
        boolean boolean15 = charSequenceQueue11.add((java.lang.CharSequence) "");
        boolean boolean16 = charSequenceQueue11.isAtFullCapacity();
        int int17 = charSequenceQueue11.maxSize();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator18 = charSequenceQueue11.spliterator();
        boolean boolean19 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue11);
        int int20 = charSequenceQueue1.maxSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence22 = charSequenceQueue1.get((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNull(charSequence3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertNotNull(charSequenceSpliterator12);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(charSequenceSpliterator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        boolean boolean10 = charSequenceQueue7.contains((java.lang.Object) 1.0d);
        boolean boolean11 = charSequenceQueue7.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue7.stream();
        boolean boolean13 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean14 = charSequenceQueue1.isEmpty();
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = charSequenceList17.contains(obj19);
        java.lang.String str21 = charSequenceList17.toString();
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList24 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList24, charSequenceArray23);
        java.lang.Object obj26 = null;
        boolean boolean27 = charSequenceList24.contains(obj26);
        java.lang.String str28 = charSequenceList24.toString();
        boolean boolean29 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList24);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList24);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream31 = charSequenceQueue30.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream32 = charSequenceQueue30.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator35 = charSequenceQueue34.spliterator();
        java.lang.CharSequence charSequence36 = charSequenceQueue34.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean40 = charSequenceQueue38.offer((java.lang.CharSequence) "");
        boolean boolean41 = charSequenceQueue34.contains((java.lang.Object) charSequenceQueue38);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor42 = charSequenceQueue34.iterator();
        boolean boolean43 = charSequenceQueue30.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        boolean boolean44 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        boolean boolean46 = charSequenceQueue34.add((java.lang.CharSequence) "[, , , hi!]");
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[hi!]" + "'", str21, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[hi!]" + "'", str28, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charSequenceStream31);
        org.junit.Assert.assertNotNull(charSequenceStream32);
        org.junit.Assert.assertNotNull(charSequenceSpliterator35);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        boolean boolean6 = charSequenceQueue1.isFull();
        int int7 = charSequenceQueue1.maxSize();
        int int8 = charSequenceQueue1.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue10 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean12 = charSequenceQueue10.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16, charSequenceArray15);
        boolean boolean18 = charSequenceQueue16.isAtFullCapacity();
        boolean boolean19 = charSequenceQueue10.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream20 = charSequenceQueue10.stream();
        boolean boolean21 = charSequenceQueue1.contains((java.lang.Object) charSequenceStream20);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream24 = charSequenceQueue23.parallelStream();
        int int25 = charSequenceQueue23.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue27 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean29 = charSequenceQueue27.offer((java.lang.CharSequence) "");
        java.lang.Object[] objArray30 = charSequenceQueue27.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor31 = charSequenceQueue27.iterator();
        boolean boolean32 = charSequenceQueue23.remove((java.lang.Object) charSequenceQueue27);
        boolean boolean33 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue23);
        int int34 = charSequenceQueue1.size();
        boolean boolean35 = charSequenceQueue1.isAtFullCapacity();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charSequenceStream24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(charSequenceItor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        java.lang.CharSequence charSequence12 = charSequenceQueue8.poll();
        boolean boolean13 = charSequenceQueue8.isAtFullCapacity();
        java.lang.CharSequence[] charSequenceArray15 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList16 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList16, charSequenceArray15);
        java.lang.Object obj18 = null;
        boolean boolean19 = charSequenceList16.contains(obj18);
        java.lang.String str20 = charSequenceList16.toString();
        java.lang.CharSequence[] charSequenceArray22 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList23 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23, charSequenceArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = charSequenceList23.contains(obj25);
        java.lang.String str27 = charSequenceList23.toString();
        boolean boolean28 = charSequenceList16.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23);
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.CharSequence[] charSequenceArray36 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue37 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37, charSequenceArray36);
        boolean boolean39 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean40 = charSequenceList32.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37);
        boolean boolean41 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean42 = charSequenceQueue37.isAtFullCapacity();
        boolean boolean43 = charSequenceList23.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue37);
        boolean boolean44 = charSequenceQueue8.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator45 = charSequenceList23.spliterator();
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charSequenceArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!]" + "'", str20, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[hi!]" + "'", str27, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(charSequenceArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator45);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        int int6 = charSequenceQueue1.maxSize();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean18 = charSequenceQueue16.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence19 = charSequenceQueue16.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream20 = charSequenceQueue16.parallelStream();
        boolean boolean22 = charSequenceQueue16.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator23 = charSequenceQueue16.spliterator();
        boolean boolean24 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        java.lang.CharSequence charSequence25 = charSequenceQueue16.poll();
        java.lang.CharSequence[] charSequenceArray27 = new java.lang.CharSequence[] { "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue28 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue28, charSequenceArray27);
        int int30 = charSequenceQueue28.maxSize();
        boolean boolean31 = charSequenceQueue28.isFull();
        java.lang.String str32 = charSequenceQueue28.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean36 = charSequenceQueue34.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray39 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue40 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40, charSequenceArray39);
        boolean boolean42 = charSequenceQueue40.isAtFullCapacity();
        boolean boolean43 = charSequenceQueue34.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue40);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue45 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator46 = charSequenceQueue45.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator47 = charSequenceQueue45.spliterator();
        boolean boolean49 = charSequenceQueue45.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence50 = charSequenceQueue45.poll();
        boolean boolean51 = charSequenceQueue40.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue45);
        java.util.Queue[] queueArray53 = new java.util.Queue[2];
        @SuppressWarnings("unchecked")
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray54 = (java.util.Queue<java.lang.CharSequence>[]) queueArray53;
        charSequenceQueueArray54[0] = charSequenceQueue28;
        charSequenceQueueArray54[1] = charSequenceQueue45;
        java.util.Queue<java.lang.CharSequence>[] charSequenceQueueArray59 = charSequenceQueue16.toArray(charSequenceQueueArray54);
        java.lang.Iterable<java.lang.CharSequence>[] charSequenceIterableArray60 = charSequenceQueue1.toArray((java.lang.Iterable<java.lang.CharSequence>[]) charSequenceQueueArray59);
        java.lang.CharSequence[] charSequenceArray62 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList63 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList63, charSequenceArray62);
        java.lang.Object obj65 = null;
        boolean boolean66 = charSequenceList63.contains(obj65);
        java.lang.String str67 = charSequenceList63.toString();
        java.lang.CharSequence[] charSequenceArray69 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList70 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList70, charSequenceArray69);
        java.lang.Object obj72 = null;
        boolean boolean73 = charSequenceList70.contains(obj72);
        java.lang.String str74 = charSequenceList70.toString();
        boolean boolean75 = charSequenceList63.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList70);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue76 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList70);
        java.lang.Object[] objArray77 = charSequenceList70.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue79 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean81 = charSequenceQueue79.offer((java.lang.CharSequence) "");
        boolean boolean83 = charSequenceQueue79.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue85 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean86 = charSequenceQueue79.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue85);
        boolean boolean87 = charSequenceQueue79.isEmpty();
        boolean boolean89 = charSequenceQueue79.remove((java.lang.Object) 10.0d);
        charSequenceQueue79.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue92 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        int int93 = charSequenceQueue92.maxSize();
        boolean boolean94 = charSequenceQueue79.remove((java.lang.Object) charSequenceQueue92);
        boolean boolean95 = charSequenceList70.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue79);
        boolean boolean96 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue79);
        java.lang.CharSequence charSequence97 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = charSequenceQueue79.add(charSequence97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Attempted to add null object to queue");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertNotNull(charSequenceStream20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "" + "'", charSequence25, "");
        org.junit.Assert.assertNotNull(charSequenceArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(charSequenceArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator46);
        org.junit.Assert.assertNotNull(charSequenceSpliterator47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "" + "'", charSequence50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(queueArray53);
        org.junit.Assert.assertNotNull(charSequenceQueueArray54);
        org.junit.Assert.assertNotNull(charSequenceQueueArray59);
        org.junit.Assert.assertNotNull(charSequenceIterableArray60);
        org.junit.Assert.assertNotNull(charSequenceArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[hi!]" + "'", str67, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[hi!]" + "'", str74, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 100 + "'", int93 == 100);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Cloneable> cloneableQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.Cloneable>((int) '#');
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.util.RandomAccess> randomAccessQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.RandomAccess>((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator2 = charSequenceQueue1.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "");
        boolean boolean6 = charSequenceQueue1.isAtFullCapacity();
        boolean boolean8 = charSequenceQueue1.offer((java.lang.CharSequence) "[, ]");
        charSequenceQueue1.clear();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream10 = charSequenceQueue1.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence12 = charSequenceQueue1.get(32);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (32) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceSpliterator2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceStream10);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.lang.CharSequence charSequence41 = charSequenceQueue38.element();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue43 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean45 = charSequenceQueue43.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence46 = charSequenceQueue43.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream47 = charSequenceQueue43.parallelStream();
        boolean boolean49 = charSequenceQueue43.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator50 = charSequenceQueue43.spliterator();
        java.lang.CharSequence charSequence51 = charSequenceQueue43.element();
        boolean boolean52 = charSequenceQueue38.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue43);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue54 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) ' ');
        java.lang.CharSequence charSequence55 = charSequenceQueue54.peek();
        boolean boolean56 = charSequenceQueue38.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor57 = charSequenceQueue38.iterator();
        boolean boolean58 = charSequenceQueue38.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "" + "'", charSequence46, "");
        org.junit.Assert.assertNotNull(charSequenceStream47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator50);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "" + "'", charSequence51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(charSequence55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(charSequenceItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream8 = charSequenceQueue7.parallelStream();
        boolean boolean10 = charSequenceQueue7.contains((java.lang.Object) 1.0d);
        boolean boolean11 = charSequenceQueue7.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream12 = charSequenceQueue7.stream();
        boolean boolean13 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean14 = charSequenceQueue1.isEmpty();
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.Object obj19 = null;
        boolean boolean20 = charSequenceList17.contains(obj19);
        java.lang.String str21 = charSequenceList17.toString();
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList24 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList24, charSequenceArray23);
        java.lang.Object obj26 = null;
        boolean boolean27 = charSequenceList24.contains(obj26);
        java.lang.String str28 = charSequenceList24.toString();
        boolean boolean29 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList24);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList24);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream31 = charSequenceQueue30.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream32 = charSequenceQueue30.parallelStream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue34 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator35 = charSequenceQueue34.spliterator();
        java.lang.CharSequence charSequence36 = charSequenceQueue34.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean40 = charSequenceQueue38.offer((java.lang.CharSequence) "");
        boolean boolean41 = charSequenceQueue34.contains((java.lang.Object) charSequenceQueue38);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor42 = charSequenceQueue34.iterator();
        boolean boolean43 = charSequenceQueue30.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        boolean boolean44 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue34);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue46 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean48 = charSequenceQueue46.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray51 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue52 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue52, charSequenceArray51);
        boolean boolean54 = charSequenceQueue52.isAtFullCapacity();
        boolean boolean55 = charSequenceQueue46.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue52);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue57 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator58 = charSequenceQueue57.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator59 = charSequenceQueue57.spliterator();
        boolean boolean61 = charSequenceQueue57.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence62 = charSequenceQueue57.poll();
        boolean boolean63 = charSequenceQueue52.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue57);
        java.lang.CharSequence charSequence64 = charSequenceQueue52.remove();
        boolean boolean65 = charSequenceQueue52.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue67 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream68 = charSequenceQueue67.parallelStream();
        boolean boolean69 = charSequenceQueue52.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue67);
        int int70 = charSequenceQueue52.maxSize();
        java.lang.CharSequence charSequence71 = charSequenceQueue52.poll();
        int int72 = charSequenceQueue52.maxSize();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream73 = charSequenceQueue52.stream();
        boolean boolean74 = charSequenceQueue34.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue52);
        java.lang.CharSequence charSequence75 = charSequenceQueue34.peek();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSequenceStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[hi!]" + "'", str21, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[hi!]" + "'", str28, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charSequenceStream31);
        org.junit.Assert.assertNotNull(charSequenceStream32);
        org.junit.Assert.assertNotNull(charSequenceSpliterator35);
        org.junit.Assert.assertNull(charSequence36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(charSequenceArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator58);
        org.junit.Assert.assertNotNull(charSequenceSpliterator59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "" + "'", charSequence62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "" + "'", charSequence64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(charSequenceStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "" + "'", charSequence71, "");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 32 + "'", int72 == 32);
        org.junit.Assert.assertNotNull(charSequenceStream73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(charSequence75);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.String str6 = charSequenceQueue1.toString();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream7 = charSequenceQueue1.parallelStream();
        boolean boolean8 = charSequenceQueue1.isAtFullCapacity();
        java.lang.Object[] objArray9 = charSequenceQueue1.toArray();
        java.lang.Class<?> wildcardClass10 = charSequenceQueue1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[, ]" + "'", str6, "[, ]");
        org.junit.Assert.assertNotNull(charSequenceStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[, ]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        java.lang.Object[] objArray29 = charSequenceQueue1.toArray();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator32 = charSequenceQueue31.spliterator();
        java.lang.CharSequence charSequence33 = charSequenceQueue31.peek();
        boolean boolean34 = charSequenceQueue31.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream35 = charSequenceQueue31.stream();
        boolean boolean36 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue31);
        java.lang.CharSequence charSequence37 = charSequenceQueue31.peek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(charSequenceSpliterator32);
        org.junit.Assert.assertNull(charSequence33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charSequenceStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(charSequence37);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.Object obj11 = null;
        boolean boolean12 = charSequenceList9.contains(obj11);
        java.lang.String str13 = charSequenceList9.toString();
        boolean boolean14 = charSequenceList2.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList9);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream16 = charSequenceQueue15.stream();
        java.lang.String str17 = charSequenceQueue15.toString();
        boolean boolean18 = charSequenceQueue15.isFull();
        boolean boolean20 = charSequenceQueue15.add((java.lang.CharSequence) "[]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence22 = charSequenceQueue15.get((-1));
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (-1) is outside the available range [0, 1)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[hi!]" + "'", str13, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceStream16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.stream();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator3 = charSequenceQueue1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence4 = charSequenceQueue1.remove();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertNotNull(charSequenceSpliterator3);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue12.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator14 = charSequenceQueue12.spliterator();
        boolean boolean16 = charSequenceQueue12.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence17 = charSequenceQueue12.poll();
        boolean boolean18 = charSequenceQueue7.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        java.lang.CharSequence charSequence19 = charSequenceQueue7.remove();
        boolean boolean20 = charSequenceQueue7.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream23 = charSequenceQueue22.parallelStream();
        boolean boolean24 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        int int25 = charSequenceQueue7.maxSize();
        java.lang.CharSequence charSequence26 = charSequenceQueue7.poll();
        int int27 = charSequenceQueue7.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean31 = charSequenceQueue29.offer((java.lang.CharSequence) "");
        int int32 = charSequenceQueue29.maxSize();
        int int33 = charSequenceQueue29.maxSize();
        boolean boolean34 = charSequenceQueue7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue36 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean38 = charSequenceQueue36.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue42 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42, charSequenceArray41);
        boolean boolean44 = charSequenceQueue42.isAtFullCapacity();
        boolean boolean45 = charSequenceQueue36.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue42);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue47 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator48 = charSequenceQueue47.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator49 = charSequenceQueue47.spliterator();
        boolean boolean51 = charSequenceQueue47.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence52 = charSequenceQueue47.poll();
        boolean boolean53 = charSequenceQueue42.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue47);
        java.lang.CharSequence charSequence54 = charSequenceQueue42.remove();
        boolean boolean55 = charSequenceQueue42.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue57 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream58 = charSequenceQueue57.parallelStream();
        boolean boolean59 = charSequenceQueue42.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue57);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor60 = charSequenceQueue57.iterator();
        boolean boolean61 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue57);
        boolean boolean62 = charSequenceQueue7.isAtFullCapacity();
        java.lang.Object[] objArray63 = charSequenceQueue7.toArray();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertNotNull(charSequenceSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charSequenceStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "" + "'", charSequence26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator48);
        org.junit.Assert.assertNotNull(charSequenceSpliterator49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "" + "'", charSequence52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "" + "'", charSequence54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charSequenceStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charSequenceItor60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue3 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean5 = charSequenceQueue3.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList8 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8, charSequenceArray7);
        java.lang.Object obj10 = null;
        boolean boolean11 = charSequenceList8.contains(obj10);
        java.lang.String str12 = charSequenceList8.toString();
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList15 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15, charSequenceArray14);
        java.lang.Object obj17 = null;
        boolean boolean18 = charSequenceList15.contains(obj17);
        java.lang.String str19 = charSequenceList15.toString();
        boolean boolean20 = charSequenceList8.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList15);
        boolean boolean21 = charSequenceQueue3.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList8);
        boolean boolean22 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue3);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray29 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30, charSequenceArray29);
        boolean boolean32 = charSequenceQueue30.isAtFullCapacity();
        boolean boolean33 = charSequenceQueue24.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue30);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue35 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator36 = charSequenceQueue35.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator37 = charSequenceQueue35.spliterator();
        boolean boolean39 = charSequenceQueue35.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence40 = charSequenceQueue35.poll();
        boolean boolean41 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue35);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList45 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList45, charSequenceArray44);
        java.lang.CharSequence[] charSequenceArray49 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue50 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50, charSequenceArray49);
        boolean boolean52 = charSequenceQueue50.isAtFullCapacity();
        boolean boolean53 = charSequenceList45.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean54 = charSequenceQueue50.isAtFullCapacity();
        int int55 = charSequenceQueue50.maxSize();
        boolean boolean56 = charSequenceQueue30.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean57 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue50);
        boolean boolean59 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = charSequenceQueue1.element();
        java.util.Queue<java.lang.CharSequence>[][] charSequenceQueueArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Queue<java.lang.CharSequence>[][] charSequenceQueueArray62 = charSequenceQueue1.toArray(charSequenceQueueArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[hi!]" + "'", str12, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[hi!]" + "'", str19, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator36);
        org.junit.Assert.assertNotNull(charSequenceSpliterator37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(charSequenceArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean12 = charSequenceQueue7.offer((java.lang.CharSequence) "[hi!]");
        java.lang.CharSequence charSequence13 = charSequenceQueue7.remove();
        boolean boolean15 = charSequenceQueue7.offer((java.lang.CharSequence) "");
        java.util.Iterator<java.lang.CharSequence> charSequenceItor16 = charSequenceQueue7.iterator();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor17 = charSequenceQueue7.iterator();
        boolean boolean19 = charSequenceQueue7.offer((java.lang.CharSequence) "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charSequenceItor16);
        org.junit.Assert.assertNotNull(charSequenceItor17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray5 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList6 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList6, charSequenceArray5);
        java.lang.Object obj8 = null;
        boolean boolean9 = charSequenceList6.contains(obj8);
        java.lang.String str10 = charSequenceList6.toString();
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList13 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13, charSequenceArray12);
        java.lang.Object obj15 = null;
        boolean boolean16 = charSequenceList13.contains(obj15);
        java.lang.String str17 = charSequenceList13.toString();
        boolean boolean18 = charSequenceList6.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList13);
        boolean boolean19 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList6);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator20 = charSequenceQueue1.spliterator();
        boolean boolean22 = charSequenceQueue1.offer((java.lang.CharSequence) "[hi!]");
        java.lang.CharSequence[] charSequenceArray25 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList26 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList26, charSequenceArray25);
        java.lang.CharSequence[] charSequenceArray30 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue31 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue31, charSequenceArray30);
        boolean boolean33 = charSequenceQueue31.isAtFullCapacity();
        boolean boolean34 = charSequenceList26.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue31);
        boolean boolean35 = charSequenceQueue31.isAtFullCapacity();
        java.lang.Object[] objArray36 = charSequenceQueue31.toArray();
        boolean boolean38 = charSequenceQueue31.contains((java.lang.Object) false);
        boolean boolean39 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue31);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor40 = charSequenceQueue31.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence42 = charSequenceQueue31.get(100);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (100) is outside the available range [0, 2)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[hi!]" + "'", str10, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[hi!]" + "'", str17, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charSequenceArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(charSequenceArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[, ]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charSequenceItor40);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        int int6 = charSequenceQueue1.maxSize();
        boolean boolean7 = charSequenceQueue1.isAtFullCapacity();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor8 = charSequenceQueue1.iterator();
        java.lang.CharSequence charSequence10 = charSequenceQueue1.get(0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSequenceItor8);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue6 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue6.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence9 = charSequenceQueue6.element();
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList17 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17, charSequenceArray16);
        java.lang.CharSequence[] charSequenceArray21 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue22 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22, charSequenceArray21);
        boolean boolean24 = charSequenceQueue22.isAtFullCapacity();
        boolean boolean25 = charSequenceList17.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue22);
        boolean boolean26 = charSequenceList12.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean27 = charSequenceQueue6.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        boolean boolean28 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList17);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue30 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean32 = charSequenceQueue30.offer((java.lang.CharSequence) "");
        charSequenceQueue30.clear();
        boolean boolean35 = charSequenceQueue30.remove((java.lang.Object) (-1.0d));
        java.lang.CharSequence[] charSequenceArray38 = new java.lang.CharSequence[] { "[hi!]", "[hi!]" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList39 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39, charSequenceArray38);
        boolean boolean41 = charSequenceQueue30.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        boolean boolean42 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList39);
        java.lang.String str43 = charSequenceList39.toString();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream44 = charSequenceList39.stream();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream45 = charSequenceList39.stream();
        java.lang.CharSequence[] charSequenceArray47 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList48 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList48, charSequenceArray47);
        java.lang.Object obj50 = null;
        boolean boolean51 = charSequenceList48.contains(obj50);
        java.lang.String str52 = charSequenceList48.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue54 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean55 = charSequenceList48.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54);
        charSequenceQueue54.clear();
        boolean boolean57 = charSequenceList39.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue54);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator58 = charSequenceQueue54.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence59 = charSequenceQueue54.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charSequenceArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charSequenceArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[[hi!], [hi!]]" + "'", str43, "[[hi!], [hi!]]");
        org.junit.Assert.assertNotNull(charSequenceStream44);
        org.junit.Assert.assertNotNull(charSequenceStream45);
        org.junit.Assert.assertNotNull(charSequenceArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[hi!]" + "'", str52, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator58);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean7 = charSequenceQueue1.offer((java.lang.CharSequence) "[[hi!], [hi!]]");
        java.util.AbstractCollection<java.lang.CharSequence>[][] charSequenceCollectionArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.AbstractCollection<java.lang.CharSequence>[][] charSequenceCollectionArray9 = charSequenceQueue1.toArray(charSequenceCollectionArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>(52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence3 = charSequenceQueue1.get(0);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: The specified index (0) is outside the available range [0, 0)");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        boolean boolean5 = charSequenceQueue1.add((java.lang.CharSequence) "hi!");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean8 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean9 = charSequenceQueue1.isEmpty();
        boolean boolean11 = charSequenceQueue1.remove((java.lang.Object) 10.0d);
        charSequenceQueue1.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 100);
        int int15 = charSequenceQueue14.maxSize();
        boolean boolean16 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue14);
        java.lang.CharSequence charSequence17 = charSequenceQueue14.peek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(charSequence17);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        int int4 = charSequenceQueue1.maxSize();
        int int5 = charSequenceQueue1.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceQueue7.offer((java.lang.CharSequence) "");
        boolean boolean11 = charSequenceQueue7.offer((java.lang.CharSequence) "");
        boolean boolean13 = charSequenceQueue7.offer((java.lang.CharSequence) "[[hi!], [hi!]]");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue15 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator16 = charSequenceQueue15.spliterator();
        java.lang.CharSequence charSequence17 = charSequenceQueue15.peek();
        boolean boolean18 = charSequenceQueue15.isEmpty();
        boolean boolean19 = charSequenceQueue7.remove((java.lang.Object) boolean18);
        boolean boolean21 = charSequenceQueue7.add((java.lang.CharSequence) "[]");
        boolean boolean22 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean26 = charSequenceQueue24.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray28 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList29 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList29, charSequenceArray28);
        java.lang.Object obj31 = null;
        boolean boolean32 = charSequenceList29.contains(obj31);
        java.lang.String str33 = charSequenceList29.toString();
        java.lang.CharSequence[] charSequenceArray35 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList36 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList36, charSequenceArray35);
        java.lang.Object obj38 = null;
        boolean boolean39 = charSequenceList36.contains(obj38);
        java.lang.String str40 = charSequenceList36.toString();
        boolean boolean41 = charSequenceList29.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList36);
        boolean boolean42 = charSequenceQueue24.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList29);
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList45 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList45, charSequenceArray44);
        java.lang.Object obj47 = null;
        boolean boolean48 = charSequenceList45.contains(obj47);
        java.lang.String str49 = charSequenceList45.toString();
        java.lang.CharSequence[] charSequenceArray51 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList52 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList52, charSequenceArray51);
        java.lang.Object obj54 = null;
        boolean boolean55 = charSequenceList52.contains(obj54);
        java.lang.String str56 = charSequenceList52.toString();
        boolean boolean57 = charSequenceList45.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList52);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue59 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean61 = charSequenceQueue59.offer((java.lang.CharSequence) "");
        boolean boolean63 = charSequenceQueue59.add((java.lang.CharSequence) "hi!");
        int int64 = charSequenceQueue59.maxSize();
        boolean boolean65 = charSequenceList45.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue59);
        boolean boolean66 = charSequenceList29.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue59);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue68 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue70 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean72 = charSequenceQueue70.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray74 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList75 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList75, charSequenceArray74);
        java.lang.Object obj77 = null;
        boolean boolean78 = charSequenceList75.contains(obj77);
        java.lang.String str79 = charSequenceList75.toString();
        java.lang.CharSequence[] charSequenceArray81 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList82 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList82, charSequenceArray81);
        java.lang.Object obj84 = null;
        boolean boolean85 = charSequenceList82.contains(obj84);
        java.lang.String str86 = charSequenceList82.toString();
        boolean boolean87 = charSequenceList75.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList82);
        boolean boolean88 = charSequenceQueue70.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList75);
        boolean boolean89 = charSequenceQueue68.remove((java.lang.Object) charSequenceQueue70);
        boolean boolean90 = charSequenceList29.remove((java.lang.Object) charSequenceQueue68);
        boolean boolean91 = charSequenceQueue68.isFull();
        boolean boolean92 = charSequenceQueue1.contains((java.lang.Object) boolean91);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator16);
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charSequenceArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[hi!]" + "'", str33, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[hi!]" + "'", str40, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[hi!]" + "'", str49, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[hi!]" + "'", str56, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(charSequenceArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[hi!]" + "'", str79, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[hi!]" + "'", str86, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.lang.String str41 = charSequenceQueue38.toString();
        int int42 = charSequenceQueue38.size();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue44 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean46 = charSequenceQueue44.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence47 = charSequenceQueue44.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream48 = charSequenceQueue44.parallelStream();
        boolean boolean50 = charSequenceQueue44.contains((java.lang.Object) (short) 100);
        charSequenceQueue44.clear();
        boolean boolean52 = charSequenceQueue38.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue44);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream53 = charSequenceQueue38.stream();
        java.lang.Class<?> wildcardClass54 = charSequenceQueue38.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[hi!]" + "'", str41, "[hi!]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "" + "'", charSequence47, "");
        org.junit.Assert.assertNotNull(charSequenceStream48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charSequenceStream53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7, charSequenceArray6);
        boolean boolean9 = charSequenceQueue7.isAtFullCapacity();
        boolean boolean10 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue7);
        boolean boolean11 = charSequenceQueue7.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue13 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean15 = charSequenceQueue13.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence16 = charSequenceQueue13.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream17 = charSequenceQueue13.parallelStream();
        boolean boolean19 = charSequenceQueue13.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator20 = charSequenceQueue13.spliterator();
        boolean boolean21 = charSequenceQueue13.isAtFullCapacity();
        boolean boolean22 = charSequenceQueue7.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue13);
        java.lang.CharSequence charSequence23 = charSequenceQueue7.peek();
        java.lang.CharSequence[] charSequenceArray25 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList26 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList26, charSequenceArray25);
        java.lang.CharSequence[] charSequenceArray30 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList31 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList31, charSequenceArray30);
        java.lang.CharSequence[] charSequenceArray35 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue36 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue36, charSequenceArray35);
        boolean boolean38 = charSequenceQueue36.isAtFullCapacity();
        boolean boolean39 = charSequenceList31.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue36);
        boolean boolean40 = charSequenceList26.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList31);
        java.lang.CharSequence[] charSequenceArray43 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList44 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList44, charSequenceArray43);
        java.lang.CharSequence[] charSequenceArray48 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue49 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue49, charSequenceArray48);
        boolean boolean51 = charSequenceQueue49.isAtFullCapacity();
        boolean boolean52 = charSequenceList44.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue49);
        boolean boolean53 = charSequenceQueue49.isAtFullCapacity();
        int int54 = charSequenceQueue49.maxSize();
        boolean boolean55 = charSequenceList31.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue49);
        boolean boolean56 = charSequenceQueue7.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList31);
        java.lang.Class<?> wildcardClass57 = charSequenceQueue7.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "" + "'", charSequence16, "");
        org.junit.Assert.assertNotNull(charSequenceStream17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "" + "'", charSequence23, "");
        org.junit.Assert.assertNotNull(charSequenceArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(charSequenceArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charSequenceArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSequenceArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charSequenceArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 32 + "'", int54 == 32);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        boolean boolean7 = charSequenceQueue1.contains((java.lang.Object) (short) 100);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue1.spliterator();
        int int9 = charSequenceQueue1.size();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream10 = charSequenceQueue1.stream();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue12 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream13 = charSequenceQueue12.parallelStream();
        boolean boolean15 = charSequenceQueue12.contains((java.lang.Object) 1.0d);
        boolean boolean16 = charSequenceQueue12.isFull();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream17 = charSequenceQueue12.stream();
        boolean boolean19 = charSequenceQueue12.offer((java.lang.CharSequence) "");
        charSequenceQueue12.clear();
        charSequenceQueue12.clear();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue23 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean25 = charSequenceQueue23.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence26 = charSequenceQueue23.element();
        java.lang.CharSequence[] charSequenceArray28 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList29 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList29, charSequenceArray28);
        java.lang.CharSequence[] charSequenceArray33 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList34 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34, charSequenceArray33);
        java.lang.CharSequence[] charSequenceArray38 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue39 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue39, charSequenceArray38);
        boolean boolean41 = charSequenceQueue39.isAtFullCapacity();
        boolean boolean42 = charSequenceList34.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue39);
        boolean boolean43 = charSequenceList29.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34);
        boolean boolean44 = charSequenceQueue23.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList34);
        java.lang.CharSequence[] charSequenceArray46 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList47 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList47, charSequenceArray46);
        java.lang.Object obj49 = null;
        boolean boolean50 = charSequenceList47.contains(obj49);
        java.lang.String str51 = charSequenceList47.toString();
        java.lang.CharSequence[] charSequenceArray53 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList54 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList54, charSequenceArray53);
        java.lang.Object obj56 = null;
        boolean boolean57 = charSequenceList54.contains(obj56);
        java.lang.String str58 = charSequenceList54.toString();
        boolean boolean59 = charSequenceList47.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList54);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue60 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList54);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream61 = charSequenceQueue60.stream();
        boolean boolean62 = charSequenceQueue23.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue60);
        java.lang.CharSequence charSequence63 = charSequenceQueue60.element();
        java.lang.CharSequence charSequence64 = charSequenceQueue60.peek();
        boolean boolean65 = charSequenceQueue60.isFull();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator66 = charSequenceQueue60.spliterator();
        boolean boolean67 = charSequenceQueue12.remove((java.lang.Object) charSequenceQueue60);
        boolean boolean68 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue12);
        boolean boolean70 = charSequenceQueue12.add((java.lang.CharSequence) "[[hi!], [hi!]]");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue72 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream73 = charSequenceQueue72.parallelStream();
        boolean boolean74 = charSequenceQueue12.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue72);
        java.lang.Object[] objArray75 = charSequenceQueue72.toArray();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(charSequenceStream10);
        org.junit.Assert.assertNotNull(charSequenceStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charSequenceStream17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "" + "'", charSequence26, "");
        org.junit.Assert.assertNotNull(charSequenceArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(charSequenceArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(charSequenceArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charSequenceArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[hi!]" + "'", str51, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[hi!]" + "'", str58, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charSequenceStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(charSequenceStream73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.peek();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream5 = charSequenceQueue1.parallelStream();
        java.lang.CharSequence[] charSequenceArray8 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList9 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList9, charSequenceArray8);
        java.lang.CharSequence[] charSequenceArray13 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue14 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14, charSequenceArray13);
        boolean boolean16 = charSequenceQueue14.isAtFullCapacity();
        boolean boolean17 = charSequenceList9.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean18 = charSequenceQueue14.isAtFullCapacity();
        int int19 = charSequenceQueue14.maxSize();
        boolean boolean20 = charSequenceQueue1.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue14);
        boolean boolean22 = charSequenceQueue1.offer((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = charSequenceQueue1.remove();
        java.lang.CharSequence charSequence24 = charSequenceQueue1.remove();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue26 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean28 = charSequenceQueue26.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue32 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue32, charSequenceArray31);
        boolean boolean34 = charSequenceQueue32.isAtFullCapacity();
        boolean boolean35 = charSequenceQueue26.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue32);
        int int36 = charSequenceQueue32.maxSize();
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream37 = charSequenceQueue32.stream();
        java.lang.String str38 = charSequenceQueue32.toString();
        boolean boolean39 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue32);
        java.lang.CharSequence charSequence40 = charSequenceQueue1.poll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceStream5);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charSequenceArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "" + "'", charSequence23, "");
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "" + "'", charSequence24, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
        org.junit.Assert.assertNotNull(charSequenceStream37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[, ]" + "'", str38, "[, ]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "" + "'", charSequence40, "");
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        charSequenceQueue1.clear();
        boolean boolean6 = charSequenceQueue1.isEmpty();
        boolean boolean7 = charSequenceQueue1.isEmpty();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue9 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator10 = charSequenceQueue9.spliterator();
        java.lang.CharSequence charSequence11 = charSequenceQueue9.peek();
        java.lang.CharSequence charSequence12 = charSequenceQueue9.poll();
        boolean boolean13 = charSequenceQueue9.isFull();
        java.lang.CharSequence charSequence14 = charSequenceQueue9.poll();
        boolean boolean15 = charSequenceQueue1.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue9);
        java.util.Collection<java.lang.CharSequence> charSequenceCollection16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = charSequenceQueue1.addAll(charSequenceCollection16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator10);
        org.junit.Assert.assertNull(charSequence11);
        org.junit.Assert.assertNull(charSequence12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(charSequence14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence[]> charSequenceArrayQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence[]>((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.queue.CircularFifoQueue<java.util.Collection<java.lang.CharSequence>> charSequenceCollectionQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.util.Collection<java.lang.CharSequence>>((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The size must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream2 = charSequenceQueue1.parallelStream();
        boolean boolean4 = charSequenceQueue1.contains((java.lang.Object) 1.0d);
        boolean boolean5 = charSequenceQueue1.isFull();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue7 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator8 = charSequenceQueue7.spliterator();
        java.lang.CharSequence charSequence9 = charSequenceQueue7.peek();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean13 = charSequenceQueue11.offer((java.lang.CharSequence) "");
        boolean boolean14 = charSequenceQueue7.contains((java.lang.Object) charSequenceQueue11);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor15 = charSequenceQueue7.iterator();
        boolean boolean16 = charSequenceQueue1.remove((java.lang.Object) charSequenceQueue7);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue18 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean20 = charSequenceQueue18.offer((java.lang.CharSequence) "");
        java.lang.CharSequence[] charSequenceArray23 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue24 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24, charSequenceArray23);
        boolean boolean26 = charSequenceQueue24.isAtFullCapacity();
        boolean boolean27 = charSequenceQueue18.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator30 = charSequenceQueue29.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator31 = charSequenceQueue29.spliterator();
        boolean boolean33 = charSequenceQueue29.add((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence34 = charSequenceQueue29.poll();
        boolean boolean35 = charSequenceQueue24.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29);
        boolean boolean36 = charSequenceQueue7.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue24);
        java.lang.CharSequence charSequence37 = charSequenceQueue24.poll();
        java.lang.Class<?> wildcardClass38 = charSequence37.getClass();
        org.junit.Assert.assertNotNull(charSequenceStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator8);
        org.junit.Assert.assertNull(charSequence9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSequenceItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charSequenceArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator30);
        org.junit.Assert.assertNotNull(charSequenceSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "" + "'", charSequence37, "");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue1 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean3 = charSequenceQueue1.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence4 = charSequenceQueue1.element();
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList7 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList7, charSequenceArray6);
        java.lang.CharSequence[] charSequenceArray11 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList12 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12, charSequenceArray11);
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue17 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17, charSequenceArray16);
        boolean boolean19 = charSequenceQueue17.isAtFullCapacity();
        boolean boolean20 = charSequenceList12.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue17);
        boolean boolean21 = charSequenceList7.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        boolean boolean22 = charSequenceQueue1.removeAll((java.util.Collection<java.lang.CharSequence>) charSequenceList12);
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList25 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList25, charSequenceArray24);
        java.lang.Object obj27 = null;
        boolean boolean28 = charSequenceList25.contains(obj27);
        java.lang.String str29 = charSequenceList25.toString();
        java.lang.CharSequence[] charSequenceArray31 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList32 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32, charSequenceArray31);
        java.lang.Object obj34 = null;
        boolean boolean35 = charSequenceList32.contains(obj34);
        java.lang.String str36 = charSequenceList32.toString();
        boolean boolean37 = charSequenceList25.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue38 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((java.util.Collection<java.lang.CharSequence>) charSequenceList32);
        java.util.stream.Stream<java.lang.CharSequence> charSequenceStream39 = charSequenceQueue38.stream();
        boolean boolean40 = charSequenceQueue1.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue38);
        java.lang.CharSequence charSequence41 = charSequenceQueue38.element();
        java.lang.CharSequence charSequence42 = charSequenceQueue38.peek();
        boolean boolean43 = charSequenceQueue38.isFull();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator44 = charSequenceQueue38.spliterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue46 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean48 = charSequenceQueue46.offer((java.lang.CharSequence) "");
        charSequenceQueue46.clear();
        boolean boolean51 = charSequenceQueue46.remove((java.lang.Object) (-1.0d));
        int int52 = charSequenceQueue46.maxSize();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue54 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) '4');
        boolean boolean56 = charSequenceQueue54.offer((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence57 = charSequenceQueue54.peek();
        boolean boolean58 = charSequenceQueue46.remove((java.lang.Object) charSequenceQueue54);
        boolean boolean59 = charSequenceQueue46.isAtFullCapacity();
        boolean boolean60 = charSequenceQueue38.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue46);
        boolean boolean61 = charSequenceQueue38.isFull();
        java.lang.Object obj62 = null;
        boolean boolean63 = charSequenceQueue38.contains(obj62);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charSequenceArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[hi!]" + "'", str29, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[hi!]" + "'", str36, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charSequenceStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charSequenceSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "" + "'", charSequence57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        java.lang.CharSequence[] charSequenceArray2 = new java.lang.CharSequence[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList3 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList3, charSequenceArray2);
        java.lang.CharSequence[] charSequenceArray7 = new java.lang.CharSequence[] { "", "" };
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8, charSequenceArray7);
        boolean boolean10 = charSequenceQueue8.isAtFullCapacity();
        boolean boolean11 = charSequenceList3.retainAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        boolean boolean12 = charSequenceQueue8.isAtFullCapacity();
        java.lang.Object[] objArray13 = charSequenceQueue8.toArray();
        java.util.Iterator<java.lang.CharSequence> charSequenceItor14 = charSequenceQueue8.iterator();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue16 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean18 = charSequenceQueue16.offer((java.lang.CharSequence) "");
        charSequenceQueue16.clear();
        boolean boolean21 = charSequenceQueue16.remove((java.lang.Object) (-1.0d));
        boolean boolean22 = charSequenceQueue8.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence23 = charSequenceQueue16.element();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: queue is empty");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, ]");
        org.junit.Assert.assertNotNull(charSequenceItor14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        java.lang.CharSequence[] charSequenceArray1 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList2 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList2, charSequenceArray1);
        java.lang.Object obj4 = null;
        boolean boolean5 = charSequenceList2.contains(obj4);
        java.lang.String str6 = charSequenceList2.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue8 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean9 = charSequenceList2.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue8);
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue11 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator12 = charSequenceQueue11.spliterator();
        java.util.Spliterator<java.lang.CharSequence> charSequenceSpliterator13 = charSequenceQueue11.spliterator();
        boolean boolean15 = charSequenceQueue11.add((java.lang.CharSequence) "");
        boolean boolean16 = charSequenceQueue11.isAtFullCapacity();
        java.lang.CharSequence charSequence17 = charSequenceQueue11.element();
        int int18 = charSequenceQueue11.size();
        boolean boolean19 = charSequenceList2.remove((java.lang.Object) charSequenceQueue11);
        java.lang.String str20 = charSequenceList2.toString();
        java.lang.CharSequence[] charSequenceArray22 = new java.lang.CharSequence[] { "hi!" };
        java.util.ArrayList<java.lang.CharSequence> charSequenceList23 = new java.util.ArrayList<java.lang.CharSequence>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.CharSequence>) charSequenceList23, charSequenceArray22);
        java.lang.Object obj25 = null;
        boolean boolean26 = charSequenceList23.contains(obj25);
        java.lang.String str27 = charSequenceList23.toString();
        org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence> charSequenceQueue29 = new org.apache.commons.collections4.queue.CircularFifoQueue<java.lang.CharSequence>((int) (short) 10);
        boolean boolean30 = charSequenceList23.containsAll((java.util.Collection<java.lang.CharSequence>) charSequenceQueue29);
        java.util.Iterator<java.lang.CharSequence> charSequenceItor31 = charSequenceQueue29.iterator();
        boolean boolean32 = charSequenceQueue29.isFull();
        java.lang.Class<?> wildcardClass33 = charSequenceQueue29.getClass();
        java.lang.reflect.AnnotatedElement[] annotatedElementArray34 = new java.lang.reflect.AnnotatedElement[] { wildcardClass33 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.AnnotatedElement[] annotatedElementArray35 = charSequenceList2.toArray(annotatedElementArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[hi!]" + "'", str6, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSequenceSpliterator12);
        org.junit.Assert.assertNotNull(charSequenceSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[hi!]" + "'", str20, "[hi!]");
        org.junit.Assert.assertNotNull(charSequenceArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[hi!]" + "'", str27, "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(charSequenceItor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(annotatedElementArray34);
    }
}

